(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["vff"] = factory();
	else
		root["vff"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 10);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction findKey(data, keyToFind) {\n    var keys = Object.keys(data);\n    for (var i = 0; i < keys.length; i++) {\n        if (keys[i].toLowerCase() === keyToFind.toLowerCase()) {\n            return keys[i];\n        }\n    }\n}\nfunction trim(str, charList) {\n    if (charList === undefined) {\n        charList = \"\\\\s\";\n    }\n    return str.replace(new RegExp(\"^[\" + charList + \"]+\"), \"\").replace(new RegExp(\"[\" + charList + \"]+$\"), \"\");\n}\n\nfunction isObject(obj) {\n    return obj === Object(obj) && !Array.isArray(obj) && !(obj instanceof HTMLElement);\n}\n\nfunction getByPath(obj, path) {\n    path = path ? trim(path, '.').split('.') : [\"\"];\n\n    var result = obj;\n    for (var i = 0; i < path.length; i++) {\n        result = result[path[i]];\n        if (result === undefined) {\n            return result;\n        }\n    }\n\n    return result;\n}\nfunction setByPath(obj, path, value) {\n    if (arguments.length !== 3) {\n        throw new Error('Missing Arguments!');\n    }\n    path = path ? trim(path, '.').split('.') : [\"\"];\n    var result = obj;\n    for (var i = 0; i < path.length; i++) {\n        if (i === path.length - 1) {\n            result[path[i]] = value;\n        } else {\n            if (result[path[i]] !== undefined) {\n                result = result[path[i]];\n            } else {\n                return;\n            }\n        }\n    }\n}\n\nfunction camelize(str) {\n    return str.replace(/\\s(.)/g, function ($1) {\n        return $1.toUpperCase();\n    }).replace(/\\s/g, '').replace(/^(.)/, function ($1) {\n        return $1.toLowerCase();\n    });\n    // return str.replace(/(?:^\\w|[A-Z]|\\b\\w)/g, function(letter, index) {\n    //     return index == 0 ? letter.toLowerCase() : letter.toUpperCase();\n    // }).replace(/\\s+/g, '');\n}\nfunction decamelize(str) {\n    return str.replace(/([A-Z])/g, ' $1').trim();\n}\n\nfunction uuid() {\n    function s4() {\n        return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n    return s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();\n}\n\nfunction mobilecheck() {\n    var check = false;\n    (function (a) {\n        if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|Tablet|iPad|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4))) check = true; // eslint-disable-line no-useless-escape\n    })(navigator.userAgent || navigator.vendor || window.opera);\n    return check;\n}\nfunction controllerCheck() {\n    try {\n        return window.frameElement.ownerDocument.defaultView.frameElement.hasAttribute('controller');\n    } catch (err) {\n        return false;\n    }\n}\n\nfunction extend(a, b) {\n    for (var key in b) {\n        if (b.hasOwnProperty(key)) a[key] = b[key];\n    }return a;\n}\n\nfunction deepExtend(destination, source) {\n    for (var property in source) {\n        // if (source[property] && source[property].constructor && source[property].constructor === Object) {\n        if (source[property] && isObject(source[property])) {\n            destination[property] = destination[property] && isObject(destination[property]) ? destination[property] : {};\n            deepExtend(destination[property], source[property]);\n        } else {\n            destination[property] = source[property];\n        }\n    }\n    return destination;\n}\n\nfunction modeCheck() {\n    //\"controller_preview\" \"controller_program\" \"editor\" \"player_external\" \"player_internal\"\n    var mode = 'normal';\n\n    try {\n        var frame = window.frameElement.ownerDocument.defaultView.frameElement;\n        mode = frame.getAttribute('vff-mode') || mode;\n    } catch (err) {\n        // not in iframe\n    }\n    return mode;\n}\nfunction docRef(anchor) {\n    return 'https://www.videoflow.io/documentation/api/vff?id=' + anchor;\n}\n\n//compares only properties from lhs and ignores properties that start with _\nfunction deepCompare() {\n    var i, l, leftChain, rightChain;\n\n    function compare2Objects(x, y) {\n        var p;\n\n        // remember that NaN === NaN returns false\n        // and isNaN(undefined) returns true\n        if (isNaN(x) && isNaN(y) && typeof x === 'number' && typeof y === 'number') {\n            return true;\n        }\n\n        // Compare primitives and functions.\n        // Check if both arguments link to the same object.\n        // Especially useful on the step where we compare prototypes\n        if (x === y) {\n            return true;\n        }\n\n        // Works in case when functions are created in constructor.\n        // Comparing dates is a common scenario. Another built-ins?\n        // We can even handle functions passed across iframes\n        if (typeof x === 'function' && typeof y === 'function' || x instanceof Date && y instanceof Date || x instanceof RegExp && y instanceof RegExp || x instanceof String && y instanceof String || x instanceof Number && y instanceof Number) {\n            return x.toString() === y.toString();\n        }\n\n        // At last checking prototypes as good as we can\n        if (!(x instanceof Object && y instanceof Object)) {\n            return false;\n        }\n\n        if (x.isPrototypeOf(y) || y.isPrototypeOf(x)) {\n            return false;\n        }\n\n        if (x.constructor !== y.constructor) {\n            return false;\n        }\n\n        if (x.prototype !== y.prototype) {\n            return false;\n        }\n\n        if (x instanceof Array && y instanceof Array && x.length !== y.length) {\n            return false;\n        }\n\n        // Check for infinitive linking loops\n        if (leftChain.indexOf(x) > -1 || rightChain.indexOf(y) > -1) {\n            return false;\n        }\n\n        // Quick checking of one object being a subset of another.\n        // todo: cache the structure of arguments[0] for performance\n        // for (p in y) {\n        //     if(!p.startsWith('_')){\n        //         if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n        //             return false;\n        //         }\n        //         else if (typeof y[p] !== typeof x[p]) {\n        //             return false;\n        //         }\n        //     }\n        //\n        // }\n\n        for (p in x) {\n            if (!p.startsWith('_')) {\n                if (y.hasOwnProperty(p) !== x.hasOwnProperty(p)) {\n                    return false;\n                } else if (_typeof(y[p]) !== _typeof(x[p])) {\n                    return false;\n                }\n\n                switch (_typeof(x[p])) {\n                    case 'object':\n                    case 'function':\n\n                        leftChain.push(x);\n                        rightChain.push(y);\n\n                        if (!compare2Objects(x[p], y[p])) {\n                            return false;\n                        }\n\n                        leftChain.pop();\n                        rightChain.pop();\n                        break;\n\n                    default:\n                        if (x[p] !== y[p]) {\n                            return false;\n                        }\n                        break;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    if (arguments.length < 1) {\n        return true;\n    }\n\n    for (i = 1, l = arguments.length; i < l; i++) {\n\n        leftChain = []; //Todo: this can be cached\n        rightChain = [];\n\n        if (!compare2Objects(arguments[0], arguments[i])) {\n            return false;\n        }\n    }\n\n    return true;\n}\nfunction broadcast(event, data) {\n    document.dispatchEvent(new CustomEvent(event, { detail: data }));\n}\nfunction on(event, listener) {\n\n    document.addEventListener(event, function (e) {\n        listener(e.detail);\n    });\n}\nfunction off(event, listener) {\n    document.removeEventListener(event, listener);\n}\nfunction defer() {\n    var resolve = noop,\n        reject = noop;\n    var promise = new Promise(function (res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise: promise,\n        resolve: resolve,\n        reject: reject\n    };\n}\nfunction getQueryParams(queryString) {\n\n    var search = queryString || location.href.split(\"?\")[1] || location.search.substring(1);\n    try {\n        return JSON.parse('{\"' + search.replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}', function (key, value) {\n            return key === \"\" ? value : decodeURIComponent(value);\n        });\n    } catch (err) {\n        return {};\n    }\n}\n\nfunction query(collection, query) {\n    var found = [];\n    collection.forEach(function (item) {\n        var match = true;\n        for (var key in query) {\n            if (query[key] !== item[key]) {\n                //TODO handle case sensitivity\n                match = false;\n            }\n        }\n        if (match) {\n            found.push(item);\n        }\n    });\n    return found;\n}\nfunction queryOne(collection, q) {\n    var found = query(collection, q);\n    return found.length ? found[0] : undefined;\n}\nfunction filter(collection, fn) {\n    var filtered = [];\n    collection.forEach(function (item) {\n        if (fn(item)) {\n            filtered.push(item);\n        }\n    });\n    return filtered;\n}\nfunction parseRJSON(json) {\n    return JSON.parse(json.replace(/:\\s*\"([^\"]*)\"/g, function (match, p1) {\n        return ': \"' + p1.replace(/:/g, '@colon@') + '\"';\n    })\n\n    // Replace \":\" with \"@colon@\" if it's between single-quotes\n    .replace(/:\\s*'([^']*)'/g, function (match, p1) {\n        return ': \"' + p1.replace(/:/g, '@colon@') + '\"';\n    })\n\n    // Add double-quotes around any tokens before the remaining \":\"\n    .replace(/(['\"])?([a-z0-9A-Z_]+)(['\"])?\\s*:/g, '\"$2\": ')\n\n    // Turn \"@colon@\" back into \":\"\n    .replace(/@colon@/g, ':'));\n}\n\nfunction noop() {}\n\nmodule.exports = {\n    findKey: findKey,\n    trim: trim,\n    getByPath: getByPath,\n    setByPath: setByPath,\n    camelize: camelize,\n    decamelize: decamelize,\n    uuid: uuid,\n    extend: extend,\n    deepExtend: deepExtend,\n    deepCompare: deepCompare,\n    isMobile: mobilecheck(),\n    isController: controllerCheck(),\n    mode: modeCheck(),\n    docRef: docRef,\n    broadcast: broadcast,\n    on: on,\n    off: off,\n    defer: defer,\n    noop: noop,\n    query: query,\n    queryOne: queryOne,\n    filter: filter,\n    getQueryParams: getQueryParams,\n    parseRJSON: parseRJSON\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    \"READY\": \"taco-ready\",\n    \"GO\": \"taco-go\",\n    \"NEXT\": \"taco-next\",\n    \"PREV\": \"taco-previous\",\n    \"ADD\": \"taco-addtemplate\",\n    \"UPDATE\": \"taco-update\",\n    \"PAGES\": \"taco-pages\",\n    \"USER_UPDATE\": \"taco-user-update\",\n    \"QUERY_PARAMS\": \"taco-query-params\",\n    \"OUTGOING_EVENT\": \"taco-event-sent\",\n    \"VFF_EVENT\": \"taco-event-received\",\n    \"ACK\": \"taco-ack\",\n    \"TRACK_EVENT\": \"vff-track-event\",\n    \"RELOAD\": \"vff-reload\",\n    \"VF_DATA\": \"vff-vf-data\",\n    \"VF_SETUP\": \"vff-vf-setup\",\n\n    \"INTERACTION\": \"vff-interaction\",\n    \"TOUCH\": \"taco-touch-element\",\n    \"MOUSE_MOVE\": \"taco-mouse-move\",\n    \"BUBBLE_UP\": \"taco-bubble-up\",\n\n    \"PAGES_UPDATE\": \"vff-pages-update\"\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZXZlbnRzLmpzPzU3MDQiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNiLGFBQWtCLFlBREw7QUFFYixVQUFrQixTQUZMO0FBR2IsWUFBa0IsV0FITDtBQUliLFlBQWtCLGVBSkw7QUFLYixXQUFrQixrQkFMTDtBQU1iLGNBQWtCLGFBTkw7QUFPYixhQUFrQixZQVBMO0FBUWIsbUJBQWtCLGtCQVJMO0FBU2Isb0JBQWtCLG1CQVRMO0FBVWIsc0JBQWtCLGlCQVZMO0FBV2IsaUJBQWtCLHFCQVhMO0FBWWIsV0FBa0IsVUFaTDtBQWFiLG1CQUFrQixpQkFiTDtBQWNiLGNBQWtCLFlBZEw7QUFlYixlQUFrQixhQWZMO0FBZ0JiLGdCQUFrQixjQWhCTDs7QUFtQmIsbUJBQWtCLGlCQW5CTDtBQW9CYixhQUFrQixvQkFwQkw7QUFxQmIsa0JBQWtCLGlCQXJCTDtBQXNCYixpQkFBa0IsZ0JBdEJMOztBQXdCYixvQkFBa0I7QUF4QkwsQ0FBakIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiUkVBRFlcIiAgICAgICAgIDogXCJ0YWNvLXJlYWR5XCIsXG4gICAgXCJHT1wiICAgICAgICAgICAgOiBcInRhY28tZ29cIixcbiAgICBcIk5FWFRcIiAgICAgICAgICA6IFwidGFjby1uZXh0XCIsXG4gICAgXCJQUkVWXCIgICAgICAgICAgOiBcInRhY28tcHJldmlvdXNcIixcbiAgICBcIkFERFwiICAgICAgICAgICA6IFwidGFjby1hZGR0ZW1wbGF0ZVwiLFxuICAgIFwiVVBEQVRFXCIgICAgICAgIDogXCJ0YWNvLXVwZGF0ZVwiLFxuICAgIFwiUEFHRVNcIiAgICAgICAgIDogXCJ0YWNvLXBhZ2VzXCIsXG4gICAgXCJVU0VSX1VQREFURVwiICAgOiBcInRhY28tdXNlci11cGRhdGVcIixcbiAgICBcIlFVRVJZX1BBUkFNU1wiICA6IFwidGFjby1xdWVyeS1wYXJhbXNcIixcbiAgICBcIk9VVEdPSU5HX0VWRU5UXCI6IFwidGFjby1ldmVudC1zZW50XCIsXG4gICAgXCJWRkZfRVZFTlRcIiAgICAgOiBcInRhY28tZXZlbnQtcmVjZWl2ZWRcIixcbiAgICBcIkFDS1wiICAgICAgICAgICA6IFwidGFjby1hY2tcIixcbiAgICBcIlRSQUNLX0VWRU5UXCIgICA6IFwidmZmLXRyYWNrLWV2ZW50XCIsXG4gICAgXCJSRUxPQURcIiAgICAgICAgOiBcInZmZi1yZWxvYWRcIixcbiAgICBcIlZGX0RBVEFcIiAgICAgICA6IFwidmZmLXZmLWRhdGFcIixcbiAgICBcIlZGX1NFVFVQXCIgICAgICA6IFwidmZmLXZmLXNldHVwXCIsXG5cblxuICAgIFwiSU5URVJBQ1RJT05cIiAgIDogXCJ2ZmYtaW50ZXJhY3Rpb25cIixcbiAgICBcIlRPVUNIXCIgICAgICAgICA6IFwidGFjby10b3VjaC1lbGVtZW50XCIsXG4gICAgXCJNT1VTRV9NT1ZFXCIgICAgOiBcInRhY28tbW91c2UtbW92ZVwiLFxuICAgIFwiQlVCQkxFX1VQXCIgICAgIDogXCJ0YWNvLWJ1YmJsZS11cFwiLFxuXG4gICAgXCJQQUdFU19VUERBVEVcIiAgOiBcInZmZi1wYWdlcy11cGRhdGVcIlxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9ldmVudHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.vffData = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _events = __webpack_require__(1);\n\nvar _helpers = __webpack_require__(0);\n\nvar _messenger = __webpack_require__(3);\n\nvar _docRefs = __webpack_require__(12);\n\nvar _consts = __webpack_require__(4);\n\nvar _vffControl = __webpack_require__(13);\n\nvar _vffControl2 = _interopRequireDefault(_vffControl);\n\nvar _vffEvent = __webpack_require__(7);\n\nvar _vffEvent2 = _interopRequireDefault(_vffEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ADD_CONTROL_TIMEOUT = 3000;\n\nvar DEFAULT_ON_OPTIONS = {\n    throttle: true,\n    changeOnly: true\n};\n\nvar VffData = function () {\n    function VffData() {\n        _classCallCheck(this, VffData);\n\n        this._controls = [];\n        this._pages = [];\n        this._pagesDefer = (0, _helpers.defer)();\n        this._registerControlTimeouts = {};\n        this._listeners = {};\n        this._timeouts = new WeakMap();\n    }\n\n    _createClass(VffData, [{\n        key: 'registerControl',\n        value: function registerControl(name, value, options) {\n            var _this = this;\n\n            if (arguments.length < 2) {\n                //TODO change ref\n                throw new Error('Missing Arguments, please refer to: ' + (0, _helpers.docRef)(_docRefs.REGISTER_TEMPLATE));\n            }\n\n            var control = new _vffControl2.default(name, value, options);\n            var existingControl = (0, _helpers.queryOne)(this._controls, { _group: control.getGroup(), _name: control.getName });\n            if (existingControl) {\n                existingControl._setValue(value);\n            } else {\n                this._controls.push(control);\n            }\n\n            clearTimeout(this._registerControlTimeouts[control.getGroup()]);\n            this._registerControlTimeouts[control.getGroup()] = setTimeout(function () {\n                var controls = (0, _helpers.filter)(_this._controls, function (c) {\n                    return c.getGroup() === control.getGroup();\n                });\n\n                var data = {};\n                controls.forEach(function (control) {\n                    Object.assign(data, control.getValueObject());\n                });\n\n                (0, _messenger.send)(_events.ADD, {\n                    channel: control.getGroup(),\n                    options: options,\n                    data: data\n                });\n            }, ADD_CONTROL_TIMEOUT);\n\n            return control;\n        }\n    }, {\n        key: 'registerControls',\n        value: function registerControls(object, options) {\n            for (var name in object) {\n                if (object.hasOwnProperty(name)) {\n                    var value = object[name];\n                    var opts = Object.assign({}, options);\n\n                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value.ui) {\n                        opts.ui = value.ui;\n                        value = value.value !== undefined ? value.value : value.ui.value;\n                    }\n\n                    this.registerControl(name, value, opts);\n                }\n            }\n        }\n    }, {\n        key: 'updateControl',\n        value: function updateControl(name, value, options) {\n            var control = this.getControl(name);\n            if (control) {\n                //TODO make better\n                if (options && options.timecode) {\n                    control.timecode = options.timecode;\n                }\n                return control._setValue(value);\n            }\n            return false;\n        }\n    }, {\n        key: 'getControl',\n        value: function getControl(name) {\n            var parts = name.split(_consts.NAMESPACE_DELIMITER);\n            if (parts.length > 1) {\n                return (0, _helpers.queryOne)(this._controls, { _name: parts[parts.length - 1], _group: parts.slice(0, -1).join(_consts.NAMESPACE_DELIMITER) });\n            } else {\n                return (0, _helpers.queryOne)(this._controls, { _name: name });\n            }\n        }\n    }, {\n        key: 'getControls',\n        value: function getControls(namespace) {\n            if (!namespace) {\n                return this._controls;\n            }\n            var parts = namespace.split(_consts.NAMESPACE_DELIMITER);\n            if (parts.length > 1) {\n                return (0, _helpers.query)(this._controls, { _name: parts[parts.length - 1], _group: parts.slice(0, -1).join(_consts.NAMESPACE_DELIMITER) });\n            } else {\n                var controls = (0, _helpers.query)(this._controls, { _group: parts[0] });\n                if (!controls.length) {\n                    controls = (0, _helpers.query)(this._controls, { _name: parts[0] });\n                }\n                return controls;\n            }\n        }\n    }, {\n        key: 'getControlsData',\n        value: function getControlsData(namespace) {\n            var data = {};\n            var controls = this.getControls(namespace);\n            controls.forEach(function (control) {\n                var name = control.getNamespace().substr(namespace.length);\n                if (name.startsWith(_consts.NAMESPACE_DELIMITER)) name = name.substr(1);\n                if (name) {\n                    data[name] = control.getValue();\n                } else {\n                    data = control.getValue();\n                }\n            });\n            return data;\n        }\n    }, {\n        key: 'on',\n        value: function on(namespace, cb, options) {\n            var _this2 = this;\n\n            options = Object.assign({}, DEFAULT_ON_OPTIONS, options || {});\n            //TODO handle no namespace\n            (0, _helpers.on)(_events.VFF_EVENT + namespace, function (event) {\n                if (!options.changeOnly || event.dataChanged) {\n                    _this2._runCallback(cb, options, new _vffEvent2.default({\n                        timecode: event.timecode,\n                        changed: event.dataChanged,\n                        data: _this2.getControlsData(namespace)\n                    }));\n                }\n            });\n        }\n    }, {\n        key: 'before',\n        value: function before() {\n            //TODO\n        }\n    }, {\n        key: 'emit',\n        value: function emit() {\n            //TODO\n        }\n    }, {\n        key: 'addPages',\n        value: function addPages(pages) {\n            if (pages && pages.length) {\n                while (this._pages.length) {\n                    this._pages.pop();\n                }\n                this._pages = this._pages.concat(pages);\n                this._pagesDefer.resolve(pages);\n                (0, _helpers.broadcast)(_events.PAGES_UPDATE, this._pages);\n                // this.updateCB();\n            }\n        }\n    }, {\n        key: 'getPages',\n        value: function getPages() {\n            return this._pagesDefer.promise;\n        }\n    }, {\n        key: 'onPages',\n        value: function onPages(cb) {\n            if (this._pages.length) {\n                cb(this._pages);\n            }\n            (0, _helpers.on)(_events.PAGES_UPDATE, function (event) {\n                cb(event.detail);\n            });\n        }\n    }, {\n        key: 'addQueryParams',\n        value: function addQueryParams(params) {\n            this._queryParams = params;\n            // this.updateCB();\n        }\n    }, {\n        key: 'getQueryParams',\n        value: function getQueryParams() {\n            return this._queryParams;\n        }\n    }, {\n        key: '_runCallback',\n        value: function _runCallback(callback, options) {\n            for (var _len = arguments.length, data = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                data[_key - 2] = arguments[_key];\n            }\n\n            if (options.consolidate || options.throttle) {\n                clearTimeout(this._timeouts.get(callback));\n                this._timeouts.set(callback, setTimeout(function () {\n                    callback.apply(undefined, data);\n                }, typeof options.throttle === 'number' ? options.throttle : 50));\n            } else {\n                callback.apply(undefined, data);\n            }\n        }\n    }, {\n        key: '_runMiddleware',\n        value: function _runMiddleware(functions, data) {\n            var self = this;\n            return functions.reduce(function (prev, curr) {\n                return prev.then(function (data) {\n                    var d = (0, _helpers.defer)();\n                    self._runCallback(curr.fn, curr.options, data, d.resolve);\n                    return d.promise;\n                });\n            }, Promise.resolve(data));\n        }\n    }]);\n\n    return VffData;\n}();\n\nvar vffData = exports.vffData = new VffData();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nvar _helpers = __webpack_require__(0);\n\nvar window = window || global.window;\nvar REQUEST_TIMEOUT = 20000;\n\nfunction sendMessage(type, payload) {\n    var message = {\n        type: type,\n        payload: payload\n    };\n    postMessage(message);\n}\n\nfunction request(type, payload, cb) {\n    var rid = (0, _helpers.uuid)();\n    payload._rid = rid;\n    var message = {\n        type: type,\n        payload: payload\n    };\n    var timeout;\n    var handler = function handler(message) {\n        message = JSON.parse(message.data);\n        if (message.payload && message.payload._rid === rid) {\n            removeHandler();\n            cb(message);\n        }\n    };\n    var removeHandler = function removeHandler() {\n        clearTimeout(timeout);\n        window.removeEventListener('message', handler, false);\n    };\n\n    window.addEventListener('message', handler, false);\n    timeout = setTimeout(function () {\n        //Request Timeout\n        removeHandler();\n    }, REQUEST_TIMEOUT);\n\n    postMessage(message);\n}\n\nfunction postMessage(message) {\n    var w = window || global.window;\n    if (w && w.parent) {\n        w.parent.postMessage(JSON.stringify(message), '*');\n    }\n}\n\nmodule.exports = {\n    send: sendMessage,\n    request: request\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbWVzc2VuZ2VyLmpzPzc5NzkiXSwibmFtZXMiOlsid2luZG93IiwiZ2xvYmFsIiwiUkVRVUVTVF9USU1FT1VUIiwic2VuZE1lc3NhZ2UiLCJ0eXBlIiwicGF5bG9hZCIsIm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInJlcXVlc3QiLCJjYiIsInJpZCIsIl9yaWQiLCJ0aW1lb3V0IiwiaGFuZGxlciIsIkpTT04iLCJwYXJzZSIsImRhdGEiLCJyZW1vdmVIYW5kbGVyIiwiY2xlYXJUaW1lb3V0IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZXRUaW1lb3V0IiwidyIsInBhcmVudCIsInN0cmluZ2lmeSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzZW5kIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBLElBQUlBLFNBQVNBLFVBQVVDLE9BQU9ELE1BQTlCO0FBQ0EsSUFBTUUsa0JBQWtCLEtBQXhCOztBQUVBLFNBQVNDLFdBQVQsQ0FBcUJDLElBQXJCLEVBQTJCQyxPQUEzQixFQUFtQztBQUMvQixRQUFJQyxVQUFVO0FBQ1ZGLGNBQU9BLElBREc7QUFFVkMsaUJBQVNBO0FBRkMsS0FBZDtBQUlBRSxnQkFBWUQsT0FBWjtBQUNIOztBQUVELFNBQVNFLE9BQVQsQ0FBaUJKLElBQWpCLEVBQXVCQyxPQUF2QixFQUFnQ0ksRUFBaEMsRUFBbUM7QUFDL0IsUUFBSUMsTUFBTSxvQkFBVjtBQUNBTCxZQUFRTSxJQUFSLEdBQWVELEdBQWY7QUFDQSxRQUFJSixVQUFVO0FBQ1ZGLGNBQVVBLElBREE7QUFFVkMsaUJBQVVBO0FBRkEsS0FBZDtBQUlBLFFBQUlPLE9BQUo7QUFDQSxRQUFJQyxVQUFVLFNBQVZBLE9BQVUsQ0FBU1AsT0FBVCxFQUFpQjtBQUMzQkEsa0JBQVVRLEtBQUtDLEtBQUwsQ0FBV1QsUUFBUVUsSUFBbkIsQ0FBVjtBQUNBLFlBQUdWLFFBQVFELE9BQVIsSUFBbUJDLFFBQVFELE9BQVIsQ0FBZ0JNLElBQWhCLEtBQXlCRCxHQUEvQyxFQUFtRDtBQUMvQ087QUFDQVIsZUFBR0gsT0FBSDtBQUNIO0FBQ0osS0FORDtBQU9BLFFBQUlXLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBVTtBQUMxQkMscUJBQWFOLE9BQWI7QUFDQVosZUFBT21CLG1CQUFQLENBQTJCLFNBQTNCLEVBQXNDTixPQUF0QyxFQUErQyxLQUEvQztBQUNILEtBSEQ7O0FBS0FiLFdBQU9vQixnQkFBUCxDQUF3QixTQUF4QixFQUFtQ1AsT0FBbkMsRUFBNEMsS0FBNUM7QUFDQUQsY0FBVVMsV0FBVyxZQUFVO0FBQzNCO0FBQ0FKO0FBQ0gsS0FIUyxFQUdQZixlQUhPLENBQVY7O0FBS0FLLGdCQUFZRCxPQUFaO0FBQ0g7O0FBR0QsU0FBU0MsV0FBVCxDQUFxQkQsT0FBckIsRUFBNkI7QUFDekIsUUFBSWdCLElBQUt0QixVQUFVQyxPQUFPRCxNQUExQjtBQUNBLFFBQUdzQixLQUFLQSxFQUFFQyxNQUFWLEVBQWlCO0FBQ2JELFVBQUVDLE1BQUYsQ0FBU2hCLFdBQVQsQ0FBcUJPLEtBQUtVLFNBQUwsQ0FBZWxCLE9BQWYsQ0FBckIsRUFBOEMsR0FBOUM7QUFDSDtBQUNKOztBQUVEbUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyxVQUFPeEIsV0FETTtBQUViSyxhQUFVQTtBQUZHLENBQWpCLEMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXVpZH0gZnJvbSAnLi9oZWxwZXJzJztcbmxldCB3aW5kb3cgPSB3aW5kb3cgfHwgZ2xvYmFsLndpbmRvdztcbmNvbnN0IFJFUVVFU1RfVElNRU9VVCA9IDIwMDAwO1xuXG5mdW5jdGlvbiBzZW5kTWVzc2FnZSh0eXBlLCBwYXlsb2FkKXtcbiAgICB2YXIgbWVzc2FnZSA9IHtcbiAgICAgICAgdHlwZSA6IHR5cGUsXG4gICAgICAgIHBheWxvYWQ6IHBheWxvYWQsXG4gICAgfTtcbiAgICBwb3N0TWVzc2FnZShtZXNzYWdlKTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdCh0eXBlLCBwYXlsb2FkLCBjYil7XG4gICAgdmFyIHJpZCA9IHV1aWQoKTtcbiAgICBwYXlsb2FkLl9yaWQgPSByaWQ7XG4gICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgIHR5cGUgICAgOiB0eXBlLFxuICAgICAgICBwYXlsb2FkIDogcGF5bG9hZFxuICAgIH07XG4gICAgdmFyIHRpbWVvdXQ7XG4gICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbihtZXNzYWdlKXtcbiAgICAgICAgbWVzc2FnZSA9IEpTT04ucGFyc2UobWVzc2FnZS5kYXRhKTtcbiAgICAgICAgaWYobWVzc2FnZS5wYXlsb2FkICYmIG1lc3NhZ2UucGF5bG9hZC5fcmlkID09PSByaWQpe1xuICAgICAgICAgICAgcmVtb3ZlSGFuZGxlcigpO1xuICAgICAgICAgICAgY2IobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHZhciByZW1vdmVIYW5kbGVyID0gZnVuY3Rpb24oKXtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICB9O1xuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgLy9SZXF1ZXN0IFRpbWVvdXRcbiAgICAgICAgcmVtb3ZlSGFuZGxlcigpO1xuICAgIH0sIFJFUVVFU1RfVElNRU9VVCk7XG5cbiAgICBwb3N0TWVzc2FnZShtZXNzYWdlKTtcbn1cblxuXG5mdW5jdGlvbiBwb3N0TWVzc2FnZShtZXNzYWdlKXtcbiAgICBsZXQgdyA9ICh3aW5kb3cgfHwgZ2xvYmFsLndpbmRvdyk7XG4gICAgaWYodyAmJiB3LnBhcmVudCl7XG4gICAgICAgIHcucGFyZW50LnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpLCAnKicpO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc2VuZCA6IHNlbmRNZXNzYWdlLFxuICAgIHJlcXVlc3QgOiByZXF1ZXN0XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy9tZXNzZW5nZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    EXPOSE_DELIMITER: \" \",\n    NAMESPACE_DELIMITER: \".\",\n    UI: {\n        MULTISELECT: 'multiselect',\n        DROPDOWN: 'dropdown',\n        RADIO: 'radio',\n        RANGE: 'range'\n    },\n    ATTRIBUTE: {\n        CONTROL: \"vff-control\",\n        BIND: \"vff-bind\",\n        OPTIONS: \"vff-options\"\n    },\n    MODE: {\n        NORMAL: \"normal\",\n        PREVIEW: \"controller-preview\",\n        PROGRAM: \"controller-program\"\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9jb25zdHMuanM/OWZhMiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiRVhQT1NFX0RFTElNSVRFUiIsIk5BTUVTUEFDRV9ERUxJTUlURVIiLCJVSSIsIk1VTFRJU0VMRUNUIiwiRFJPUERPV04iLCJSQURJTyIsIlJBTkdFIiwiQVRUUklCVVRFIiwiQ09OVFJPTCIsIkJJTkQiLCJPUFRJT05TIiwiTU9ERSIsIk5PUk1BTCIsIlBSRVZJRVciLCJQUk9HUkFNIl0sIm1hcHBpbmdzIjoiOztBQUFBQSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JDLHNCQUFzQixHQURUO0FBRWJDLHlCQUFzQixHQUZUO0FBR2JDLFFBQXNCO0FBQ2xCQyxxQkFBa0IsYUFEQTtBQUVsQkMsa0JBQWtCLFVBRkE7QUFHbEJDLGVBQWtCLE9BSEE7QUFJbEJDLGVBQWtCO0FBSkEsS0FIVDtBQVNiQyxlQUFzQjtBQUNsQkMsaUJBQWtCLGFBREE7QUFFbEJDLGNBQWtCLFVBRkE7QUFHbEJDLGlCQUFrQjtBQUhBLEtBVFQ7QUFjYkMsVUFBc0I7QUFDbEJDLGdCQUFrQixRQURBO0FBRWxCQyxpQkFBa0Isb0JBRkE7QUFHbEJDLGlCQUFrQjtBQUhBO0FBZFQsQ0FBakIiLCJmaWxlIjoiNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEVYUE9TRV9ERUxJTUlURVIgICAgOiBcIiBcIixcbiAgICBOQU1FU1BBQ0VfREVMSU1JVEVSIDogXCIuXCIsXG4gICAgVUkgICAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgTVVMVElTRUxFQ1QgICAgIDogJ211bHRpc2VsZWN0JyxcbiAgICAgICAgRFJPUERPV04gICAgICAgIDogJ2Ryb3Bkb3duJyxcbiAgICAgICAgUkFESU8gICAgICAgICAgIDogJ3JhZGlvJyxcbiAgICAgICAgUkFOR0UgICAgICAgICAgIDogJ3JhbmdlJ1xuICAgIH0sXG4gICAgQVRUUklCVVRFICAgICAgICAgICA6IHtcbiAgICAgICAgQ09OVFJPTCAgICAgICAgIDogXCJ2ZmYtY29udHJvbFwiLFxuICAgICAgICBCSU5EICAgICAgICAgICAgOiBcInZmZi1iaW5kXCIsXG4gICAgICAgIE9QVElPTlMgICAgICAgICA6IFwidmZmLW9wdGlvbnNcIlxuICAgIH0sXG4gICAgTU9ERSAgICAgICAgICAgICAgICA6IHtcbiAgICAgICAgTk9STUFMICAgICAgICAgIDogXCJub3JtYWxcIixcbiAgICAgICAgUFJFVklFVyAgICAgICAgIDogXCJjb250cm9sbGVyLXByZXZpZXdcIixcbiAgICAgICAgUFJPR1JBTSAgICAgICAgIDogXCJjb250cm9sbGVyLXByb2dyYW1cIlxuICAgIH1cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvcmUvY29uc3RzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Interval = __webpack_require__(41);\n\nvar BasicClock = function (_HTMLElement) {\n    _inherits(BasicClock, _HTMLElement);\n\n    function BasicClock() {\n        _classCallCheck(this, BasicClock);\n\n        var _this = _possibleConstructorReturn(this, (BasicClock.__proto__ || Object.getPrototypeOf(BasicClock)).call(this));\n\n        var self = _this;\n        _this._time = _this.init();\n        _this.running = false;\n        _this._visibility = true;\n        _this.interval = new Interval(function (interval) {\n            self.onInterval(interval);\n            self._update();\n        });\n        return _this;\n    }\n\n    _createClass(BasicClock, [{\n        key: 'connectedCallback',\n        value: function connectedCallback() {\n            this.style.display = 'block';\n            this.innerHTML = this._time;\n            if (this.autorun) {\n                this.start();\n            }\n            this._update();\n        }\n    }, {\n        key: '_update',\n        value: function _update() {\n            this.innerHTML = this.format(this._time);\n        }\n    }, {\n        key: 'start',\n        value: function start() {\n            this.interval.start();\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this.interval.stop();\n        }\n    }, {\n        key: 'set',\n        value: function set(time) {\n            this._time = time;\n        }\n    }, {\n        key: 'get',\n        value: function get() {\n            return this._time;\n        }\n    }, {\n        key: 'format',\n        value: function format() {\n            return this._time;\n        }\n    }, {\n        key: 'init',\n        value: function init() {\n            return 0;\n        }\n    }, {\n        key: 'onInterval',\n        value: function onInterval(i) {\n            this._time += i;\n        }\n    }, {\n        key: 'expose',\n        value: function expose() {\n            return {\n                visibility: 'show',\n                run: 'run'\n            };\n        }\n    }, {\n        key: 'options',\n        value: function options() {\n            return {\n                updateOn: 'control'\n            };\n        }\n    }, {\n        key: 'autorun',\n        get: function get() {\n            return this.getAttribute(\"autorun\") === 'true' || this.getAttribute(\"autorun\") === '';\n        }\n    }, {\n        key: 'run',\n        get: function get() {\n            return this.running;\n        },\n        set: function set(value) {\n            this.running = value;\n            this.running ? this.start() : this.stop();\n            this.dispatchEvent(new Event(value ? \"start\" : \"stop\"));\n        }\n    }, {\n        key: 'show',\n        get: function get() {\n            return this._visibility;\n        },\n        set: function set(value) {\n            this._visibility = value;\n            this.style.display = value ? 'block' : 'none';\n        }\n    }]);\n\n    return BasicClock;\n}(HTMLElement);\n\nexports.default = BasicClock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jbG9ja3MvYmFzaWMtY2xvY2suanM/NjYwYyJdLCJuYW1lcyI6WyJJbnRlcnZhbCIsInJlcXVpcmUiLCJCYXNpY0Nsb2NrIiwic2VsZiIsIl90aW1lIiwiaW5pdCIsInJ1bm5pbmciLCJfdmlzaWJpbGl0eSIsImludGVydmFsIiwib25JbnRlcnZhbCIsIl91cGRhdGUiLCJzdHlsZSIsImRpc3BsYXkiLCJpbm5lckhUTUwiLCJhdXRvcnVuIiwic3RhcnQiLCJmb3JtYXQiLCJzdG9wIiwidGltZSIsImkiLCJ2aXNpYmlsaXR5IiwicnVuIiwidXBkYXRlT24iLCJnZXRBdHRyaWJ1dGUiLCJ2YWx1ZSIsImRpc3BhdGNoRXZlbnQiLCJFdmVudCIsIkhUTUxFbGVtZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLElBQU1BLFdBQVdDLG1CQUFPQSxDQUFDLEVBQVIsQ0FBakI7O0lBRXFCQyxVOzs7QUFDakIsMEJBQWM7QUFBQTs7QUFBQTs7QUFHVixZQUFJQyxZQUFKO0FBQ0EsY0FBS0MsS0FBTCxHQUFhLE1BQUtDLElBQUwsRUFBYjtBQUNBLGNBQUtDLE9BQUwsR0FBZSxLQUFmO0FBQ0EsY0FBS0MsV0FBTCxHQUFtQixJQUFuQjtBQUNBLGNBQUtDLFFBQUwsR0FBZ0IsSUFBSVIsUUFBSixDQUFhLFVBQVNRLFFBQVQsRUFBa0I7QUFDM0NMLGlCQUFLTSxVQUFMLENBQWdCRCxRQUFoQjtBQUNBTCxpQkFBS08sT0FBTDtBQUNILFNBSGUsQ0FBaEI7QUFQVTtBQVdiOzs7OzRDQUVtQjtBQUNoQixpQkFBS0MsS0FBTCxDQUFXQyxPQUFYLEdBQXFCLE9BQXJCO0FBQ0EsaUJBQUtDLFNBQUwsR0FBaUIsS0FBS1QsS0FBdEI7QUFDQSxnQkFBRyxLQUFLVSxPQUFSLEVBQWdCO0FBQUMscUJBQUtDLEtBQUw7QUFBYztBQUMvQixpQkFBS0wsT0FBTDtBQUNIOzs7a0NBRVE7QUFDTCxpQkFBS0csU0FBTCxHQUFpQixLQUFLRyxNQUFMLENBQVksS0FBS1osS0FBakIsQ0FBakI7QUFDSDs7O2dDQUNNO0FBQ0gsaUJBQUtJLFFBQUwsQ0FBY08sS0FBZDtBQUNIOzs7K0JBQ0s7QUFDRixpQkFBS1AsUUFBTCxDQUFjUyxJQUFkO0FBQ0g7Ozs0QkFDR0MsSSxFQUFLO0FBQ0wsaUJBQUtkLEtBQUwsR0FBYWMsSUFBYjtBQUNIOzs7OEJBQ0k7QUFDRCxtQkFBTyxLQUFLZCxLQUFaO0FBQ0g7OztpQ0FDTztBQUNKLG1CQUFPLEtBQUtBLEtBQVo7QUFDSDs7OytCQUNLO0FBQ0YsbUJBQU8sQ0FBUDtBQUNIOzs7bUNBQ1VlLEMsRUFBRTtBQUNULGlCQUFLZixLQUFMLElBQWNlLENBQWQ7QUFDSDs7O2lDQXFCTztBQUNKLG1CQUFPO0FBQ0hDLDRCQUFhLE1BRFY7QUFFSEMscUJBQU07QUFGSCxhQUFQO0FBSUg7OztrQ0FDUTtBQUNMLG1CQUFPO0FBQ0hDLDBCQUFXO0FBRFIsYUFBUDtBQUdIOzs7NEJBOUJZO0FBQ1QsbUJBQU8sS0FBS0MsWUFBTCxDQUFrQixTQUFsQixNQUFpQyxNQUFqQyxJQUEyQyxLQUFLQSxZQUFMLENBQWtCLFNBQWxCLE1BQWlDLEVBQW5GO0FBQ0g7Ozs0QkFFUTtBQUNMLG1CQUFPLEtBQUtqQixPQUFaO0FBQ0gsUzswQkFDT2tCLEssRUFBTTtBQUNWLGlCQUFLbEIsT0FBTCxHQUFla0IsS0FBZjtBQUNBLGlCQUFLbEIsT0FBTCxHQUFjLEtBQUtTLEtBQUwsRUFBZCxHQUE2QixLQUFLRSxJQUFMLEVBQTdCO0FBQ0EsaUJBQUtRLGFBQUwsQ0FBbUIsSUFBSUMsS0FBSixDQUFVRixRQUFPLE9BQVAsR0FBaUIsTUFBM0IsQ0FBbkI7QUFDSDs7OzRCQUNTO0FBQ04sbUJBQU8sS0FBS2pCLFdBQVo7QUFDSCxTOzBCQUNRaUIsSyxFQUFNO0FBQ1gsaUJBQUtqQixXQUFMLEdBQW1CaUIsS0FBbkI7QUFDQSxpQkFBS2IsS0FBTCxDQUFXQyxPQUFYLEdBQXFCWSxRQUFPLE9BQVAsR0FBaUIsTUFBdEM7QUFDSDs7OztFQS9EbUNHLFc7O2tCQUFuQnpCLFUiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEludGVydmFsID0gcmVxdWlyZSgnLi9pbnRlcnZhbC13b3JrZXInKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFzaWNDbG9jayBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3RpbWUgPSB0aGlzLmluaXQoKTtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Zpc2liaWxpdHkgPSB0cnVlO1xuICAgICAgICB0aGlzLmludGVydmFsID0gbmV3IEludGVydmFsKGZ1bmN0aW9uKGludGVydmFsKXtcbiAgICAgICAgICAgIHNlbGYub25JbnRlcnZhbChpbnRlcnZhbCk7XG4gICAgICAgICAgICBzZWxmLl91cGRhdGUoKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gdGhpcy5fdGltZTtcbiAgICAgICAgaWYodGhpcy5hdXRvcnVuKXt0aGlzLnN0YXJ0KCk7fVxuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlKCl7XG4gICAgICAgIHRoaXMuaW5uZXJIVE1MID0gdGhpcy5mb3JtYXQodGhpcy5fdGltZSk7XG4gICAgfVxuICAgIHN0YXJ0KCl7XG4gICAgICAgIHRoaXMuaW50ZXJ2YWwuc3RhcnQoKTtcbiAgICB9XG4gICAgc3RvcCgpe1xuICAgICAgICB0aGlzLmludGVydmFsLnN0b3AoKTtcbiAgICB9XG4gICAgc2V0KHRpbWUpe1xuICAgICAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgICB9XG4gICAgZ2V0KCl7XG4gICAgICAgIHJldHVybiB0aGlzLl90aW1lO1xuICAgIH1cbiAgICBmb3JtYXQoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWU7XG4gICAgfVxuICAgIGluaXQoKXtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIG9uSW50ZXJ2YWwoaSl7XG4gICAgICAgIHRoaXMuX3RpbWUgKz0gaTtcbiAgICB9XG4gICAgZ2V0IGF1dG9ydW4oKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwiYXV0b3J1blwiKSA9PT0gJ3RydWUnIHx8IHRoaXMuZ2V0QXR0cmlidXRlKFwiYXV0b3J1blwiKSA9PT0gJyc7XG4gICAgfVxuXG4gICAgZ2V0IHJ1bigpe1xuICAgICAgICByZXR1cm4gdGhpcy5ydW5uaW5nO1xuICAgIH1cbiAgICBzZXQgcnVuKHZhbHVlKXtcbiAgICAgICAgdGhpcy5ydW5uaW5nID0gdmFsdWU7XG4gICAgICAgIHRoaXMucnVubmluZz8gdGhpcy5zdGFydCgpIDogdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChuZXcgRXZlbnQodmFsdWU/IFwic3RhcnRcIiA6IFwic3RvcFwiKSk7XG4gICAgfVxuICAgIGdldCBzaG93KCl7XG4gICAgICAgIHJldHVybiB0aGlzLl92aXNpYmlsaXR5O1xuICAgIH1cbiAgICBzZXQgc2hvdyh2YWx1ZSl7XG4gICAgICAgIHRoaXMuX3Zpc2liaWxpdHkgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gdmFsdWU/ICdibG9jaycgOiAnbm9uZSc7XG4gICAgfVxuXG4gICAgZXhwb3NlKCl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2aXNpYmlsaXR5IDogJ3Nob3cnLFxuICAgICAgICAgICAgcnVuIDogJ3J1bidcbiAgICAgICAgfTtcbiAgICB9XG4gICAgb3B0aW9ucygpe1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdXBkYXRlT24gOiAnY29udHJvbCdcbiAgICAgICAgfTtcbiAgICB9XG5cblxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvY2xvY2tzL2Jhc2ljLWNsb2NrLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VFFEvent = function VFFEvent(data) {\n    _classCallCheck(this, VFFEvent);\n\n    //namespace, data, timecode, changed\n    Object.assign(this, data);\n};\n\nexports.default = VFFEvent;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS92ZmZFdmVudC5qcz9lMGEyIl0sIm5hbWVzIjpbIlZGRkV2ZW50IiwiZGF0YSIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7SUFDcUJBLFEsR0FDakIsa0JBQVlDLElBQVosRUFBaUI7QUFBQTs7QUFDYjtBQUNBQyxXQUFPQyxNQUFQLENBQWMsSUFBZCxFQUFvQkYsSUFBcEI7QUFDSCxDOztrQkFKZ0JELFEiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVkZGRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEpe1xuICAgICAgICAvL25hbWVzcGFjZSwgZGF0YSwgdGltZWNvZGUsIGNoYW5nZWRcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBkYXRhKTtcbiAgICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29yZS92ZmZFdmVudC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _helpers = __webpack_require__(0);\n\nvar _vffData = __webpack_require__(2);\n\nvar _interactionEvents = __webpack_require__(9);\n\nvar _events = __webpack_require__(1);\n\nvar _consts = __webpack_require__(4);\n\nfunction update(data) {\n    var timecode = void 0,\n        changed = false;\n    for (var templateName in data) {\n        for (var key in data[templateName]) {\n            if (key !== '__timecode__') {\n                if (!timecode) timecode = data[templateName].__timecode__;\n                changed = _vffData.vffData.updateControl('' + templateName + _consts.NAMESPACE_DELIMITER + key, data[templateName][key], { timecode: timecode }) || changed;\n            }\n            (0, _helpers.broadcast)('' + _events.VFF_EVENT + templateName + _consts.NAMESPACE_DELIMITER + key, { dataChanged: changed, timecode: timecode });\n        }\n        (0, _helpers.broadcast)(_events.VFF_EVENT + templateName, { dataChanged: changed, timecode: timecode });\n    }\n    (0, _helpers.broadcast)(_events.VFF_EVENT, { dataChanged: changed, timecode: timecode });\n}\n\nfunction updateInteraction(data) {\n    for (var event in data) {\n        if ((0, _interactionEvents.isInteractionEvent)(event)) {\n            (0, _interactionEvents.dispatchEvent)(event, data[event]);\n        }\n    }\n}\n\nmodule.exports = {\n    update: update,\n    updateInteraction: updateInteraction\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9oYW5kbGVycy91cGRhdGVIYW5kbGVyLmpzP2Q0MDAiXSwibmFtZXMiOlsidXBkYXRlIiwiZGF0YSIsInRpbWVjb2RlIiwiY2hhbmdlZCIsInRlbXBsYXRlTmFtZSIsImtleSIsIl9fdGltZWNvZGVfXyIsInZmZkRhdGEiLCJ1cGRhdGVDb250cm9sIiwiTkFNRVNQQUNFX0RFTElNSVRFUiIsIlZGRl9FVkVOVCIsImRhdGFDaGFuZ2VkIiwidXBkYXRlSW50ZXJhY3Rpb24iLCJldmVudCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBR0EsU0FBU0EsTUFBVCxDQUFnQkMsSUFBaEIsRUFBcUI7QUFDakIsUUFBSUMsaUJBQUo7QUFBQSxRQUFjQyxVQUFVLEtBQXhCO0FBQ0EsU0FBSSxJQUFJQyxZQUFSLElBQXdCSCxJQUF4QixFQUE2QjtBQUN6QixhQUFJLElBQUlJLEdBQVIsSUFBZUosS0FBS0csWUFBTCxDQUFmLEVBQW1DO0FBQy9CLGdCQUFHQyxRQUFRLGNBQVgsRUFBMEI7QUFDdEIsb0JBQUcsQ0FBQ0gsUUFBSixFQUFjQSxXQUFXRCxLQUFLRyxZQUFMLEVBQW1CRSxZQUE5QjtBQUNkSCwwQkFBVUksaUJBQVFDLGFBQVIsTUFBeUJKLFlBQXpCLEdBQXdDSywyQkFBeEMsR0FBOERKLEdBQTlELEVBQXFFSixLQUFLRyxZQUFMLEVBQW1CQyxHQUFuQixDQUFyRSxFQUE4RixFQUFDSCxrQkFBRCxFQUE5RixLQUE2R0MsT0FBdkg7QUFDSDtBQUNELHlDQUFhTyxpQkFBYixHQUF5Qk4sWUFBekIsR0FBd0NLLDJCQUF4QyxHQUE4REosR0FBOUQsRUFBcUUsRUFBRU0sYUFBYVIsT0FBZixFQUF3QkQsa0JBQXhCLEVBQXJFO0FBQ0g7QUFDRCxnQ0FBVVEsb0JBQVlOLFlBQXRCLEVBQW9DLEVBQUNPLGFBQWFSLE9BQWQsRUFBdUJELGtCQUF2QixFQUFwQztBQUNIO0FBQ0QsNEJBQVVRLGlCQUFWLEVBQXFCLEVBQUNDLGFBQWFSLE9BQWQsRUFBdUJELGtCQUF2QixFQUFyQjtBQUNIOztBQUVELFNBQVNVLGlCQUFULENBQTJCWCxJQUEzQixFQUFnQztBQUM1QixTQUFJLElBQUlZLEtBQVIsSUFBaUJaLElBQWpCLEVBQXNCO0FBQ2xCLFlBQUcsMkNBQW1CWSxLQUFuQixDQUFILEVBQTZCO0FBQ3pCLGtEQUFjQSxLQUFkLEVBQXFCWixLQUFLWSxLQUFMLENBQXJCO0FBQ0g7QUFDSjtBQUNKOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JmLFlBQVNBLE1BREk7QUFFYlksdUJBQW9CQTtBQUZQLENBQWpCIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2Jyb2FkY2FzdH0gZnJvbSAnLi4vLi4vdXRpbHMvaGVscGVycy5qcyc7XG5pbXBvcnQge3ZmZkRhdGF9IGZyb20gJy4uL3ZmZkRhdGEuanMnO1xuaW1wb3J0IHtpc0ludGVyYWN0aW9uRXZlbnQsIGRpc3BhdGNoRXZlbnR9IGZyb20gJy4uL2ludGVyYWN0aW9uRXZlbnRzJztcbmltcG9ydCB7VkZGX0VWRU5UfSBmcm9tICcuLi8uLi91dGlscy9ldmVudHMnO1xuaW1wb3J0IHtOQU1FU1BBQ0VfREVMSU1JVEVSfSBmcm9tICcuLi9jb25zdHMnO1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZShkYXRhKXtcbiAgICBsZXQgdGltZWNvZGUsIGNoYW5nZWQgPSBmYWxzZTtcbiAgICBmb3IobGV0IHRlbXBsYXRlTmFtZSBpbiBkYXRhKXtcbiAgICAgICAgZm9yKGxldCBrZXkgaW4gZGF0YVt0ZW1wbGF0ZU5hbWVdKSB7XG4gICAgICAgICAgICBpZihrZXkgIT09ICdfX3RpbWVjb2RlX18nKXtcbiAgICAgICAgICAgICAgICBpZighdGltZWNvZGUpIHRpbWVjb2RlID0gZGF0YVt0ZW1wbGF0ZU5hbWVdLl9fdGltZWNvZGVfXztcbiAgICAgICAgICAgICAgICBjaGFuZ2VkID0gdmZmRGF0YS51cGRhdGVDb250cm9sKGAke3RlbXBsYXRlTmFtZX0ke05BTUVTUEFDRV9ERUxJTUlURVJ9JHtrZXl9YCwgZGF0YVt0ZW1wbGF0ZU5hbWVdW2tleV0sIHt0aW1lY29kZX0pIHx8IGNoYW5nZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicm9hZGNhc3QoYCR7VkZGX0VWRU5UfSR7dGVtcGxhdGVOYW1lfSR7TkFNRVNQQUNFX0RFTElNSVRFUn0ke2tleX1gLCB7IGRhdGFDaGFuZ2VkOiBjaGFuZ2VkICx0aW1lY29kZX0pO1xuICAgICAgICB9XG4gICAgICAgIGJyb2FkY2FzdChWRkZfRVZFTlQgKyB0ZW1wbGF0ZU5hbWUsIHtkYXRhQ2hhbmdlZDogY2hhbmdlZCAsdGltZWNvZGV9KTtcbiAgICB9XG4gICAgYnJvYWRjYXN0KFZGRl9FVkVOVCwge2RhdGFDaGFuZ2VkOiBjaGFuZ2VkLCB0aW1lY29kZX0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVJbnRlcmFjdGlvbihkYXRhKXtcbiAgICBmb3IobGV0IGV2ZW50IGluIGRhdGEpe1xuICAgICAgICBpZihpc0ludGVyYWN0aW9uRXZlbnQoZXZlbnQpKXtcbiAgICAgICAgICAgIGRpc3BhdGNoRXZlbnQoZXZlbnQsIGRhdGFbZXZlbnRdKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgdXBkYXRlIDogdXBkYXRlLFxuICAgIHVwZGF0ZUludGVyYWN0aW9uIDogdXBkYXRlSW50ZXJhY3Rpb25cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvcmUvaGFuZGxlcnMvdXBkYXRlSGFuZGxlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _xpath = __webpack_require__(16);\n\nvar _messenger = __webpack_require__(3);\n\nvar _events = __webpack_require__(1);\n\nvar events = ['__mouseup__', '__mousedown__', '__mousemove__', '__mouseover__', '__mouseout__', '__mouseenter__', '__mouseleave__', '__click__', '__dblclick__', '__touchstart__', '__touchend__', '__touchmove__', '__drag__', '__dragstart__', '__dragend__', '__dragover__', '__dragenter__', '__dragleave__', '__dragexit__', '__drop__', '__wheel__'];\n\nfunction touchesToJson(touches) {\n    if (!touches) return touches;\n    var touchArray = [];\n\n    for (var i = 0; i < touches.length; i++) {\n        var touch = touches[i];\n        var touchData = {\n            clientX: touch.clientX,\n            clientY: touch.clientY,\n            pageX: touch.pageX,\n            pageY: touch.pageY\n        };\n        touchArray.push(touchData);\n    }\n    return touchArray;\n}\n\nfunction sync(e) {\n    if (e.ctrlKey && e.metaKey && e.altKey && e.shiftKey) return;\n    var msg = {};\n    msg[\"__\" + e.type + \"__\"] = {\n        pageX: e.pageX,\n        pageY: e.pageY,\n        clientX: e.clientX,\n        clientY: e.clientY,\n        deltaX: e.deltaX,\n        deltaY: e.deltaY,\n        deltaZ: e.deltaZ,\n        deltaMode: e.deltaMode,\n        target: (0, _xpath.createXPathFromElement)(e.target),\n        touches: touchesToJson(e.touches),\n        targetTouches: touchesToJson(e.targetTouches),\n        changedTouches: touchesToJson(e.changedTouches)\n    };\n    if (window.webrtc) {\n        window.webrtc.send(msg);\n    }\n    (0, _messenger.send)(_events.INTERACTION, msg);\n}\n\nfunction bindSyncEvents(element) {\n    events.forEach(function (event) {\n        event = event.replace(/__/g, '');\n        element.addEventListener(event, sync, true);\n    });\n}\n\nfunction dispatchEvent(event, data) {\n    var target = void 0;\n    if (['__click__'].indexOf(event) > -1) {\n        target = document.elementFromPoint(data.pageX, data.pageY);\n    } else {\n        target = (0, _xpath.lookupElementByXPath)(data.target);\n    }\n    data.bubbles = true;\n    data.cancelable = true;\n    data.ctrlKey = data.metaKey = data.altKey = data.shiftKey = true; //Distinct the event to avoid looping\n    data.view = window;\n    // data.detail = {\"test\" : true};\n\n    if (target) {\n        if (['__touchstart__', '__touchend__', '__touchmove__'].indexOf(event) > -1) {\n            target.dispatchEvent(new TouchEvent(event.slice(2, -2), handleTouchEvent(data, target)));\n        } else if (event === '__wheel__') {\n            target.dispatchEvent(new WheelEvent(event.slice(2, -2), data));\n        } else {\n            target.dispatchEvent(new MouseEvent(event.slice(2, -2), data));\n        }\n    } else {\n        window.console.log('cannot find target:', data.target);\n    }\n}\n\nfunction handleTouchEvent(data, target) {\n    data.changedTouches = createTouchArray(data.changedTouches, target);\n    data.targetTouches = createTouchArray(data.targetTouches, target);\n    data.touches = createTouchArray(data.touches, target);\n    return data;\n}\n\nfunction createTouchArray(touches, target) {\n    return touches.map(function (touch) {\n        touch.identifier = Date.now();\n        touch.target = target;\n        return new Touch(touch);\n    });\n}\n\nfunction isInteractionEvent(event) {\n    return events.indexOf(event) > -1;\n}\n\nwindow.addEventListener('load', function () {\n    bindSyncEvents(window);\n});\n\nmodule.exports = {\n    \"sync\": sync,\n    \"events\": events,\n    \"bindSyncEvents\": bindSyncEvents,\n    \"isInteractionEvent\": isInteractionEvent,\n    \"dispatchEvent\": dispatchEvent\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _messenger = __webpack_require__(3);\n\nvar _vffSetup = __webpack_require__(11);\n\nvar _events = __webpack_require__(1);\n\nvar _vffData = __webpack_require__(2);\n\nvar _listener = __webpack_require__(14);\n\nvar _initDOM = __webpack_require__(23);\n\nvar _vffElement = __webpack_require__(24);\n\nvar _vffElement2 = _interopRequireDefault(_vffElement);\n\n__webpack_require__(26);\n\n__webpack_require__(27);\n\nvar _helpers = __webpack_require__(0);\n\nvar _events2 = __webpack_require__(44);\n\nvar eventsApi = _interopRequireWildcard(_events2);\n\nvar _player = __webpack_require__(45);\n\nvar playerApi = _interopRequireWildcard(_player);\n\nvar _visibility = __webpack_require__(46);\n\nvar visibilityApi = _interopRequireWildcard(_visibility);\n\nvar _http = __webpack_require__(47);\n\nvar httpApi = _interopRequireWildcard(_http);\n\nvar _interactionEvents = __webpack_require__(9);\n\nvar _consts = __webpack_require__(4);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(0, _listener.start)();\n(0, _initDOM.init)();\n\nwindow.addEventListener('load', function () {\n    (0, _messenger.send)(_events.READY);\n});\n\nvar vff = function vff(selector) {\n    return new _vffElement2.default(selector);\n};\n\nvff.registerControl = function (name, value, options) {\n    return _vffData.vffData.registerControl(name, value, options);\n};\nvff.registerControls = function (object, options) {\n    return _vffData.vffData.registerControls(object, options);\n};\nvff.updateControl = function (name, value, options) {\n    return _vffData.vffData.updateControl(name, value, options);\n};\n\n// vff.addTemplate         = (name, data, options) => {return vffData.registerTemplate(name, data, options);};\n// vff.registerTemplate    = (name, data, options) => {return vffData.registerTemplate(name, data, options);};\n// vff.getTemplate         = (name) => {return vffData.getTemplate(name);};\n// vff.getTemplates        = () => {return vffData.getTemplates();};\n\n\nvff.onUpdate = function (cb) {\n    return _vffData.vffData.onUpdate(cb);\n};\nvff.getPages = function () {\n    return _vffData.vffData.getPages();\n};\nvff.onPages = function (cb) {\n    return _vffData.vffData.onPages(cb);\n};\nvff.on = function (namespace, cb) {\n    return _vffData.vffData.on(namespace, cb);\n};\nvff.getQueryParams = function () {\n    return _vffData.vffData.getQueryParams();\n};\nvff.send = function (type, payload) {\n    (0, _messenger.send)(type, payload);\n};\nvff.request = function (type, payload, cb) {\n    (0, _messenger.request)(type, payload, cb);\n};\nvff.setup = function (options) {\n    return (0, _vffSetup.setup)(options);\n};\nvff.isMobile = _helpers.isMobile;\nvff.isController = _helpers.isController;\nvff.mode = _helpers.mode; //Current\nvff.MODE = _consts.MODE; //Enum\nvff.defer = _helpers.defer;\nvff.extend = function (name, extension) {\n    vff[name] = extension;\n};\nvff.define = function (name, element) {\n    customElements.define(name, element);\n};\nvff.uuid = (0, _helpers.uuid)();\nvff.sync = function (element) {\n    (0, _interactionEvents.bindSyncEvents)(element);\n};\n\n(0, _helpers.extend)(vff, playerApi);\n(0, _helpers.extend)(vff, visibilityApi);\n(0, _helpers.extend)(vff, eventsApi);\n\nvff.extend('http', httpApi);\n\nmodule.exports = vff;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/OTU1MiJdLCJuYW1lcyI6WyJldmVudHNBcGkiLCJwbGF5ZXJBcGkiLCJ2aXNpYmlsaXR5QXBpIiwiaHR0cEFwaSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJSRUFEWSIsInZmZiIsInNlbGVjdG9yIiwidmZmRWxlbWVudCIsInJlZ2lzdGVyQ29udHJvbCIsIm5hbWUiLCJ2YWx1ZSIsIm9wdGlvbnMiLCJ2ZmZEYXRhIiwicmVnaXN0ZXJDb250cm9scyIsIm9iamVjdCIsInVwZGF0ZUNvbnRyb2wiLCJvblVwZGF0ZSIsImNiIiwiZ2V0UGFnZXMiLCJvblBhZ2VzIiwib24iLCJuYW1lc3BhY2UiLCJnZXRRdWVyeVBhcmFtcyIsInNlbmQiLCJ0eXBlIiwicGF5bG9hZCIsInJlcXVlc3QiLCJzZXR1cCIsImlzTW9iaWxlIiwiaXNDb250cm9sbGVyIiwibW9kZSIsIk1PREUiLCJkZWZlciIsImV4dGVuZCIsImV4dGVuc2lvbiIsImRlZmluZSIsImVsZW1lbnQiLCJjdXN0b21FbGVtZW50cyIsInV1aWQiLCJzeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUNBOztBQUNBOztBQUNBOztBQUNBOztJQUFZQSxTOztBQUNaOztJQUFZQyxTOztBQUNaOztJQUFZQyxhOztBQUNaOztJQUFZQyxPOztBQUNaOztBQUNBOzs7Ozs7QUFFQTtBQUNBOztBQUVBQyxPQUFPQyxnQkFBUCxDQUF3QixNQUF4QixFQUFnQyxZQUFNO0FBQ2xDLHlCQUFLQyxhQUFMO0FBQ0gsQ0FGRDs7QUFLQSxJQUFJQyxNQUFNLFNBQU5BLEdBQU0sQ0FBQ0MsUUFBRCxFQUFjO0FBQ3BCLFdBQU8sSUFBSUMsb0JBQUosQ0FBZUQsUUFBZixDQUFQO0FBQ0gsQ0FGRDs7QUFLQUQsSUFBSUcsZUFBSixHQUEwQixVQUFDQyxJQUFELEVBQU9DLEtBQVAsRUFBY0MsT0FBZCxFQUEwQjtBQUFDLFdBQU9DLGlCQUFRSixlQUFSLENBQXdCQyxJQUF4QixFQUE4QkMsS0FBOUIsRUFBcUNDLE9BQXJDLENBQVA7QUFBc0QsQ0FBM0c7QUFDQU4sSUFBSVEsZ0JBQUosR0FBMEIsVUFBQ0MsTUFBRCxFQUFTSCxPQUFULEVBQXFCO0FBQUMsV0FBT0MsaUJBQVFDLGdCQUFSLENBQXlCQyxNQUF6QixFQUFpQ0gsT0FBakMsQ0FBUDtBQUFrRCxDQUFsRztBQUNBTixJQUFJVSxhQUFKLEdBQTBCLFVBQUNOLElBQUQsRUFBT0MsS0FBUCxFQUFjQyxPQUFkLEVBQTBCO0FBQUMsV0FBT0MsaUJBQVFHLGFBQVIsQ0FBc0JOLElBQXRCLEVBQTRCQyxLQUE1QixFQUFtQ0MsT0FBbkMsQ0FBUDtBQUFvRCxDQUF6Rzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0FOLElBQUlXLFFBQUosR0FBMEIsVUFBQ0MsRUFBRCxFQUFRO0FBQUMsV0FBT0wsaUJBQVFJLFFBQVIsQ0FBaUJDLEVBQWpCLENBQVA7QUFBNkIsQ0FBaEU7QUFDQVosSUFBSWEsUUFBSixHQUEwQixZQUFNO0FBQUMsV0FBT04saUJBQVFNLFFBQVIsRUFBUDtBQUEyQixDQUE1RDtBQUNBYixJQUFJYyxPQUFKLEdBQTBCLFVBQUNGLEVBQUQsRUFBUTtBQUFDLFdBQU9MLGlCQUFRTyxPQUFSLENBQWdCRixFQUFoQixDQUFQO0FBQTRCLENBQS9EO0FBQ0FaLElBQUllLEVBQUosR0FBMEIsVUFBQ0MsU0FBRCxFQUFZSixFQUFaLEVBQW1CO0FBQUMsV0FBT0wsaUJBQVFRLEVBQVIsQ0FBV0MsU0FBWCxFQUFzQkosRUFBdEIsQ0FBUDtBQUFrQyxDQUFoRjtBQUNBWixJQUFJaUIsY0FBSixHQUEwQixZQUFNO0FBQUMsV0FBT1YsaUJBQVFVLGNBQVIsRUFBUDtBQUFpQyxDQUFsRTtBQUNBakIsSUFBSWtCLElBQUosR0FBMEIsVUFBQ0MsSUFBRCxFQUFPQyxPQUFQLEVBQW1CO0FBQUUseUJBQUtELElBQUwsRUFBV0MsT0FBWDtBQUFzQixDQUFyRTtBQUNBcEIsSUFBSXFCLE9BQUosR0FBMEIsVUFBQ0YsSUFBRCxFQUFPQyxPQUFQLEVBQWdCUixFQUFoQixFQUF1QjtBQUFFLDRCQUFRTyxJQUFSLEVBQWNDLE9BQWQsRUFBdUJSLEVBQXZCO0FBQTZCLENBQWhGO0FBQ0FaLElBQUlzQixLQUFKLEdBQTBCLFVBQUNoQixPQUFELEVBQWE7QUFBQyxXQUFPLHFCQUFNQSxPQUFOLENBQVA7QUFBdUIsQ0FBL0Q7QUFDQU4sSUFBSXVCLFFBQUosR0FBMEJBLGlCQUExQjtBQUNBdkIsSUFBSXdCLFlBQUosR0FBMEJBLHFCQUExQjtBQUNBeEIsSUFBSXlCLElBQUosR0FBMEJBLGFBQTFCLEMsQ0FBZ0M7QUFDaEN6QixJQUFJMEIsSUFBSixHQUEwQkEsWUFBMUIsQyxDQUFnQztBQUNoQzFCLElBQUkyQixLQUFKLEdBQTBCQSxjQUExQjtBQUNBM0IsSUFBSTRCLE1BQUosR0FBMEIsVUFBQ3hCLElBQUQsRUFBT3lCLFNBQVAsRUFBcUI7QUFBRTdCLFFBQUlJLElBQUosSUFBWXlCLFNBQVo7QUFBd0IsQ0FBekU7QUFDQTdCLElBQUk4QixNQUFKLEdBQTBCLFVBQUMxQixJQUFELEVBQU8yQixPQUFQLEVBQW1CO0FBQUVDLG1CQUFlRixNQUFmLENBQXNCMUIsSUFBdEIsRUFBNEIyQixPQUE1QjtBQUF1QyxDQUF0RjtBQUNBL0IsSUFBSWlDLElBQUosR0FBMEIsb0JBQTFCO0FBQ0FqQyxJQUFJa0MsSUFBSixHQUEwQixVQUFDSCxPQUFELEVBQWE7QUFBRSwyQ0FBZUEsT0FBZjtBQUEwQixDQUFuRTs7QUFFQSxxQkFBTy9CLEdBQVAsRUFBWU4sU0FBWjtBQUNBLHFCQUFPTSxHQUFQLEVBQVlMLGFBQVo7QUFDQSxxQkFBT0ssR0FBUCxFQUFZUCxTQUFaOztBQUtBTyxJQUFJNEIsTUFBSixDQUFXLE1BQVgsRUFBbUJoQyxPQUFuQjs7QUFHQXVDLE9BQU9DLE9BQVAsR0FBaUJwQyxHQUFqQiIsImZpbGUiOiIxMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7c2VuZCwgcmVxdWVzdH0gZnJvbSAnLi91dGlscy9tZXNzZW5nZXIuanMnO1xuaW1wb3J0IHtzZXR1cH0gZnJvbSAnLi9jb3JlL3ZmZlNldHVwJztcbmltcG9ydCB7UkVBRFl9IGZyb20gJy4vdXRpbHMvZXZlbnRzLmpzJztcbmltcG9ydCB7dmZmRGF0YX0gZnJvbSAnLi9jb3JlL3ZmZkRhdGEuanMnO1xuaW1wb3J0IHtzdGFydCBhcyBzdGFydExpc3RlbmVyfSBmcm9tICcuL3V0aWxzL2xpc3RlbmVyJztcbmltcG9ydCB7aW5pdCBhcyBpbml0VmZmRG9tfSBmcm9tICcuL2NvcmUvaW5pdERPTSc7XG5pbXBvcnQgdmZmRWxlbWVudCBmcm9tICcuL2NvcmUvdmZmRWxlbWVudCc7XG5pbXBvcnQgJy4vY29yZS9kZWZhdWx0RXhwb3NlJztcbmltcG9ydCBcIi4vY29tcG9uZW50cy9jb21wb25lbnRzLmpzXCI7XG5pbXBvcnQge2lzTW9iaWxlLCBpc0NvbnRyb2xsZXIsIG1vZGUsIGV4dGVuZCwgZGVmZXIsIHV1aWR9IGZyb20gJy4vdXRpbHMvaGVscGVycyc7XG5pbXBvcnQgKiBhcyBldmVudHNBcGkgZnJvbSAnLi9jb3JlL2FwaS9ldmVudHMnO1xuaW1wb3J0ICogYXMgcGxheWVyQXBpIGZyb20gJy4vY29yZS9hcGkvcGxheWVyJztcbmltcG9ydCAqIGFzIHZpc2liaWxpdHlBcGkgZnJvbSAnLi9jb3JlL2FwaS92aXNpYmlsaXR5JztcbmltcG9ydCAqIGFzIGh0dHBBcGkgZnJvbSAnLi9jb3JlL2FwaS9odHRwJztcbmltcG9ydCB7YmluZFN5bmNFdmVudHN9IGZyb20gJy4vY29yZS9pbnRlcmFjdGlvbkV2ZW50cyc7XG5pbXBvcnQge01PREV9IGZyb20gJy4vY29yZS9jb25zdHMnO1xuXG5zdGFydExpc3RlbmVyKCk7XG5pbml0VmZmRG9tKCk7XG5cbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgIHNlbmQoUkVBRFkpO1xufSk7XG5cblxubGV0IHZmZiA9IChzZWxlY3RvcikgPT4ge1xuICAgIHJldHVybiBuZXcgdmZmRWxlbWVudChzZWxlY3Rvcik7XG59O1xuXG5cbnZmZi5yZWdpc3RlckNvbnRyb2wgICAgID0gKG5hbWUsIHZhbHVlLCBvcHRpb25zKSA9PiB7cmV0dXJuIHZmZkRhdGEucmVnaXN0ZXJDb250cm9sKG5hbWUsIHZhbHVlLCBvcHRpb25zKTt9O1xudmZmLnJlZ2lzdGVyQ29udHJvbHMgICAgPSAob2JqZWN0LCBvcHRpb25zKSA9PiB7cmV0dXJuIHZmZkRhdGEucmVnaXN0ZXJDb250cm9scyhvYmplY3QsIG9wdGlvbnMpO307XG52ZmYudXBkYXRlQ29udHJvbCAgICAgICA9IChuYW1lLCB2YWx1ZSwgb3B0aW9ucykgPT4ge3JldHVybiB2ZmZEYXRhLnVwZGF0ZUNvbnRyb2wobmFtZSwgdmFsdWUsIG9wdGlvbnMpO307XG5cblxuLy8gdmZmLmFkZFRlbXBsYXRlICAgICAgICAgPSAobmFtZSwgZGF0YSwgb3B0aW9ucykgPT4ge3JldHVybiB2ZmZEYXRhLnJlZ2lzdGVyVGVtcGxhdGUobmFtZSwgZGF0YSwgb3B0aW9ucyk7fTtcbi8vIHZmZi5yZWdpc3RlclRlbXBsYXRlICAgID0gKG5hbWUsIGRhdGEsIG9wdGlvbnMpID0+IHtyZXR1cm4gdmZmRGF0YS5yZWdpc3RlclRlbXBsYXRlKG5hbWUsIGRhdGEsIG9wdGlvbnMpO307XG4vLyB2ZmYuZ2V0VGVtcGxhdGUgICAgICAgICA9IChuYW1lKSA9PiB7cmV0dXJuIHZmZkRhdGEuZ2V0VGVtcGxhdGUobmFtZSk7fTtcbi8vIHZmZi5nZXRUZW1wbGF0ZXMgICAgICAgID0gKCkgPT4ge3JldHVybiB2ZmZEYXRhLmdldFRlbXBsYXRlcygpO307XG5cblxudmZmLm9uVXBkYXRlICAgICAgICAgICAgPSAoY2IpID0+IHtyZXR1cm4gdmZmRGF0YS5vblVwZGF0ZShjYik7fTtcbnZmZi5nZXRQYWdlcyAgICAgICAgICAgID0gKCkgPT4ge3JldHVybiB2ZmZEYXRhLmdldFBhZ2VzKCk7fTtcbnZmZi5vblBhZ2VzICAgICAgICAgICAgID0gKGNiKSA9PiB7cmV0dXJuIHZmZkRhdGEub25QYWdlcyhjYik7fTtcbnZmZi5vbiAgICAgICAgICAgICAgICAgID0gKG5hbWVzcGFjZSwgY2IpID0+IHtyZXR1cm4gdmZmRGF0YS5vbihuYW1lc3BhY2UsIGNiKTt9O1xudmZmLmdldFF1ZXJ5UGFyYW1zICAgICAgPSAoKSA9PiB7cmV0dXJuIHZmZkRhdGEuZ2V0UXVlcnlQYXJhbXMoKTt9O1xudmZmLnNlbmQgICAgICAgICAgICAgICAgPSAodHlwZSwgcGF5bG9hZCkgPT4geyBzZW5kKHR5cGUsIHBheWxvYWQpOyB9O1xudmZmLnJlcXVlc3QgICAgICAgICAgICAgPSAodHlwZSwgcGF5bG9hZCwgY2IpID0+IHsgcmVxdWVzdCh0eXBlLCBwYXlsb2FkLCBjYik7IH07XG52ZmYuc2V0dXAgICAgICAgICAgICAgICA9IChvcHRpb25zKSA9PiB7cmV0dXJuIHNldHVwKG9wdGlvbnMpO307XG52ZmYuaXNNb2JpbGUgICAgICAgICAgICA9IGlzTW9iaWxlO1xudmZmLmlzQ29udHJvbGxlciAgICAgICAgPSBpc0NvbnRyb2xsZXI7XG52ZmYubW9kZSAgICAgICAgICAgICAgICA9IG1vZGU7IC8vQ3VycmVudFxudmZmLk1PREUgICAgICAgICAgICAgICAgPSBNT0RFOyAvL0VudW1cbnZmZi5kZWZlciAgICAgICAgICAgICAgID0gZGVmZXI7XG52ZmYuZXh0ZW5kICAgICAgICAgICAgICA9IChuYW1lLCBleHRlbnNpb24pID0+IHsgdmZmW25hbWVdID0gZXh0ZW5zaW9uOyB9O1xudmZmLmRlZmluZSAgICAgICAgICAgICAgPSAobmFtZSwgZWxlbWVudCkgPT4geyBjdXN0b21FbGVtZW50cy5kZWZpbmUobmFtZSwgZWxlbWVudCk7IH07XG52ZmYudXVpZCAgICAgICAgICAgICAgICA9IHV1aWQoKTtcbnZmZi5zeW5jICAgICAgICAgICAgICAgID0gKGVsZW1lbnQpID0+IHsgYmluZFN5bmNFdmVudHMoZWxlbWVudCk7IH07XG5cbmV4dGVuZCh2ZmYsIHBsYXllckFwaSk7XG5leHRlbmQodmZmLCB2aXNpYmlsaXR5QXBpKTtcbmV4dGVuZCh2ZmYsIGV2ZW50c0FwaSk7XG5cblxuXG5cbnZmZi5leHRlbmQoJ2h0dHAnLCBodHRwQXBpKTtcblxuXG5tb2R1bGUuZXhwb3J0cyA9IHZmZjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _messenger = __webpack_require__(3);\n\nvar _events = __webpack_require__(1);\n\nfunction setup(options) {\n    if (options) {\n        (0, _messenger.send)(_events.VF_SETUP, options);\n    }\n}\n\nmodule.exports = {\n    setup: setup\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS92ZmZTZXR1cC5qcz81NDJiIl0sIm5hbWVzIjpbInNldHVwIiwib3B0aW9ucyIsIlZGX1NFVFVQIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFFQSxTQUFTQSxLQUFULENBQWVDLE9BQWYsRUFBdUI7QUFDbkIsUUFBR0EsT0FBSCxFQUFXO0FBQ1AsNkJBQUtDLGdCQUFMLEVBQWVELE9BQWY7QUFDSDtBQUNKOztBQUVERSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JKLFdBQWlCQTtBQURKLENBQWpCIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtzZW5kfSBmcm9tIFwiLi4vdXRpbHMvbWVzc2VuZ2VyXCI7XG5pbXBvcnQge1ZGX1NFVFVQfSBmcm9tIFwiLi4vdXRpbHMvZXZlbnRzXCI7XG5cbmZ1bmN0aW9uIHNldHVwKG9wdGlvbnMpe1xuICAgIGlmKG9wdGlvbnMpe1xuICAgICAgICBzZW5kKFZGX1NFVFVQLCBvcHRpb25zKTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNldHVwICAgICAgICAgIDogc2V0dXBcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvcmUvdmZmU2V0dXAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    \"REGISTER_TEMPLATE\": 'register-template'\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvZG9jUmVmcy5qcz83M2IwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUFBLE9BQU9DLE9BQVAsR0FBaUI7QUFDYix5QkFBc0I7QUFEVCxDQUFqQiIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0ge1xuICAgIFwiUkVHSVNURVJfVEVNUExBVEVcIiA6ICdyZWdpc3Rlci10ZW1wbGF0ZSdcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvZG9jUmVmcy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _helpers = __webpack_require__(0);\n\nvar _consts = __webpack_require__(4);\n\nvar _messenger = __webpack_require__(3);\n\nvar _events = __webpack_require__(1);\n\nvar _vffData = __webpack_require__(2);\n\nvar _vffEvent = __webpack_require__(7);\n\nvar _vffEvent2 = _interopRequireDefault(_vffEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar DEFAULT_OPTIONS = {\n    group: 'untitled template',\n    global: false,\n    bindTo: undefined\n};\n\nvar DEFAULT_ON_OPTIONS = {\n    throttle: true,\n    changeOnly: true\n};\nvar DEFAULT_BEFORE_OPTIONS = {\n    throttle: true\n};\n\nvar VFFControl = function () {\n    function VFFControl(name, value, options) {\n        _classCallCheck(this, VFFControl);\n\n        var group = void 0;\n        var parts = name.split(_consts.NAMESPACE_DELIMITER);\n        if (parts.length > 1) {\n            name = parts[parts.length - 1];\n            group = parts.slice(0, -1).join('.');\n        }\n\n        this._name = name;\n        this._options = Object.assign({}, DEFAULT_OPTIONS, options || {});\n        if (group) this._options.group = group;\n        this._group = this._options.group; //for querying purposes\n\n        this._listeners = [];\n        this._middleware = [];\n        this._timeouts = new WeakMap();\n\n        this._setValue(value);\n    }\n\n    _createClass(VFFControl, [{\n        key: \"getGroup\",\n        value: function getGroup() {\n            return this._options.group;\n        }\n    }, {\n        key: \"getName\",\n        value: function getName() {\n            return this._name;\n        }\n    }, {\n        key: \"getNamespace\",\n        value: function getNamespace() {\n            return this.getGroup() + '.' + this.getName();\n        }\n    }, {\n        key: \"getOptions\",\n        value: function getOptions() {\n            return this._options;\n        }\n    }, {\n        key: \"getValue\",\n        value: function getValue() {\n            return this._value;\n        }\n    }, {\n        key: \"getBindProp\",\n        value: function getBindProp() {\n            return this.getOptions().bindTo;\n        }\n    }, {\n        key: \"isBoundToAttribute\",\n        value: function isBoundToAttribute() {\n            return !!this.getOptions().attribute;\n        }\n    }, {\n        key: \"_updateBoundElements\",\n        value: function _updateBoundElements() {\n            var _this = this;\n\n            var elements = document.querySelectorAll(this._bindSelector());\n            elements.forEach(function (el) {\n                if (_this.getBindProp()) {\n                    if (_this.isBoundToAttribute()) {\n                        el.setAttribute(_this.getBindProp(), _this._value);\n                    } else {\n                        (0, _helpers.setByPath)(el, _this.getBindProp(), _this._value);\n                    }\n                } else if (el instanceof HTMLTextAreaElement || el instanceof HTMLInputElement) {\n                    el.value = _this._value;\n                } else {\n                    el.innerHTML = _this._value;\n                }\n            });\n        }\n    }, {\n        key: \"_runListeners\",\n        value: function _runListeners(valueChanged) {\n            var _this2 = this;\n\n            this._listeners.forEach(function (listener) {\n                if (!listener.options.changeOnly || valueChanged) {\n                    _this2._runCallback(listener.fn, listener.options, new _vffEvent2.default({\n                        data: _this2._value,\n                        timecode: _this2.timecode,\n                        changed: valueChanged\n                    }));\n                }\n            });\n        }\n    }, {\n        key: \"_setValue\",\n        value: function _setValue(value) {\n            var _this3 = this;\n\n            if (value && value.value) {\n                value = value.value;\n            }\n            var valueChanged = !(0, _helpers.deepCompare)(this._value, value);\n            this._runMiddleware(this._middleware, value).then(function (value) {\n                _this3._value = value;\n                _this3._updateBoundElements();\n                _this3._runListeners(valueChanged);\n            });\n            return valueChanged;\n        }\n    }, {\n        key: \"updateValue\",\n        value: function updateValue(value) {\n            if (value && value.value) {\n                value = value.value;\n            }\n            var valueChanged = !(0, _helpers.deepCompare)(this._value, value);\n            this._value = value;\n            this._updateBoundElements();\n            this._runListeners(valueChanged);\n\n            (0, _messenger.send)(_events.USER_UPDATE, _defineProperty({}, this.getGroup(), this.getValueObject()));\n        }\n    }, {\n        key: \"getValueObject\",\n        value: function getValueObject() {\n            var data = void 0;\n            if (this.getOptions().ui && _typeof(this.getOptions().ui.type)) {\n                data = _defineProperty({}, this.getName(), {\n                    ui: this.getOptions().ui.type,\n                    options: this.getOptions().ui.options,\n                    value: this.getValue(),\n                    label: this.getOptions().ui.label,\n                    config: this.getOptions().ui.config\n                });\n            } else {\n                data = _defineProperty({}, this.getName(), this.getValue());\n            }\n            return data;\n        }\n    }, {\n        key: \"on\",\n        value: function on(fn, options) {\n            options = Object.assign({}, DEFAULT_ON_OPTIONS, options || {});\n            this._listeners.push({ fn: fn, options: options });\n            return this;\n        }\n    }, {\n        key: \"emit\",\n        value: function emit(data) {\n            (0, _messenger.send)(_events.OUTGOING_EVENT, {\n                data: data,\n                query: _vffData.vffData.getQueryParams(),\n                channel: this.getGroup()\n            });\n        }\n    }, {\n        key: \"before\",\n        value: function before(fn, options) {\n            options = Object.assign({}, DEFAULT_BEFORE_OPTIONS, options || {});\n            this._middleware.push({ fn: fn, options: options });\n            return this;\n        }\n    }, {\n        key: \"_bindSelector\",\n        value: function _bindSelector() {\n            var group = this.getGroup() === DEFAULT_OPTIONS.group ? '' : this.getGroup() + _consts.NAMESPACE_DELIMITER;\n            var name = \"\" + this.getName().split(_consts.EXPOSE_DELIMITER)[0];\n            return \"[\" + _consts.ATTRIBUTE.BIND + \"=\\\"\" + group + name + \"\\\"]\";\n        }\n    }, {\n        key: \"_runCallback\",\n        value: function _runCallback(callback, options) {\n            for (var _len = arguments.length, data = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                data[_key - 2] = arguments[_key];\n            }\n\n            if (options.consolidate || options.throttle) {\n                clearTimeout(this._timeouts.get(callback));\n                this._timeouts.set(callback, setTimeout(function () {\n                    callback.apply(undefined, data);\n                }, typeof options.throttle === 'number' ? options.throttle : 50));\n            } else {\n                callback.apply(undefined, data);\n            }\n        }\n    }, {\n        key: \"_runMiddleware\",\n        value: function _runMiddleware(functions, data) {\n            var self = this;\n            return functions.reduce(function (prev, curr) {\n                return prev.then(function (data) {\n                    var d = (0, _helpers.defer)();\n                    self._runCallback(curr.fn, curr.options, data, d.resolve);\n                    return d.promise;\n                });\n            }, Promise.resolve(data));\n        }\n    }]);\n\n    return VFFControl;\n}();\n\nexports.default = VFFControl;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _handlers = __webpack_require__(15);\n\nvar handlers = _interopRequireWildcard(_handlers);\n\nvar _events = __webpack_require__(1);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction messageHandler(message) {\n    try {\n        var messageData = JSON.parse(message.data);\n        var type = messageData.type;\n        var handler = handlers[type];\n        if (messageData.cid && message.source && message.source.postMessage) {\n            var msg = { type: _events.ACK, cid: messageData.cid };\n            message.source.postMessage(JSON.stringify(msg), '*');\n        }\n        if (handler) {\n            handler(messageData.payload);\n        }\n    } catch (err) {\n        //Malformed JSON\n    }\n}\n\nmodule.exports = {\n    start: function start() {\n        if (window && window.addEventListener) {\n            window.addEventListener('message', messageHandler, false);\n        }\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvbGlzdGVuZXIuanM/M2ZmNSJdLCJuYW1lcyI6WyJoYW5kbGVycyIsIm1lc3NhZ2VIYW5kbGVyIiwibWVzc2FnZSIsIm1lc3NhZ2VEYXRhIiwiSlNPTiIsInBhcnNlIiwiZGF0YSIsInR5cGUiLCJoYW5kbGVyIiwiY2lkIiwic291cmNlIiwicG9zdE1lc3NhZ2UiLCJtc2ciLCJBQ0siLCJzdHJpbmdpZnkiLCJwYXlsb2FkIiwiZXJyIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0YXJ0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7SUFBWUEsUTs7QUFDWjs7OztBQUdBLFNBQVNDLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQWdDO0FBQzVCLFFBQUc7QUFDQyxZQUFJQyxjQUFjQyxLQUFLQyxLQUFMLENBQVdILFFBQVFJLElBQW5CLENBQWxCO0FBQ0EsWUFBSUMsT0FBT0osWUFBWUksSUFBdkI7QUFDQSxZQUFJQyxVQUFVUixTQUFTTyxJQUFULENBQWQ7QUFDQSxZQUFHSixZQUFZTSxHQUFaLElBQW1CUCxRQUFRUSxNQUEzQixJQUFxQ1IsUUFBUVEsTUFBUixDQUFlQyxXQUF2RCxFQUFtRTtBQUMvRCxnQkFBSUMsTUFBTSxFQUFDTCxNQUFPTSxXQUFSLEVBQWFKLEtBQUtOLFlBQVlNLEdBQTlCLEVBQVY7QUFDQVAsb0JBQVFRLE1BQVIsQ0FBZUMsV0FBZixDQUEyQlAsS0FBS1UsU0FBTCxDQUFlRixHQUFmLENBQTNCLEVBQStDLEdBQS9DO0FBQ0g7QUFDRCxZQUFHSixPQUFILEVBQVc7QUFDUEEsb0JBQVFMLFlBQVlZLE9BQXBCO0FBQ0g7QUFDSixLQVhELENBV0UsT0FBTUMsR0FBTixFQUFVO0FBQ1I7QUFDSDtBQUVKOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JDLFdBQVEsaUJBQU07QUFDVixZQUFHQyxVQUFVQSxPQUFPQyxnQkFBcEIsRUFBcUM7QUFDakNELG1CQUFPQyxnQkFBUCxDQUF3QixTQUF4QixFQUFtQ3BCLGNBQW5DLEVBQW1ELEtBQW5EO0FBQ0g7QUFDSjtBQUxZLENBQWpCIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgaGFuZGxlcnMgZnJvbSAnLi4vY29yZS9oYW5kbGVycyc7XG5pbXBvcnQge0FDS30gZnJvbSAnLi9ldmVudHMnO1xuXG5cbmZ1bmN0aW9uIG1lc3NhZ2VIYW5kbGVyKG1lc3NhZ2Upe1xuICAgIHRyeXtcbiAgICAgICAgbGV0IG1lc3NhZ2VEYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlLmRhdGEpO1xuICAgICAgICBsZXQgdHlwZSA9IG1lc3NhZ2VEYXRhLnR5cGU7XG4gICAgICAgIGxldCBoYW5kbGVyID0gaGFuZGxlcnNbdHlwZV07XG4gICAgICAgIGlmKG1lc3NhZ2VEYXRhLmNpZCAmJiBtZXNzYWdlLnNvdXJjZSAmJiBtZXNzYWdlLnNvdXJjZS5wb3N0TWVzc2FnZSl7XG4gICAgICAgICAgICB2YXIgbXNnID0ge3R5cGUgOiBBQ0ssIGNpZDogbWVzc2FnZURhdGEuY2lkfTtcbiAgICAgICAgICAgIG1lc3NhZ2Uuc291cmNlLnBvc3RNZXNzYWdlKEpTT04uc3RyaW5naWZ5KG1zZyksJyonKTtcbiAgICAgICAgfVxuICAgICAgICBpZihoYW5kbGVyKXtcbiAgICAgICAgICAgIGhhbmRsZXIobWVzc2FnZURhdGEucGF5bG9hZCk7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoKGVycil7XG4gICAgICAgIC8vTWFsZm9ybWVkIEpTT05cbiAgICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgc3RhcnQgOiAoKSA9PiB7XG4gICAgICAgIGlmKHdpbmRvdyAmJiB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcil7XG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG1lc3NhZ2VIYW5kbGVyLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMvbGlzdGVuZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _updateHandler = __webpack_require__(8);\n\nvar _pagesHandler = __webpack_require__(17);\n\nvar _queryParamsHandler = __webpack_require__(18);\n\nvar _reloadHandler = __webpack_require__(19);\n\nvar _vfDataHandler = __webpack_require__(20);\n\nvar events = __webpack_require__(1);\n\n\nvar handlers = {};\nhandlers[events.UPDATE] = _updateHandler.update;\nhandlers[events.PAGES] = _pagesHandler.pages;\nhandlers[events.QUERY_PARAMS] = _queryParamsHandler.queryParams;\nhandlers[events.RELOAD] = _reloadHandler.reload;\nhandlers[events.VF_DATA] = _vfDataHandler.handleVFData;\n\nmodule.exports = handlers;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9oYW5kbGVycy5qcz80ZTJhIl0sIm5hbWVzIjpbImV2ZW50cyIsInJlcXVpcmUiLCJoYW5kbGVycyIsIlVQREFURSIsInVwZGF0ZSIsIlBBR0VTIiwicGFnZXMiLCJRVUVSWV9QQVJBTVMiLCJxdWVyeVBhcmFtcyIsIlJFTE9BRCIsInJlbG9hZCIsIlZGX0RBVEEiLCJoYW5kbGVWRkRhdGEiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUxBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDLENBQVIsQ0FBYjs7O0FBUUEsSUFBSUMsV0FBVyxFQUFmO0FBQ0FBLFNBQVNGLE9BQU9HLE1BQWhCLElBQTBCQyxxQkFBMUI7QUFDQUYsU0FBU0YsT0FBT0ssS0FBaEIsSUFBeUJDLG1CQUF6QjtBQUNBSixTQUFTRixPQUFPTyxZQUFoQixJQUFnQ0MsK0JBQWhDO0FBQ0FOLFNBQVNGLE9BQU9TLE1BQWhCLElBQTBCQyxxQkFBMUI7QUFDQVIsU0FBU0YsT0FBT1csT0FBaEIsSUFBMkJDLDJCQUEzQjs7QUFJQUMsT0FBT0MsT0FBUCxHQUFpQlosUUFBakIiLCJmaWxlIjoiMTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgZXZlbnRzID0gcmVxdWlyZShcIi4uL3V0aWxzL2V2ZW50cy5qc1wiKTtcbmltcG9ydCB7dXBkYXRlfSBmcm9tIFwiLi9oYW5kbGVycy91cGRhdGVIYW5kbGVyLmpzXCI7XG5pbXBvcnQge3BhZ2VzfSBmcm9tIFwiLi9oYW5kbGVycy9wYWdlc0hhbmRsZXIuanNcIjtcbmltcG9ydCB7cXVlcnlQYXJhbXN9IGZyb20gXCIuL2hhbmRsZXJzL3F1ZXJ5UGFyYW1zSGFuZGxlci5qc1wiO1xuaW1wb3J0IHtyZWxvYWR9IGZyb20gXCIuL2hhbmRsZXJzL3JlbG9hZEhhbmRsZXIuanNcIjtcbmltcG9ydCB7aGFuZGxlVkZEYXRhfSBmcm9tICcuL2hhbmRsZXJzL3ZmRGF0YUhhbmRsZXInO1xuXG5cbmxldCBoYW5kbGVycyA9IHt9O1xuaGFuZGxlcnNbZXZlbnRzLlVQREFURV0gPSB1cGRhdGU7XG5oYW5kbGVyc1tldmVudHMuUEFHRVNdID0gcGFnZXM7XG5oYW5kbGVyc1tldmVudHMuUVVFUllfUEFSQU1TXSA9IHF1ZXJ5UGFyYW1zO1xuaGFuZGxlcnNbZXZlbnRzLlJFTE9BRF0gPSByZWxvYWQ7XG5oYW5kbGVyc1tldmVudHMuVkZfREFUQV0gPSBoYW5kbGVWRkRhdGE7XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhbmRsZXJzO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb3JlL2hhbmRsZXJzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction isSVGChild(elm) {\n    while (elm) {\n        if (elm.tagName === 'svg') return true;\n        elm = elm.parentNode;\n    }\n}\n\nmodule.exports = {\n\n    createXPathFromElement: function createXPathFromElement(elm) {\n        var allNodes = document.getElementsByTagName('*');\n        var segs = void 0,\n            sib = void 0,\n            i = void 0,\n            svg = void 0;\n        for (segs = []; elm && elm.nodeType == 1; elm = elm.parentNode) {\n            svg = isSVGChild(elm);\n            if (elm.hasAttribute('id') & !svg) {\n                var uniqueIdCount = 0;\n                for (var n = 0; n < allNodes.length; n++) {\n                    if (allNodes[n].hasAttribute('id') && allNodes[n].id == elm.id) uniqueIdCount++;\n                    if (uniqueIdCount > 1) break;\n                }\n                if (uniqueIdCount == 1) {\n                    segs.unshift('id(\"' + elm.getAttribute('id') + '\")');\n                    return segs.join('/');\n                } else {\n                    segs.unshift(elm.localName.toLowerCase() + '[@id=\"' + elm.getAttribute('id') + '\"]');\n                }\n            } else if (elm.hasAttribute('class') && !svg) {\n                segs.unshift(elm.localName.toLowerCase() + '[@class=\"' + elm.getAttribute('class') + '\"]');\n            } else {\n                for (i = 1, sib = elm.previousSibling; sib; sib = sib.previousSibling) {\n                    if (sib.localName == elm.localName) i++;\n                }\n                if (svg) {\n                    segs.unshift(\"*[name()='\" + elm.localName.toLowerCase() + \"'][\" + i + ']');\n                } else {\n                    segs.unshift(elm.localName.toLowerCase() + '[' + i + ']');\n                }\n            }\n        }\n        return segs.length ? '/' + segs.join('/') : null;\n    },\n\n    lookupElementByXPath: function lookupElementByXPath(path) {\n        var evaluator = new XPathEvaluator();\n        var result = evaluator.evaluate(path, document.documentElement, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n        return result.singleNodeValue;\n    },\n    getElementByXpath: function getElementByXpath(path) {\n        return document.evaluate(path, document, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;\n    }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMveHBhdGguanM/NTBiNyJdLCJuYW1lcyI6WyJpc1NWR0NoaWxkIiwiZWxtIiwidGFnTmFtZSIsInBhcmVudE5vZGUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3JlYXRlWFBhdGhGcm9tRWxlbWVudCIsImFsbE5vZGVzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInNlZ3MiLCJzaWIiLCJpIiwic3ZnIiwibm9kZVR5cGUiLCJoYXNBdHRyaWJ1dGUiLCJ1bmlxdWVJZENvdW50IiwibiIsImxlbmd0aCIsImlkIiwidW5zaGlmdCIsImdldEF0dHJpYnV0ZSIsImpvaW4iLCJsb2NhbE5hbWUiLCJ0b0xvd2VyQ2FzZSIsInByZXZpb3VzU2libGluZyIsImxvb2t1cEVsZW1lbnRCeVhQYXRoIiwicGF0aCIsImV2YWx1YXRvciIsIlhQYXRoRXZhbHVhdG9yIiwicmVzdWx0IiwiZXZhbHVhdGUiLCJkb2N1bWVudEVsZW1lbnQiLCJYUGF0aFJlc3VsdCIsIkZJUlNUX09SREVSRURfTk9ERV9UWVBFIiwic2luZ2xlTm9kZVZhbHVlIiwiZ2V0RWxlbWVudEJ5WHBhdGgiXSwibWFwcGluZ3MiOiI7O0FBQUEsU0FBU0EsVUFBVCxDQUFvQkMsR0FBcEIsRUFBd0I7QUFDcEIsV0FBT0EsR0FBUCxFQUFZO0FBQ1IsWUFBSUEsSUFBSUMsT0FBSixLQUFnQixLQUFwQixFQUEyQixPQUFPLElBQVA7QUFDM0JELGNBQU1BLElBQUlFLFVBQVY7QUFDSDtBQUNKOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCOztBQUViQyw0QkFBeUIsZ0NBQUNMLEdBQUQsRUFBUztBQUM5QixZQUFJTSxXQUFXQyxTQUFTQyxvQkFBVCxDQUE4QixHQUE5QixDQUFmO0FBQ0EsWUFBSUMsYUFBSjtBQUFBLFlBQVVDLFlBQVY7QUFBQSxZQUFlQyxVQUFmO0FBQUEsWUFBa0JDLFlBQWxCO0FBQ0EsYUFBS0gsT0FBTyxFQUFaLEVBQWdCVCxPQUFPQSxJQUFJYSxRQUFKLElBQWdCLENBQXZDLEVBQTBDYixNQUFNQSxJQUFJRSxVQUFwRCxFQUErRDtBQUMzRFUsa0JBQU1iLFdBQVdDLEdBQVgsQ0FBTjtBQUNBLGdCQUFJQSxJQUFJYyxZQUFKLENBQWlCLElBQWpCLElBQXlCLENBQUNGLEdBQTlCLEVBQW1DO0FBQy9CLG9CQUFJRyxnQkFBZ0IsQ0FBcEI7QUFDQSxxQkFBSyxJQUFJQyxJQUFFLENBQVgsRUFBYUEsSUFBSVYsU0FBU1csTUFBMUIsRUFBaUNELEdBQWpDLEVBQXNDO0FBQ2xDLHdCQUFJVixTQUFTVSxDQUFULEVBQVlGLFlBQVosQ0FBeUIsSUFBekIsS0FBa0NSLFNBQVNVLENBQVQsRUFBWUUsRUFBWixJQUFrQmxCLElBQUlrQixFQUE1RCxFQUFnRUg7QUFDaEUsd0JBQUlBLGdCQUFnQixDQUFwQixFQUF1QjtBQUMxQjtBQUNELG9CQUFLQSxpQkFBaUIsQ0FBdEIsRUFBeUI7QUFDckJOLHlCQUFLVSxPQUFMLENBQWEsU0FBU25CLElBQUlvQixZQUFKLENBQWlCLElBQWpCLENBQVQsR0FBa0MsSUFBL0M7QUFDQSwyQkFBT1gsS0FBS1ksSUFBTCxDQUFVLEdBQVYsQ0FBUDtBQUNILGlCQUhELE1BR087QUFDSFoseUJBQUtVLE9BQUwsQ0FBYW5CLElBQUlzQixTQUFKLENBQWNDLFdBQWQsS0FBOEIsUUFBOUIsR0FBeUN2QixJQUFJb0IsWUFBSixDQUFpQixJQUFqQixDQUF6QyxHQUFrRSxJQUEvRTtBQUNIO0FBQ0osYUFaRCxNQVlPLElBQUlwQixJQUFJYyxZQUFKLENBQWlCLE9BQWpCLEtBQTZCLENBQUNGLEdBQWxDLEVBQXVDO0FBQzFDSCxxQkFBS1UsT0FBTCxDQUFhbkIsSUFBSXNCLFNBQUosQ0FBY0MsV0FBZCxLQUE4QixXQUE5QixHQUE0Q3ZCLElBQUlvQixZQUFKLENBQWlCLE9BQWpCLENBQTVDLEdBQXdFLElBQXJGO0FBQ0gsYUFGTSxNQUVBO0FBQ0gscUJBQUtULElBQUksQ0FBSixFQUFPRCxNQUFNVixJQUFJd0IsZUFBdEIsRUFBdUNkLEdBQXZDLEVBQTRDQSxNQUFNQSxJQUFJYyxlQUF0RCxFQUF1RTtBQUNuRSx3QkFBSWQsSUFBSVksU0FBSixJQUFpQnRCLElBQUlzQixTQUF6QixFQUFxQ1g7QUFDeEM7QUFDRCxvQkFBR0MsR0FBSCxFQUFPO0FBQ0hILHlCQUFLVSxPQUFMLENBQWEsZUFBZW5CLElBQUlzQixTQUFKLENBQWNDLFdBQWQsRUFBZixHQUE2QyxLQUE3QyxHQUFxRFosQ0FBckQsR0FBeUQsR0FBdEU7QUFDSCxpQkFGRCxNQUVPO0FBQ0hGLHlCQUFLVSxPQUFMLENBQWFuQixJQUFJc0IsU0FBSixDQUFjQyxXQUFkLEtBQThCLEdBQTlCLEdBQW9DWixDQUFwQyxHQUF3QyxHQUFyRDtBQUNIO0FBRUo7QUFDSjtBQUNELGVBQU9GLEtBQUtRLE1BQUwsR0FBYyxNQUFNUixLQUFLWSxJQUFMLENBQVUsR0FBVixDQUFwQixHQUFxQyxJQUE1QztBQUNILEtBbENZOztBQW9DYkksMEJBQXVCLDhCQUFDQyxJQUFELEVBQVU7QUFDN0IsWUFBSUMsWUFBWSxJQUFJQyxjQUFKLEVBQWhCO0FBQ0EsWUFBSUMsU0FBU0YsVUFBVUcsUUFBVixDQUFtQkosSUFBbkIsRUFBeUJuQixTQUFTd0IsZUFBbEMsRUFBbUQsSUFBbkQsRUFBd0RDLFlBQVlDLHVCQUFwRSxFQUE2RixJQUE3RixDQUFiO0FBQ0EsZUFBUUosT0FBT0ssZUFBZjtBQUNILEtBeENZO0FBeUNiQyx1QkFBb0IsMkJBQUNULElBQUQsRUFBVTtBQUMxQixlQUFPbkIsU0FBU3VCLFFBQVQsQ0FBa0JKLElBQWxCLEVBQXdCbkIsUUFBeEIsRUFBa0MsSUFBbEMsRUFBd0N5QixZQUFZQyx1QkFBcEQsRUFBNkUsSUFBN0UsRUFBbUZDLGVBQTFGO0FBQ0g7O0FBM0NZLENBQWpCIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gaXNTVkdDaGlsZChlbG0pe1xuICAgIHdoaWxlIChlbG0pIHtcbiAgICAgICAgaWYgKGVsbS50YWdOYW1lID09PSAnc3ZnJykgcmV0dXJuIHRydWU7XG4gICAgICAgIGVsbSA9IGVsbS5wYXJlbnROb2RlO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBjcmVhdGVYUGF0aEZyb21FbGVtZW50IDogKGVsbSkgPT4ge1xuICAgICAgICBsZXQgYWxsTm9kZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnKicpO1xuICAgICAgICBsZXQgc2Vncywgc2liLCBpLCBzdmc7XG4gICAgICAgIGZvciAoc2VncyA9IFtdOyBlbG0gJiYgZWxtLm5vZGVUeXBlID09IDE7IGVsbSA9IGVsbS5wYXJlbnROb2RlKXtcbiAgICAgICAgICAgIHN2ZyA9IGlzU1ZHQ2hpbGQoZWxtKTtcbiAgICAgICAgICAgIGlmIChlbG0uaGFzQXR0cmlidXRlKCdpZCcpICYgIXN2Zykge1xuICAgICAgICAgICAgICAgIGxldCB1bmlxdWVJZENvdW50ID0gMDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBuPTA7biA8IGFsbE5vZGVzLmxlbmd0aDtuKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbE5vZGVzW25dLmhhc0F0dHJpYnV0ZSgnaWQnKSAmJiBhbGxOb2Rlc1tuXS5pZCA9PSBlbG0uaWQpIHVuaXF1ZUlkQ291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVuaXF1ZUlkQ291bnQgPiAxKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCB1bmlxdWVJZENvdW50ID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vncy51bnNoaWZ0KCdpZChcIicgKyBlbG0uZ2V0QXR0cmlidXRlKCdpZCcpICsgJ1wiKScpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vncy5qb2luKCcvJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2Vncy51bnNoaWZ0KGVsbS5sb2NhbE5hbWUudG9Mb3dlckNhc2UoKSArICdbQGlkPVwiJyArIGVsbS5nZXRBdHRyaWJ1dGUoJ2lkJykgKyAnXCJdJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbG0uaGFzQXR0cmlidXRlKCdjbGFzcycpICYmICFzdmcpIHtcbiAgICAgICAgICAgICAgICBzZWdzLnVuc2hpZnQoZWxtLmxvY2FsTmFtZS50b0xvd2VyQ2FzZSgpICsgJ1tAY2xhc3M9XCInICsgZWxtLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSArICdcIl0nKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMSwgc2liID0gZWxtLnByZXZpb3VzU2libGluZzsgc2liOyBzaWIgPSBzaWIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaWIubG9jYWxOYW1lID09IGVsbS5sb2NhbE5hbWUpICBpKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKHN2Zyl7XG4gICAgICAgICAgICAgICAgICAgIHNlZ3MudW5zaGlmdChcIipbbmFtZSgpPSdcIiArIGVsbS5sb2NhbE5hbWUudG9Mb3dlckNhc2UoKSArIFwiJ11bXCIgKyBpICsgJ10nKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWdzLnVuc2hpZnQoZWxtLmxvY2FsTmFtZS50b0xvd2VyQ2FzZSgpICsgJ1snICsgaSArICddJyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNlZ3MubGVuZ3RoID8gJy8nICsgc2Vncy5qb2luKCcvJykgOiBudWxsO1xuICAgIH0sXG5cbiAgICBsb29rdXBFbGVtZW50QnlYUGF0aCA6IChwYXRoKSA9PiB7XG4gICAgICAgIGxldCBldmFsdWF0b3IgPSBuZXcgWFBhdGhFdmFsdWF0b3IoKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGV2YWx1YXRvci5ldmFsdWF0ZShwYXRoLCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsIG51bGwsWFBhdGhSZXN1bHQuRklSU1RfT1JERVJFRF9OT0RFX1RZUEUsIG51bGwpO1xuICAgICAgICByZXR1cm4gIHJlc3VsdC5zaW5nbGVOb2RlVmFsdWU7XG4gICAgfSxcbiAgICBnZXRFbGVtZW50QnlYcGF0aCA6IChwYXRoKSA9PiB7XG4gICAgICAgIHJldHVybiBkb2N1bWVudC5ldmFsdWF0ZShwYXRoLCBkb2N1bWVudCwgbnVsbCwgWFBhdGhSZXN1bHQuRklSU1RfT1JERVJFRF9OT0RFX1RZUEUsIG51bGwpLnNpbmdsZU5vZGVWYWx1ZTtcbiAgICB9XG5cbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3V0aWxzL3hwYXRoLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vffData = __webpack_require__(2);\n\nfunction pages(data) {\n    _vffData.vffData.addPages(data);\n}\n\nmodule.exports = {\n    pages: pages\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9oYW5kbGVycy9wYWdlc0hhbmRsZXIuanM/MGY5MCJdLCJuYW1lcyI6WyJwYWdlcyIsImRhdGEiLCJ2ZmZEYXRhIiwiYWRkUGFnZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLFNBQVNBLEtBQVQsQ0FBZUMsSUFBZixFQUFxQjtBQUNqQkMscUJBQVFDLFFBQVIsQ0FBaUJGLElBQWpCO0FBQ0g7O0FBRURHLE9BQU9DLE9BQVAsR0FBaUI7QUFDYkwsV0FBUUE7QUFESyxDQUFqQiIsImZpbGUiOiIxNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dmZmRGF0YX0gZnJvbSAnLi4vdmZmRGF0YS5qcyc7XG5cbmZ1bmN0aW9uIHBhZ2VzKGRhdGEpIHtcbiAgICB2ZmZEYXRhLmFkZFBhZ2VzKGRhdGEpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBwYWdlcyA6IHBhZ2VzXG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29yZS9oYW5kbGVycy9wYWdlc0hhbmRsZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vffData = __webpack_require__(2);\n\nfunction queryParams(data) {\n    _vffData.vffData.addQueryParams(data);\n}\n\nmodule.exports = {\n    queryParams: queryParams\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9oYW5kbGVycy9xdWVyeVBhcmFtc0hhbmRsZXIuanM/M2I5MiJdLCJuYW1lcyI6WyJxdWVyeVBhcmFtcyIsImRhdGEiLCJ2ZmZEYXRhIiwiYWRkUXVlcnlQYXJhbXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBLFNBQVNBLFdBQVQsQ0FBcUJDLElBQXJCLEVBQTJCO0FBQ3ZCQyxxQkFBUUMsY0FBUixDQUF1QkYsSUFBdkI7QUFDSDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNiTCxpQkFBY0E7QUFERCxDQUFqQiIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dmZmRGF0YX0gZnJvbSAnLi4vdmZmRGF0YS5qcyc7XG5cbmZ1bmN0aW9uIHF1ZXJ5UGFyYW1zKGRhdGEpIHtcbiAgICB2ZmZEYXRhLmFkZFF1ZXJ5UGFyYW1zKGRhdGEpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBxdWVyeVBhcmFtcyA6IHF1ZXJ5UGFyYW1zXG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29yZS9oYW5kbGVycy9xdWVyeVBhcmFtc0hhbmRsZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction reload() {\n    window.location.reload();\n}\n\nmodule.exports = {\n    reload: reload\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9oYW5kbGVycy9yZWxvYWRIYW5kbGVyLmpzP2NlNjQiXSwibmFtZXMiOlsicmVsb2FkIiwid2luZG93IiwibG9jYXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUVBLFNBQVNBLE1BQVQsR0FBa0I7QUFDZEMsV0FBT0MsUUFBUCxDQUFnQkYsTUFBaEI7QUFDSDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNiSixZQUFTQTtBQURJLENBQWpCIiwiZmlsZSI6IjE5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5cbmZ1bmN0aW9uIHJlbG9hZCgpIHtcbiAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHJlbG9hZCA6IHJlbG9hZFxufTtcblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvcmUvaGFuZGxlcnMvcmVsb2FkSGFuZGxlci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _updateHandler = __webpack_require__(8);\n\nvar _webrtc = __webpack_require__(21);\n\nvar _webrtc2 = _interopRequireDefault(_webrtc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction handleVFData(data) {\n    if (data.settings.sync && !window.webrtc) {\n        // window.webrtc.close();\n        window.webrtc = new _webrtc2.default(data.token, 'sync', {\n            onMessage: function onMessage(message) {\n                (0, _updateHandler.updateInteraction)(message);\n            }\n        });\n    }\n}\n\nmodule.exports = {\n    handleVFData: handleVFData\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9oYW5kbGVycy92ZkRhdGFIYW5kbGVyLmpzP2UwZDkiXSwibmFtZXMiOlsiaGFuZGxlVkZEYXRhIiwiZGF0YSIsInNldHRpbmdzIiwic3luYyIsIndpbmRvdyIsIndlYnJ0YyIsIldlYlJUQyIsInRva2VuIiwib25NZXNzYWdlIiwibWVzc2FnZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7OztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTRCO0FBQ3hCLFFBQUdBLEtBQUtDLFFBQUwsQ0FBY0MsSUFBZCxJQUFzQixDQUFDQyxPQUFPQyxNQUFqQyxFQUF5QztBQUNyQztBQUNBRCxlQUFPQyxNQUFQLEdBQWdCLElBQUlDLGdCQUFKLENBQVdMLEtBQUtNLEtBQWhCLEVBQXVCLE1BQXZCLEVBQStCO0FBQzNDQyx1QkFBVyxtQkFBVUMsT0FBVixFQUFtQjtBQUMxQixzREFBa0JBLE9BQWxCO0FBQ0g7QUFIMEMsU0FBL0IsQ0FBaEI7QUFLSDtBQUVKOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JYLGtCQUFlQTtBQURGLENBQWpCIiwiZmlsZSI6IjIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt1cGRhdGVJbnRlcmFjdGlvbn0gZnJvbSAnLi91cGRhdGVIYW5kbGVyJztcbmltcG9ydCBXZWJSVEMgZnJvbSAnLi4vd2VicnRjL3dlYnJ0Yyc7XG5cbmZ1bmN0aW9uIGhhbmRsZVZGRGF0YShkYXRhKSB7XG4gICAgaWYoZGF0YS5zZXR0aW5ncy5zeW5jICYmICF3aW5kb3cud2VicnRjKSB7XG4gICAgICAgIC8vIHdpbmRvdy53ZWJydGMuY2xvc2UoKTtcbiAgICAgICAgd2luZG93LndlYnJ0YyA9IG5ldyBXZWJSVEMoZGF0YS50b2tlbiwgJ3N5bmMnLCB7XG4gICAgICAgICAgICBvbk1lc3NhZ2U6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgdXBkYXRlSW50ZXJhY3Rpb24obWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBoYW5kbGVWRkRhdGEgOiBoYW5kbGVWRkRhdGFcbn07XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb3JlL2hhbmRsZXJzL3ZmRGF0YUhhbmRsZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SimpleWebRTC = __webpack_require__(22);\nvar noop = function noop() {};\nvar defaults = {\n    signalingServer: \"https://rtc.videoflow.io\",\n    maxParticipants: 5,\n    onVideoAdded: noop,\n    onVideoRemoved: noop,\n    onMessage: noop,\n    onCreatedPeer: noop\n};\n\nvar WebRTC = function () {\n    function WebRTC(room, target, options) {\n        _classCallCheck(this, WebRTC);\n\n        this.options = Object.assign({}, defaults, options || {});\n        this.connected = false;\n        this.room = room;\n        this.target = target;\n        this.init();\n    }\n\n    _createClass(WebRTC, [{\n        key: 'init',\n        value: function init() {\n            var self = this;\n\n            self.webrtc = new SimpleWebRTC({\n                // target: this.target,\n                url: this.options.signalingServer,\n                stunServer: [{ urls: 'stun:stun.l.google.com:19302' }, {\n                    username: 'user',\n                    credential: 'pass',\n                    urls: 'turn:54.198.120.75:3478'\n                }],\n                localVideoEl: '',\n                remoteVideosEl: '',\n                autoRequestMedia: false,\n                debug: false,\n                detectSpeakingEvents: true,\n                autoAdjustMic: false\n            });\n\n            self.webrtc.on('readyToCall', function () {\n                // console.log('Client StrongID', self.webrtc.connection.connection.id);\n                self.webrtc.setInfo('vf' + Math.random().toString().substr(2), self.webrtc.connection.connection.id, ''); // Store strongId\n\n                if (self.room) {\n                    self.webrtc.joinRoom(self.room, function (err, room) {\n                        var participants = Object.keys(room.clients);\n                        if (participants.length + 1 > self.options.maxParticipants) {\n                            self.close();\n                        }\n                    });\n                    // self.webrtc.createRoom(self.room, function(){\n                    //     self.webrtc.joinRoom(self.room);\n                    // });\n                }\n            });\n\n            self.webrtc.on('joinedRoom', function () /*room*/{\n                // console.log('WebRTC - Joined Room: ' + room);\n            });\n\n            //Handle incoming video from target peer\n            self.webrtc.on('videoAdded', function (video, peer) {\n                // console.log('WebRTC - Video added');\n                self.options.onVideoAdded(video, peer);\n            });\n\n            //Handle removing video by target peer\n            self.webrtc.on('videoRemoved', function (video, peer) {\n                // console.log('WebRTC - Video removed');\n                if (peer.id === self.target || peer.strongId === self.target || peer.nickName === self.target) {\n                    self.options.onVideoRemoved(video, peer);\n                }\n            });\n\n            self.webrtc.on('createdPeer', function (peer) {\n                // window.console.log('WebRTC - Peer Created');\n                self.options.onCreatedPeer(peer);\n            });\n\n            self.webrtc.on('channelMessage', function (peer, label, data) {\n                // console.log('WebRTC - Channel message');\n                if (data.type === 'custommessage') {\n                    var msg = JSON.parse(data.payload);\n                    self.options.onMessage(msg);\n                }\n            });\n        }\n    }, {\n        key: 'close',\n        value: function close() {\n            try {\n                if (this.webrtc.connection) {\n                    this.webrtc.leaveRoom();\n                    this.webrtc.disconnect();\n                }\n            } catch (err) {/**/}\n        }\n    }, {\n        key: 'send',\n        value: function send(data) {\n            this.webrtc.sendDirectlyToAll(this.target, 'custommessage', JSON.stringify(data));\n        }\n    }]);\n\n    return WebRTC;\n}();\n\nexports.default = WebRTC;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;var _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};(function(f){if(( false?\"undefined\":_typeof(exports))===\"object\"&&typeof module!==\"undefined\"){module.exports=f();}else if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else{var g;if(typeof window!==\"undefined\"){g=window;}else if(typeof global!==\"undefined\"){g=global;}else if(typeof self!==\"undefined\"){g=self;}else{g=this;}g.adapter=f();}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f;}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++){s(r[o]);}return s;}({1:[function(require,module,exports){/* eslint-env node */'use strict';// SDP helpers.\nvar SDPUtils={};// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier=function(){return Math.random().toString(36).substr(2,10);};// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName=SDPUtils.generateIdentifier();// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines=function(blob){return blob.trim().split('\\n').map(function(line){return line.trim();});};// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections=function(blob){var parts=blob.split('\\nm=');return parts.map(function(part,index){return(index>0?'m='+part:part).trim()+'\\r\\n';});};// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix=function(blob,prefix){return SDPUtils.splitLines(blob).filter(function(line){return line.indexOf(prefix)===0;});};// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate=function(line){var parts;// Parse both variants.\nif(line.indexOf('a=candidate:')===0){parts=line.substring(12).split(' ');}else{parts=line.substring(10).split(' ');}var candidate={foundation:parts[0],component:parseInt(parts[1],10),protocol:parts[2].toLowerCase(),priority:parseInt(parts[3],10),ip:parts[4],port:parseInt(parts[5],10),// skip parts[6] == 'typ'\ntype:parts[7]};for(var i=8;i<parts.length;i+=2){switch(parts[i]){case'raddr':candidate.relatedAddress=parts[i+1];break;case'rport':candidate.relatedPort=parseInt(parts[i+1],10);break;case'tcptype':candidate.tcpType=parts[i+1];break;default:// extension handling, in particular ufrag\ncandidate[parts[i]]=parts[i+1];break;}}return candidate;};// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate=function(candidate){var sdp=[];sdp.push(candidate.foundation);sdp.push(candidate.component);sdp.push(candidate.protocol.toUpperCase());sdp.push(candidate.priority);sdp.push(candidate.ip);sdp.push(candidate.port);var type=candidate.type;sdp.push('typ');sdp.push(type);if(type!=='host'&&candidate.relatedAddress&&candidate.relatedPort){sdp.push('raddr');sdp.push(candidate.relatedAddress);// was: relAddr\nsdp.push('rport');sdp.push(candidate.relatedPort);// was: relPort\n}if(candidate.tcpType&&candidate.protocol.toLowerCase()==='tcp'){sdp.push('tcptype');sdp.push(candidate.tcpType);}return'candidate:'+sdp.join(' ');};// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions=function(line){return line.substr(14).split(' ');};// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap=function(line){var parts=line.substr(9).split(' ');var parsed={payloadType:parseInt(parts.shift(),10)// was: id\n};parts=parts[0].split('/');parsed.name=parts[0];parsed.clockRate=parseInt(parts[1],10);// was: clockrate\n// was: channels\nparsed.numChannels=parts.length===3?parseInt(parts[2],10):1;return parsed;};// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap=function(codec){var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}return'a=rtpmap:'+pt+' '+codec.name+'/'+codec.clockRate+(codec.numChannels!==1?'/'+codec.numChannels:'')+'\\r\\n';};// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap=function(line){var parts=line.substr(9).split(' ');return{id:parseInt(parts[0],10),direction:parts[0].indexOf('/')>0?parts[0].split('/')[1]:'sendrecv',uri:parts[1]};};// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap=function(headerExtension){return'a=extmap:'+(headerExtension.id||headerExtension.preferredId)+(headerExtension.direction&&headerExtension.direction!=='sendrecv'?'/'+headerExtension.direction:'')+' '+headerExtension.uri+'\\r\\n';};// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp=function(line){var parsed={};var kv;var parts=line.substr(line.indexOf(' ')+1).split(';');for(var j=0;j<parts.length;j++){kv=parts[j].trim().split('=');parsed[kv[0].trim()]=kv[1];}return parsed;};// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp=function(codec){var line='';var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.parameters&&Object.keys(codec.parameters).length){var params=[];Object.keys(codec.parameters).forEach(function(param){params.push(param+'='+codec.parameters[param]);});line+='a=fmtp:'+pt+' '+params.join(';')+'\\r\\n';}return line;};// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb=function(line){var parts=line.substr(line.indexOf(' ')+1).split(' ');return{type:parts.shift(),parameter:parts.join(' ')};};// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb=function(codec){var lines='';var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.rtcpFeedback&&codec.rtcpFeedback.length){// FIXME: special handling for trr-int?\ncodec.rtcpFeedback.forEach(function(fb){lines+='a=rtcp-fb:'+pt+' '+fb.type+(fb.parameter&&fb.parameter.length?' '+fb.parameter:'')+'\\r\\n';});}return lines;};// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia=function(line){var sp=line.indexOf(' ');var parts={ssrc:parseInt(line.substr(7,sp-7),10)};var colon=line.indexOf(':',sp);if(colon>-1){parts.attribute=line.substr(sp+1,colon-sp-1);parts.value=line.substr(colon+1);}else{parts.attribute=line.substr(sp+1);}return parts;};// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid=function(mediaSection){var mid=SDPUtils.matchPrefix(mediaSection,'a=mid:')[0];if(mid){return mid.substr(6);}};SDPUtils.parseFingerprint=function(line){var parts=line.substr(14).split(' ');return{algorithm:parts[0].toLowerCase(),// algorithm is case-sensitive in Edge.\nvalue:parts[1]};};// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters=function(mediaSection,sessionpart){var lines=SDPUtils.matchPrefix(mediaSection+sessionpart,'a=fingerprint:');// Note: a=setup line is ignored since we use the 'auto' role.\n// Note2: 'algorithm' is not case sensitive except in Edge.\nreturn{role:'auto',fingerprints:lines.map(SDPUtils.parseFingerprint)};};// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters=function(params,setupType){var sdp='a=setup:'+setupType+'\\r\\n';params.fingerprints.forEach(function(fp){sdp+='a=fingerprint:'+fp.algorithm+' '+fp.value+'\\r\\n';});return sdp;};// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters=function(mediaSection,sessionpart){var lines=SDPUtils.splitLines(mediaSection);// Search in session part, too.\nlines=lines.concat(SDPUtils.splitLines(sessionpart));var iceParameters={usernameFragment:lines.filter(function(line){return line.indexOf('a=ice-ufrag:')===0;})[0].substr(12),password:lines.filter(function(line){return line.indexOf('a=ice-pwd:')===0;})[0].substr(10)};return iceParameters;};// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters=function(params){return'a=ice-ufrag:'+params.usernameFragment+'\\r\\n'+'a=ice-pwd:'+params.password+'\\r\\n';};// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters=function(mediaSection){var description={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]};var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(' ');for(var i=3;i<mline.length;i++){// find all codecs from mline[3..]\nvar pt=mline[i];var rtpmapline=SDPUtils.matchPrefix(mediaSection,'a=rtpmap:'+pt+' ')[0];if(rtpmapline){var codec=SDPUtils.parseRtpMap(rtpmapline);var fmtps=SDPUtils.matchPrefix(mediaSection,'a=fmtp:'+pt+' ');// Only the first a=fmtp:<pt> is considered.\ncodec.parameters=fmtps.length?SDPUtils.parseFmtp(fmtps[0]):{};codec.rtcpFeedback=SDPUtils.matchPrefix(mediaSection,'a=rtcp-fb:'+pt+' ').map(SDPUtils.parseRtcpFb);description.codecs.push(codec);// parse FEC mechanisms from rtpmap lines.\nswitch(codec.name.toUpperCase()){case'RED':case'ULPFEC':description.fecMechanisms.push(codec.name.toUpperCase());break;default:// only RED and ULPFEC are recognized as FEC mechanisms.\nbreak;}}}SDPUtils.matchPrefix(mediaSection,'a=extmap:').forEach(function(line){description.headerExtensions.push(SDPUtils.parseExtmap(line));});// FIXME: parse rtcp.\nreturn description;};// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription=function(kind,caps){var sdp='';// Build the mline.\nsdp+='m='+kind+' ';sdp+=caps.codecs.length>0?'9':'0';// reject if no codecs.\nsdp+=' UDP/TLS/RTP/SAVPF ';sdp+=caps.codecs.map(function(codec){if(codec.preferredPayloadType!==undefined){return codec.preferredPayloadType;}return codec.payloadType;}).join(' ')+'\\r\\n';sdp+='c=IN IP4 0.0.0.0\\r\\n';sdp+='a=rtcp:9 IN IP4 0.0.0.0\\r\\n';// Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\ncaps.codecs.forEach(function(codec){sdp+=SDPUtils.writeRtpMap(codec);sdp+=SDPUtils.writeFmtp(codec);sdp+=SDPUtils.writeRtcpFb(codec);});var maxptime=0;caps.codecs.forEach(function(codec){if(codec.maxptime>maxptime){maxptime=codec.maxptime;}});if(maxptime>0){sdp+='a=maxptime:'+maxptime+'\\r\\n';}sdp+='a=rtcp-mux\\r\\n';caps.headerExtensions.forEach(function(extension){sdp+=SDPUtils.writeExtmap(extension);});// FIXME: write fecMechanisms.\nreturn sdp;};// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters=function(mediaSection){var encodingParameters=[];var description=SDPUtils.parseRtpParameters(mediaSection);var hasRed=description.fecMechanisms.indexOf('RED')!==-1;var hasUlpfec=description.fecMechanisms.indexOf('ULPFEC')!==-1;// filter a=ssrc:... cname:, ignore PlanB-msid\nvar ssrcs=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(parts){return parts.attribute==='cname';});var primarySsrc=ssrcs.length>0&&ssrcs[0].ssrc;var secondarySsrc;var flows=SDPUtils.matchPrefix(mediaSection,'a=ssrc-group:FID').map(function(line){var parts=line.split(' ');parts.shift();return parts.map(function(part){return parseInt(part,10);});});if(flows.length>0&&flows[0].length>1&&flows[0][0]===primarySsrc){secondarySsrc=flows[0][1];}description.codecs.forEach(function(codec){if(codec.name.toUpperCase()==='RTX'&&codec.parameters.apt){var encParam={ssrc:primarySsrc,codecPayloadType:parseInt(codec.parameters.apt,10),rtx:{ssrc:secondarySsrc}};encodingParameters.push(encParam);if(hasRed){encParam=JSON.parse(JSON.stringify(encParam));encParam.fec={ssrc:secondarySsrc,mechanism:hasUlpfec?'red+ulpfec':'red'};encodingParameters.push(encParam);}}});if(encodingParameters.length===0&&primarySsrc){encodingParameters.push({ssrc:primarySsrc});}// we support both b=AS and b=TIAS but interpret AS as TIAS.\nvar bandwidth=SDPUtils.matchPrefix(mediaSection,'b=');if(bandwidth.length){if(bandwidth[0].indexOf('b=TIAS:')===0){bandwidth=parseInt(bandwidth[0].substr(7),10);}else if(bandwidth[0].indexOf('b=AS:')===0){bandwidth=parseInt(bandwidth[0].substr(5),10);}encodingParameters.forEach(function(params){params.maxBitrate=bandwidth;});}return encodingParameters;};// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters=function(mediaSection){var rtcpParameters={};var cname;// Gets the first SSRC. Note that with RTX there might be multiple\n// SSRCs.\nvar remoteSsrc=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(obj){return obj.attribute==='cname';})[0];if(remoteSsrc){rtcpParameters.cname=remoteSsrc.value;rtcpParameters.ssrc=remoteSsrc.ssrc;}// Edge uses the compound attribute instead of reducedSize\n// compound is !reducedSize\nvar rsize=SDPUtils.matchPrefix(mediaSection,'a=rtcp-rsize');rtcpParameters.reducedSize=rsize.length>0;rtcpParameters.compound=rsize.length===0;// parses the rtcp-mux attrіbute.\n// Note that Edge does not support unmuxed RTCP.\nvar mux=SDPUtils.matchPrefix(mediaSection,'a=rtcp-mux');rtcpParameters.mux=mux.length>0;return rtcpParameters;};// parses either a=msid: or a=ssrc:... msid lines an returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid=function(mediaSection){var parts;var spec=SDPUtils.matchPrefix(mediaSection,'a=msid:');if(spec.length===1){parts=spec[0].substr(7).split(' ');return{stream:parts[0],track:parts[1]};}var planB=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(parts){return parts.attribute==='msid';});if(planB.length>0){parts=planB[0].value.split(' ');return{stream:parts[0],track:parts[1]};}};SDPUtils.writeSessionBoilerplate=function(){// FIXME: sess-id should be an NTP timestamp.\nreturn'v=0\\r\\n'+'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\\r\\n'+'s=-\\r\\n'+'t=0 0\\r\\n';};SDPUtils.writeMediaSection=function(transceiver,caps,type,stream){var sdp=SDPUtils.writeRtpDescription(transceiver.kind,caps);// Map ICE parameters (ufrag, pwd) to SDP.\nsdp+=SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters());// Map DTLS parameters to SDP.\nsdp+=SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(),type==='offer'?'actpass':'active');sdp+='a=mid:'+transceiver.mid+'\\r\\n';if(transceiver.direction){sdp+='a='+transceiver.direction+'\\r\\n';}else if(transceiver.rtpSender&&transceiver.rtpReceiver){sdp+='a=sendrecv\\r\\n';}else if(transceiver.rtpSender){sdp+='a=sendonly\\r\\n';}else if(transceiver.rtpReceiver){sdp+='a=recvonly\\r\\n';}else{sdp+='a=inactive\\r\\n';}if(transceiver.rtpSender){// spec.\nvar msid='msid:'+stream.id+' '+transceiver.rtpSender.track.id+'\\r\\n';sdp+='a='+msid;// for Chrome.\nsdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].ssrc+' '+msid;if(transceiver.sendEncodingParameters[0].rtx){sdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].rtx.ssrc+' '+msid;sdp+='a=ssrc-group:FID '+transceiver.sendEncodingParameters[0].ssrc+' '+transceiver.sendEncodingParameters[0].rtx.ssrc+'\\r\\n';}}// FIXME: this should be written by writeRtpDescription.\nsdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].ssrc+' cname:'+SDPUtils.localCName+'\\r\\n';if(transceiver.rtpSender&&transceiver.sendEncodingParameters[0].rtx){sdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].rtx.ssrc+' cname:'+SDPUtils.localCName+'\\r\\n';}return sdp;};// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection=function(mediaSection,sessionpart){// Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\nvar lines=SDPUtils.splitLines(mediaSection);for(var i=0;i<lines.length;i++){switch(lines[i]){case'a=sendrecv':case'a=sendonly':case'a=recvonly':case'a=inactive':return lines[i].substr(2);default:// FIXME: What should happen here?\n}}if(sessionpart){return SDPUtils.getDirection(sessionpart);}return'sendrecv';};SDPUtils.getKind=function(mediaSection){var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(' ');return mline[0].substr(2);};SDPUtils.isRejected=function(mediaSection){return mediaSection.split(' ',2)[1]==='0';};// Expose public methods.\nmodule.exports=SDPUtils;},{}],2:[function(require,module,exports){(function(global){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var adapterFactory=require('./adapter_factory.js');module.exports=adapterFactory({window:global.window});}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./adapter_factory.js\":3}],3:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';// Shimming starts here.\nmodule.exports=function(dependencies){var window=dependencies&&dependencies.window;// Utils.\nvar utils=require('./utils');var logging=utils.log;var browserDetails=utils.detectBrowser(window);// Export to the adapter global object visible in the browser.\nvar adapter={browserDetails:browserDetails,extractVersion:utils.extractVersion,disableLog:utils.disableLog};// Uncomment the line below if you want logging to occur, including logging\n// for the switch statement below. Can also be turned on in the browser via\n// adapter.disableLog(false), but then logging from the switch statement below\n// will not appear.\n// require('./utils').disableLog(false);\n// Browser shims.\nvar chromeShim=require('./chrome/chrome_shim')||null;var edgeShim=require('./edge/edge_shim')||null;var firefoxShim=require('./firefox/firefox_shim')||null;var safariShim=require('./safari/safari_shim')||null;// Shim browser if found.\nswitch(browserDetails.browser){case'chrome':if(!chromeShim||!chromeShim.shimPeerConnection){logging('Chrome shim is not included in this adapter release.');return adapter;}logging('adapter.js shimming chrome.');// Export to the adapter global object visible in the browser.\nadapter.browserShim=chromeShim;chromeShim.shimGetUserMedia(window);chromeShim.shimMediaStream(window);utils.shimCreateObjectURL(window);chromeShim.shimSourceObject(window);chromeShim.shimPeerConnection(window);chromeShim.shimOnTrack(window);chromeShim.shimGetSendersWithDtmf(window);break;case'firefox':if(!firefoxShim||!firefoxShim.shimPeerConnection){logging('Firefox shim is not included in this adapter release.');return adapter;}logging('adapter.js shimming firefox.');// Export to the adapter global object visible in the browser.\nadapter.browserShim=firefoxShim;firefoxShim.shimGetUserMedia(window);utils.shimCreateObjectURL(window);firefoxShim.shimSourceObject(window);firefoxShim.shimPeerConnection(window);firefoxShim.shimOnTrack(window);break;case'edge':if(!edgeShim||!edgeShim.shimPeerConnection){logging('MS edge shim is not included in this adapter release.');return adapter;}logging('adapter.js shimming edge.');// Export to the adapter global object visible in the browser.\nadapter.browserShim=edgeShim;edgeShim.shimGetUserMedia(window);utils.shimCreateObjectURL(window);edgeShim.shimPeerConnection(window);edgeShim.shimReplaceTrack(window);break;case'safari':if(!safariShim){logging('Safari shim is not included in this adapter release.');return adapter;}logging('adapter.js shimming safari.');// Export to the adapter global object visible in the browser.\nadapter.browserShim=safariShim;safariShim.shimCallbacksAPI(window);safariShim.shimAddStream(window);safariShim.shimOnAddStream(window);safariShim.shimGetUserMedia(window);break;default:logging('Unsupported browser!');break;}return adapter;};},{\"./chrome/chrome_shim\":4,\"./edge/edge_shim\":6,\"./firefox/firefox_shim\":9,\"./safari/safari_shim\":11,\"./utils\":12}],4:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var utils=require('../utils.js');var logging=utils.log;var chromeShim={shimMediaStream:function shimMediaStream(window){window.MediaStream=window.MediaStream||window.webkitMediaStream;},shimOnTrack:function shimOnTrack(window){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.RTCPeerConnection&&!('ontrack'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'ontrack',{get:function get(){return this._ontrack;},set:function set(f){var self=this;if(this._ontrack){this.removeEventListener('track',this._ontrack);this.removeEventListener('addstream',this._ontrackpoly);}this.addEventListener('track',this._ontrack=f);this.addEventListener('addstream',this._ontrackpoly=function(e){// onaddstream does not fire when a track is added to an existing\n// stream. But stream.onaddtrack is implemented so we use that.\ne.stream.addEventListener('addtrack',function(te){var receiver;if(window.RTCPeerConnection.prototype.getReceivers){receiver=self.getReceivers().find(function(r){return r.track.id===te.track.id;});}else{receiver={track:te.track};}var event=new Event('track');event.track=te.track;event.receiver=receiver;event.streams=[e.stream];self.dispatchEvent(event);});e.stream.getTracks().forEach(function(track){var receiver;if(window.RTCPeerConnection.prototype.getReceivers){receiver=self.getReceivers().find(function(r){return r.track.id===track.id;});}else{receiver={track:track};}var event=new Event('track');event.track=track;event.receiver=receiver;event.streams=[e.stream];this.dispatchEvent(event);}.bind(this));}.bind(this));}});}},shimGetSendersWithDtmf:function shimGetSendersWithDtmf(window){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.RTCPeerConnection&&!('getSenders'in window.RTCPeerConnection.prototype)&&'createDTMFSender'in window.RTCPeerConnection.prototype){window.RTCPeerConnection.prototype.getSenders=function(){return this._senders||[];};var origAddStream=window.RTCPeerConnection.prototype.addStream;var origRemoveStream=window.RTCPeerConnection.prototype.removeStream;if(!window.RTCPeerConnection.prototype.addTrack){window.RTCPeerConnection.prototype.addTrack=function(track,stream){var pc=this;if(pc.signalingState==='closed'){throw new DOMException('The RTCPeerConnection\\'s signalingState is \\'closed\\'.','InvalidStateError');}var streams=[].slice.call(arguments,1);if(streams.length!==1||!streams[0].getTracks().find(function(t){return t===track;})){// this is not fully correct but all we can manage without\n// [[associated MediaStreams]] internal slot.\nthrow new DOMException('The adapter.js addTrack polyfill only supports a single '+' stream which is associated with the specified track.','NotSupportedError');}pc._senders=pc._senders||[];var alreadyExists=pc._senders.find(function(t){return t.track===track;});if(alreadyExists){throw new DOMException('Track already exists.','InvalidAccessError');}pc._streams=pc._streams||{};var oldStream=pc._streams[stream.id];if(oldStream){oldStream.addTrack(track);pc.removeStream(oldStream);pc.addStream(oldStream);}else{var newStream=new window.MediaStream([track]);pc._streams[stream.id]=newStream;pc.addStream(newStream);}var sender={track:track,get dtmf(){if(this._dtmf===undefined){if(track.kind==='audio'){this._dtmf=pc.createDTMFSender(track);}else{this._dtmf=null;}}return this._dtmf;}};pc._senders.push(sender);return sender;};}window.RTCPeerConnection.prototype.addStream=function(stream){var pc=this;pc._senders=pc._senders||[];origAddStream.apply(pc,[stream]);stream.getTracks().forEach(function(track){pc._senders.push({track:track,get dtmf(){if(this._dtmf===undefined){if(track.kind==='audio'){this._dtmf=pc.createDTMFSender(track);}else{this._dtmf=null;}}return this._dtmf;}});});};window.RTCPeerConnection.prototype.removeStream=function(stream){var pc=this;pc._senders=pc._senders||[];origRemoveStream.apply(pc,[stream]);stream.getTracks().forEach(function(track){var sender=pc._senders.find(function(s){return s.track===track;});if(sender){pc._senders.splice(pc._senders.indexOf(sender),1);// remove sender\n}});};}},shimSourceObject:function shimSourceObject(window){var URL=window&&window.URL;if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'){if(window.HTMLMediaElement&&!('srcObject'in window.HTMLMediaElement.prototype)){// Shim the srcObject property, once, when HTMLMediaElement is found.\nObject.defineProperty(window.HTMLMediaElement.prototype,'srcObject',{get:function get(){return this._srcObject;},set:function set(stream){var self=this;// Use _srcObject as a private property for this shim\nthis._srcObject=stream;if(this.src){URL.revokeObjectURL(this.src);}if(!stream){this.src='';return undefined;}this.src=URL.createObjectURL(stream);// We need to recreate the blob url when a track is added or\n// removed. Doing it manually since we want to avoid a recursion.\nstream.addEventListener('addtrack',function(){if(self.src){URL.revokeObjectURL(self.src);}self.src=URL.createObjectURL(stream);});stream.addEventListener('removetrack',function(){if(self.src){URL.revokeObjectURL(self.src);}self.src=URL.createObjectURL(stream);});}});}}},shimPeerConnection:function shimPeerConnection(window){var browserDetails=utils.detectBrowser(window);// The RTCPeerConnection object.\nif(!window.RTCPeerConnection){window.RTCPeerConnection=function(pcConfig,pcConstraints){// Translate iceTransportPolicy to iceTransports,\n// see https://code.google.com/p/webrtc/issues/detail?id=4869\n// this was fixed in M56 along with unprefixing RTCPeerConnection.\nlogging('PeerConnection');if(pcConfig&&pcConfig.iceTransportPolicy){pcConfig.iceTransports=pcConfig.iceTransportPolicy;}return new window.webkitRTCPeerConnection(pcConfig,pcConstraints);};window.RTCPeerConnection.prototype=window.webkitRTCPeerConnection.prototype;// wrap static methods. Currently just generateCertificate.\nif(window.webkitRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,'generateCertificate',{get:function get(){return window.webkitRTCPeerConnection.generateCertificate;}});}}else{// migrate from non-spec RTCIceServer.url to RTCIceServer.urls\nvar OrigPeerConnection=window.RTCPeerConnection;window.RTCPeerConnection=function(pcConfig,pcConstraints){if(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(!server.hasOwnProperty('urls')&&server.hasOwnProperty('url')){console.warn('RTCIceServer.url is deprecated! Use urls instead.');server=JSON.parse(JSON.stringify(server));server.urls=server.url;newIceServers.push(server);}else{newIceServers.push(pcConfig.iceServers[i]);}}pcConfig.iceServers=newIceServers;}return new OrigPeerConnection(pcConfig,pcConstraints);};window.RTCPeerConnection.prototype=OrigPeerConnection.prototype;// wrap static methods. Currently just generateCertificate.\nObject.defineProperty(window.RTCPeerConnection,'generateCertificate',{get:function get(){return OrigPeerConnection.generateCertificate;}});}var origGetStats=window.RTCPeerConnection.prototype.getStats;window.RTCPeerConnection.prototype.getStats=function(selector,successCallback,errorCallback){var self=this;var args=arguments;// If selector is a function then we are in the old style stats so just\n// pass back the original getStats format to avoid breaking old users.\nif(arguments.length>0&&typeof selector==='function'){return origGetStats.apply(this,arguments);}// When spec-style getStats is supported, return those when called with\n// either no arguments or the selector argument is null.\nif(origGetStats.length===0&&(arguments.length===0||typeof arguments[0]!=='function')){return origGetStats.apply(this,[]);}var fixChromeStats_=function fixChromeStats_(response){var standardReport={};var reports=response.result();reports.forEach(function(report){var standardStats={id:report.id,timestamp:report.timestamp,type:{localcandidate:'local-candidate',remotecandidate:'remote-candidate'}[report.type]||report.type};report.names().forEach(function(name){standardStats[name]=report.stat(name);});standardReport[standardStats.id]=standardStats;});return standardReport;};// shim getStats with maplike support\nvar makeMapStats=function makeMapStats(stats){return new Map(Object.keys(stats).map(function(key){return[key,stats[key]];}));};if(arguments.length>=2){var successCallbackWrapper_=function successCallbackWrapper_(response){args[1](makeMapStats(fixChromeStats_(response)));};return origGetStats.apply(this,[successCallbackWrapper_,arguments[0]]);}// promise-support\nreturn new Promise(function(resolve,reject){origGetStats.apply(self,[function(response){resolve(makeMapStats(fixChromeStats_(response)));},reject]);}).then(successCallback,errorCallback);};// add promise support -- natively available in Chrome 51\nif(browserDetails.version<51){['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){var args=arguments;var self=this;var promise=new Promise(function(resolve,reject){nativeMethod.apply(self,[args[0],resolve,reject]);});if(args.length<2){return promise;}return promise.then(function(){args[1].apply(null,[]);},function(err){if(args.length>=3){args[2].apply(null,[err]);}});};});}// promise support for createOffer and createAnswer. Available (without\n// bugs) since M52: crbug/619289\nif(browserDetails.version<52){['createOffer','createAnswer'].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){var self=this;if(arguments.length<1||arguments.length===1&&_typeof(arguments[0])==='object'){var opts=arguments.length===1?arguments[0]:undefined;return new Promise(function(resolve,reject){nativeMethod.apply(self,[resolve,reject,opts]);});}return nativeMethod.apply(this,arguments);};});}// shim implicit creation of RTCSessionDescription/RTCIceCandidate\n['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){arguments[0]=new(method==='addIceCandidate'?window.RTCIceCandidate:window.RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments);};});// support for addIceCandidate(null or undefined)\nvar nativeAddIceCandidate=window.RTCPeerConnection.prototype.addIceCandidate;window.RTCPeerConnection.prototype.addIceCandidate=function(){if(!arguments[0]){if(arguments[1]){arguments[1].apply(null);}return Promise.resolve();}return nativeAddIceCandidate.apply(this,arguments);};}};// Expose public methods.\nmodule.exports={shimMediaStream:chromeShim.shimMediaStream,shimOnTrack:chromeShim.shimOnTrack,shimGetSendersWithDtmf:chromeShim.shimGetSendersWithDtmf,shimSourceObject:chromeShim.shimSourceObject,shimPeerConnection:chromeShim.shimPeerConnection,shimGetUserMedia:require('./getusermedia')};},{\"../utils.js\":12,\"./getusermedia\":5}],5:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var utils=require('../utils.js');var logging=utils.log;// Expose public methods.\nmodule.exports=function(window){var browserDetails=utils.detectBrowser(window);var navigator=window&&window.navigator;var constraintsToChrome_=function constraintsToChrome_(c){if((typeof c===\"undefined\"?\"undefined\":_typeof(c))!=='object'||c.mandatory||c.optional){return c;}var cc={};Object.keys(c).forEach(function(key){if(key==='require'||key==='advanced'||key==='mediaSource'){return;}var r=_typeof(c[key])==='object'?c[key]:{ideal:c[key]};if(r.exact!==undefined&&typeof r.exact==='number'){r.min=r.max=r.exact;}var oldname_=function oldname_(prefix,name){if(prefix){return prefix+name.charAt(0).toUpperCase()+name.slice(1);}return name==='deviceId'?'sourceId':name;};if(r.ideal!==undefined){cc.optional=cc.optional||[];var oc={};if(typeof r.ideal==='number'){oc[oldname_('min',key)]=r.ideal;cc.optional.push(oc);oc={};oc[oldname_('max',key)]=r.ideal;cc.optional.push(oc);}else{oc[oldname_('',key)]=r.ideal;cc.optional.push(oc);}}if(r.exact!==undefined&&typeof r.exact!=='number'){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_('',key)]=r.exact;}else{['min','max'].forEach(function(mix){if(r[mix]!==undefined){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_(mix,key)]=r[mix];}});}});if(c.advanced){cc.optional=(cc.optional||[]).concat(c.advanced);}return cc;};var shimConstraints_=function shimConstraints_(constraints,func){constraints=JSON.parse(JSON.stringify(constraints));if(constraints&&_typeof(constraints.audio)==='object'){var remap=function remap(obj,a,b){if(a in obj&&!(b in obj)){obj[b]=obj[a];delete obj[a];}};constraints=JSON.parse(JSON.stringify(constraints));remap(constraints.audio,'autoGainControl','googAutoGainControl');remap(constraints.audio,'noiseSuppression','googNoiseSuppression');constraints.audio=constraintsToChrome_(constraints.audio);}if(constraints&&_typeof(constraints.video)==='object'){// Shim facingMode for mobile & surface pro.\nvar face=constraints.video.facingMode;face=face&&((typeof face===\"undefined\"?\"undefined\":_typeof(face))==='object'?face:{ideal:face});var getSupportedFacingModeLies=browserDetails.version<61;if(face&&(face.exact==='user'||face.exact==='environment'||face.ideal==='user'||face.ideal==='environment')&&!(navigator.mediaDevices.getSupportedConstraints&&navigator.mediaDevices.getSupportedConstraints().facingMode&&!getSupportedFacingModeLies)){delete constraints.video.facingMode;var matches;if(face.exact==='environment'||face.ideal==='environment'){matches=['back','rear'];}else if(face.exact==='user'||face.ideal==='user'){matches=['front'];}if(matches){// Look for matches in label, or use last cam for back (typical).\nreturn navigator.mediaDevices.enumerateDevices().then(function(devices){devices=devices.filter(function(d){return d.kind==='videoinput';});var dev=devices.find(function(d){return matches.some(function(match){return d.label.toLowerCase().indexOf(match)!==-1;});});if(!dev&&devices.length&&matches.indexOf('back')!==-1){dev=devices[devices.length-1];// more likely the back cam\n}if(dev){constraints.video.deviceId=face.exact?{exact:dev.deviceId}:{ideal:dev.deviceId};}constraints.video=constraintsToChrome_(constraints.video);logging('chrome: '+JSON.stringify(constraints));return func(constraints);});}}constraints.video=constraintsToChrome_(constraints.video);}logging('chrome: '+JSON.stringify(constraints));return func(constraints);};var shimError_=function shimError_(e){return{name:{PermissionDeniedError:'NotAllowedError',InvalidStateError:'NotReadableError',DevicesNotFoundError:'NotFoundError',ConstraintNotSatisfiedError:'OverconstrainedError',TrackStartError:'NotReadableError',MediaDeviceFailedDueToShutdown:'NotReadableError',MediaDeviceKillSwitchOn:'NotReadableError'}[e.name]||e.name,message:e.message,constraint:e.constraintName,toString:function toString(){return this.name+(this.message&&': ')+this.message;}};};var getUserMedia_=function getUserMedia_(constraints,onSuccess,onError){shimConstraints_(constraints,function(c){navigator.webkitGetUserMedia(c,onSuccess,function(e){onError(shimError_(e));});});};navigator.getUserMedia=getUserMedia_;// Returns the result of getUserMedia as a Promise.\nvar getUserMediaPromise_=function getUserMediaPromise_(constraints){return new Promise(function(resolve,reject){navigator.getUserMedia(constraints,resolve,reject);});};if(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:getUserMediaPromise_,enumerateDevices:function enumerateDevices(){return new Promise(function(resolve){var kinds={audio:'audioinput',video:'videoinput'};return window.MediaStreamTrack.getSources(function(devices){resolve(devices.map(function(device){return{label:device.label,kind:kinds[device.kind],deviceId:device.id,groupId:''};}));});});},getSupportedConstraints:function getSupportedConstraints(){return{deviceId:true,echoCancellation:true,facingMode:true,frameRate:true,height:true,width:true};}};}// A shim for getUserMedia method on the mediaDevices object.\n// TODO(KaptenJansson) remove once implemented in Chrome stable.\nif(!navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia=function(constraints){return getUserMediaPromise_(constraints);};}else{// Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n// function which returns a Promise, it does not accept spec-style\n// constraints.\nvar origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(cs){return shimConstraints_(cs,function(c){return origGetUserMedia(c).then(function(stream){if(c.audio&&!stream.getAudioTracks().length||c.video&&!stream.getVideoTracks().length){stream.getTracks().forEach(function(track){track.stop();});throw new DOMException('','NotFoundError');}return stream;},function(e){return Promise.reject(shimError_(e));});});};}// Dummy devicechange event methods.\n// TODO(KaptenJansson) remove once implemented in Chrome stable.\nif(typeof navigator.mediaDevices.addEventListener==='undefined'){navigator.mediaDevices.addEventListener=function(){logging('Dummy mediaDevices.addEventListener called.');};}if(typeof navigator.mediaDevices.removeEventListener==='undefined'){navigator.mediaDevices.removeEventListener=function(){logging('Dummy mediaDevices.removeEventListener called.');};}};},{\"../utils.js\":12}],6:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var utils=require('../utils');var shimRTCPeerConnection=require('./rtcpeerconnection_shim');module.exports={shimGetUserMedia:require('./getusermedia'),shimPeerConnection:function shimPeerConnection(window){var browserDetails=utils.detectBrowser(window);if(window.RTCIceGatherer){// ORTC defines an RTCIceCandidate object but no constructor.\n// Not implemented in Edge.\nif(!window.RTCIceCandidate){window.RTCIceCandidate=function(args){return args;};}// ORTC does not have a session description object but\n// other browsers (i.e. Chrome) that will support both PC and ORTC\n// in the future might have this defined already.\nif(!window.RTCSessionDescription){window.RTCSessionDescription=function(args){return args;};}// this adds an additional event listener to MediaStrackTrack that signals\n// when a tracks enabled property was changed. Workaround for a bug in\n// addStream, see below. No longer required in 15025+\nif(browserDetails.version<15025){var origMSTEnabled=Object.getOwnPropertyDescriptor(window.MediaStreamTrack.prototype,'enabled');Object.defineProperty(window.MediaStreamTrack.prototype,'enabled',{set:function set(value){origMSTEnabled.set.call(this,value);var ev=new Event('enabled');ev.enabled=value;this.dispatchEvent(ev);}});}}window.RTCPeerConnection=shimRTCPeerConnection(window,browserDetails.version);},shimReplaceTrack:function shimReplaceTrack(window){// ORTC has replaceTrack -- https://github.com/w3c/ortc/issues/614\nif(window.RTCRtpSender&&!('replaceTrack'in window.RTCRtpSender.prototype)){window.RTCRtpSender.prototype.replaceTrack=window.RTCRtpSender.prototype.setTrack;}}};},{\"../utils\":12,\"./getusermedia\":7,\"./rtcpeerconnection_shim\":8}],7:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';// Expose public methods.\nmodule.exports=function(window){var navigator=window&&window.navigator;var shimError_=function shimError_(e){return{name:{PermissionDeniedError:'NotAllowedError'}[e.name]||e.name,message:e.message,constraint:e.constraint,toString:function toString(){return this.name;}};};// getUserMedia error shim.\nvar origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){return origGetUserMedia(c).catch(function(e){return Promise.reject(shimError_(e));});};};},{}],8:[function(require,module,exports){/*\n *  Copyright (c) 2017 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var SDPUtils=require('sdp');// sort tracks such that they follow an a-v-a-v...\n// pattern.\nfunction sortTracks(tracks){var audioTracks=tracks.filter(function(track){return track.kind==='audio';});var videoTracks=tracks.filter(function(track){return track.kind==='video';});tracks=[];while(audioTracks.length||videoTracks.length){if(audioTracks.length){tracks.push(audioTracks.shift());}if(videoTracks.length){tracks.push(videoTracks.shift());}}return tracks;}// Edge does not like\n// 1) stun:\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\n// 4) turn: occurring muliple times\nfunction filterIceServers(iceServers,edgeVersion){var hasTurn=false;iceServers=JSON.parse(JSON.stringify(iceServers));return iceServers.filter(function(server){if(server&&(server.urls||server.url)){var urls=server.urls||server.url;if(server.url&&!server.urls){console.warn('RTCIceServer.url is deprecated! Use urls instead.');}var isString=typeof urls==='string';if(isString){urls=[urls];}urls=urls.filter(function(url){var validTurn=url.indexOf('turn:')===0&&url.indexOf('transport=udp')!==-1&&url.indexOf('turn:[')===-1&&!hasTurn;if(validTurn){hasTurn=true;return true;}return url.indexOf('stun:')===0&&edgeVersion>=14393;});delete server.url;server.urls=isString?urls[0]:urls;return!!urls.length;}return false;});}// Determines the intersection of local and remote capabilities.\nfunction getCommonCapabilities(localCapabilities,remoteCapabilities){var commonCapabilities={codecs:[],headerExtensions:[],fecMechanisms:[]};var findCodecByPayloadType=function findCodecByPayloadType(pt,codecs){pt=parseInt(pt,10);for(var i=0;i<codecs.length;i++){if(codecs[i].payloadType===pt||codecs[i].preferredPayloadType===pt){return codecs[i];}}};var rtxCapabilityMatches=function rtxCapabilityMatches(lRtx,rRtx,lCodecs,rCodecs){var lCodec=findCodecByPayloadType(lRtx.parameters.apt,lCodecs);var rCodec=findCodecByPayloadType(rRtx.parameters.apt,rCodecs);return lCodec&&rCodec&&lCodec.name.toLowerCase()===rCodec.name.toLowerCase();};localCapabilities.codecs.forEach(function(lCodec){for(var i=0;i<remoteCapabilities.codecs.length;i++){var rCodec=remoteCapabilities.codecs[i];if(lCodec.name.toLowerCase()===rCodec.name.toLowerCase()&&lCodec.clockRate===rCodec.clockRate){if(lCodec.name.toLowerCase()==='rtx'&&lCodec.parameters&&rCodec.parameters.apt){// for RTX we need to find the local rtx that has a apt\n// which points to the same local codec as the remote one.\nif(!rtxCapabilityMatches(lCodec,rCodec,localCapabilities.codecs,remoteCapabilities.codecs)){continue;}}rCodec=JSON.parse(JSON.stringify(rCodec));// deepcopy\n// number of channels is the highest common number of channels\nrCodec.numChannels=Math.min(lCodec.numChannels,rCodec.numChannels);// push rCodec so we reply with offerer payload type\ncommonCapabilities.codecs.push(rCodec);// determine common feedback mechanisms\nrCodec.rtcpFeedback=rCodec.rtcpFeedback.filter(function(fb){for(var j=0;j<lCodec.rtcpFeedback.length;j++){if(lCodec.rtcpFeedback[j].type===fb.type&&lCodec.rtcpFeedback[j].parameter===fb.parameter){return true;}}return false;});// FIXME: also need to determine .parameters\n//  see https://github.com/openpeer/ortc/issues/569\nbreak;}}});localCapabilities.headerExtensions.forEach(function(lHeaderExtension){for(var i=0;i<remoteCapabilities.headerExtensions.length;i++){var rHeaderExtension=remoteCapabilities.headerExtensions[i];if(lHeaderExtension.uri===rHeaderExtension.uri){commonCapabilities.headerExtensions.push(rHeaderExtension);break;}}});// FIXME: fecMechanisms\nreturn commonCapabilities;}// is action=setLocalDescription with type allowed in signalingState\nfunction isActionAllowedInSignalingState(action,type,signalingState){return{offer:{setLocalDescription:['stable','have-local-offer'],setRemoteDescription:['stable','have-remote-offer']},answer:{setLocalDescription:['have-remote-offer','have-local-pranswer'],setRemoteDescription:['have-local-offer','have-remote-pranswer']}}[type][action].indexOf(signalingState)!==-1;}module.exports=function(window,edgeVersion){var RTCPeerConnection=function RTCPeerConnection(config){var self=this;var _eventTarget=document.createDocumentFragment();['addEventListener','removeEventListener','dispatchEvent'].forEach(function(method){self[method]=_eventTarget[method].bind(_eventTarget);});this.needNegotiation=false;this.onicecandidate=null;this.onaddstream=null;this.ontrack=null;this.onremovestream=null;this.onsignalingstatechange=null;this.oniceconnectionstatechange=null;this.onicegatheringstatechange=null;this.onnegotiationneeded=null;this.ondatachannel=null;this.canTrickleIceCandidates=null;this.localStreams=[];this.remoteStreams=[];this.getLocalStreams=function(){return self.localStreams;};this.getRemoteStreams=function(){return self.remoteStreams;};this.localDescription=new window.RTCSessionDescription({type:'',sdp:''});this.remoteDescription=new window.RTCSessionDescription({type:'',sdp:''});this.signalingState='stable';this.iceConnectionState='new';this.iceGatheringState='new';this.iceOptions={gatherPolicy:'all',iceServers:[]};if(config&&config.iceTransportPolicy){switch(config.iceTransportPolicy){case'all':case'relay':this.iceOptions.gatherPolicy=config.iceTransportPolicy;break;default:// don't set iceTransportPolicy.\nbreak;}}this.usingBundle=config&&config.bundlePolicy==='max-bundle';if(config&&config.iceServers){this.iceOptions.iceServers=filterIceServers(config.iceServers,edgeVersion);}this._config=config||{};// per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n// everything that is needed to describe a SDP m-line.\nthis.transceivers=[];// since the iceGatherer is currently created in createOffer but we\n// must not emit candidates until after setLocalDescription we buffer\n// them in this array.\nthis._localIceCandidatesBuffer=[];};RTCPeerConnection.prototype._emitGatheringStateChange=function(){var event=new Event('icegatheringstatechange');this.dispatchEvent(event);if(this.onicegatheringstatechange!==null){this.onicegatheringstatechange(event);}};RTCPeerConnection.prototype._emitBufferedCandidates=function(){var self=this;var sections=SDPUtils.splitSections(self.localDescription.sdp);// FIXME: need to apply ice candidates in a way which is async but\n// in-order\nthis._localIceCandidatesBuffer.forEach(function(event){var end=!event.candidate||Object.keys(event.candidate).length===0;if(end){for(var j=1;j<sections.length;j++){if(sections[j].indexOf('\\r\\na=end-of-candidates\\r\\n')===-1){sections[j]+='a=end-of-candidates\\r\\n';}}}else{sections[event.candidate.sdpMLineIndex+1]+='a='+event.candidate.candidate+'\\r\\n';}self.localDescription.sdp=sections.join('');self.dispatchEvent(event);if(self.onicecandidate!==null){self.onicecandidate(event);}if(!event.candidate&&self.iceGatheringState!=='complete'){var complete=self.transceivers.every(function(transceiver){return transceiver.iceGatherer&&transceiver.iceGatherer.state==='completed';});if(complete&&self.iceGatheringStateChange!=='complete'){self.iceGatheringState='complete';self._emitGatheringStateChange();}}});this._localIceCandidatesBuffer=[];};RTCPeerConnection.prototype.getConfiguration=function(){return this._config;};// internal helper to create a transceiver object.\n// (whih is not yet the same as the WebRTC 1.0 transceiver)\nRTCPeerConnection.prototype._createTransceiver=function(kind){var hasBundleTransport=this.transceivers.length>0;var transceiver={track:null,iceGatherer:null,iceTransport:null,dtlsTransport:null,localCapabilities:null,remoteCapabilities:null,rtpSender:null,rtpReceiver:null,kind:kind,mid:null,sendEncodingParameters:null,recvEncodingParameters:null,stream:null,wantReceive:true};if(this.usingBundle&&hasBundleTransport){transceiver.iceTransport=this.transceivers[0].iceTransport;transceiver.dtlsTransport=this.transceivers[0].dtlsTransport;}else{var transports=this._createIceAndDtlsTransports();transceiver.iceTransport=transports.iceTransport;transceiver.dtlsTransport=transports.dtlsTransport;}this.transceivers.push(transceiver);return transceiver;};RTCPeerConnection.prototype.addTrack=function(track,stream){var transceiver;for(var i=0;i<this.transceivers.length;i++){if(!this.transceivers[i].track&&this.transceivers[i].kind===track.kind){transceiver=this.transceivers[i];}}if(!transceiver){transceiver=this._createTransceiver(track.kind);}transceiver.track=track;transceiver.stream=stream;transceiver.rtpSender=new window.RTCRtpSender(track,transceiver.dtlsTransport);this._maybeFireNegotiationNeeded();return transceiver.rtpSender;};RTCPeerConnection.prototype.addStream=function(stream){var self=this;if(edgeVersion>=15025){this.localStreams.push(stream);stream.getTracks().forEach(function(track){self.addTrack(track,stream);});}else{// Clone is necessary for local demos mostly, attaching directly\n// to two different senders does not work (build 10547).\n// Fixed in 15025 (or earlier)\nvar clonedStream=stream.clone();stream.getTracks().forEach(function(track,idx){var clonedTrack=clonedStream.getTracks()[idx];track.addEventListener('enabled',function(event){clonedTrack.enabled=event.enabled;});});clonedStream.getTracks().forEach(function(track){self.addTrack(track,clonedStream);});this.localStreams.push(clonedStream);}this._maybeFireNegotiationNeeded();};RTCPeerConnection.prototype.removeStream=function(stream){var idx=this.localStreams.indexOf(stream);if(idx>-1){this.localStreams.splice(idx,1);this._maybeFireNegotiationNeeded();}};RTCPeerConnection.prototype.getSenders=function(){return this.transceivers.filter(function(transceiver){return!!transceiver.rtpSender;}).map(function(transceiver){return transceiver.rtpSender;});};RTCPeerConnection.prototype.getReceivers=function(){return this.transceivers.filter(function(transceiver){return!!transceiver.rtpReceiver;}).map(function(transceiver){return transceiver.rtpReceiver;});};// Create ICE gatherer and hook it up.\nRTCPeerConnection.prototype._createIceGatherer=function(mid,sdpMLineIndex){var self=this;var iceGatherer=new window.RTCIceGatherer(self.iceOptions);iceGatherer.onlocalcandidate=function(evt){var event=new Event('icecandidate');event.candidate={sdpMid:mid,sdpMLineIndex:sdpMLineIndex};var cand=evt.candidate;var end=!cand||Object.keys(cand).length===0;// Edge emits an empty object for RTCIceCandidateComplete‥\nif(end){// polyfill since RTCIceGatherer.state is not implemented in\n// Edge 10547 yet.\nif(iceGatherer.state===undefined){iceGatherer.state='completed';}}else{// RTCIceCandidate doesn't have a component, needs to be added\ncand.component=1;event.candidate.candidate=SDPUtils.writeCandidate(cand);}// update local description.\nvar sections=SDPUtils.splitSections(self.localDescription.sdp);if(!end){sections[event.candidate.sdpMLineIndex+1]+='a='+event.candidate.candidate+'\\r\\n';}else{sections[event.candidate.sdpMLineIndex+1]+='a=end-of-candidates\\r\\n';}self.localDescription.sdp=sections.join('');var transceivers=self._pendingOffer?self._pendingOffer:self.transceivers;var complete=transceivers.every(function(transceiver){return transceiver.iceGatherer&&transceiver.iceGatherer.state==='completed';});// Emit candidate if localDescription is set.\n// Also emits null candidate when all gatherers are complete.\nswitch(self.iceGatheringState){case'new':if(!end){self._localIceCandidatesBuffer.push(event);}if(end&&complete){self._localIceCandidatesBuffer.push(new Event('icecandidate'));}break;case'gathering':self._emitBufferedCandidates();if(!end){self.dispatchEvent(event);if(self.onicecandidate!==null){self.onicecandidate(event);}}if(complete){self.dispatchEvent(new Event('icecandidate'));if(self.onicecandidate!==null){self.onicecandidate(new Event('icecandidate'));}self.iceGatheringState='complete';self._emitGatheringStateChange();}break;case'complete':// should not happen... currently!\nbreak;default:// no-op.\nbreak;}};return iceGatherer;};// Create ICE transport and DTLS transport.\nRTCPeerConnection.prototype._createIceAndDtlsTransports=function(){var self=this;var iceTransport=new window.RTCIceTransport(null);iceTransport.onicestatechange=function(){self._updateConnectionState();};var dtlsTransport=new window.RTCDtlsTransport(iceTransport);dtlsTransport.ondtlsstatechange=function(){self._updateConnectionState();};dtlsTransport.onerror=function(){// onerror does not set state to failed by itself.\nObject.defineProperty(dtlsTransport,'state',{value:'failed',writable:true});self._updateConnectionState();};return{iceTransport:iceTransport,dtlsTransport:dtlsTransport};};// Destroy ICE gatherer, ICE transport and DTLS transport.\n// Without triggering the callbacks.\nRTCPeerConnection.prototype._disposeIceAndDtlsTransports=function(sdpMLineIndex){var iceGatherer=this.transceivers[sdpMLineIndex].iceGatherer;if(iceGatherer){delete iceGatherer.onlocalcandidate;delete this.transceivers[sdpMLineIndex].iceGatherer;}var iceTransport=this.transceivers[sdpMLineIndex].iceTransport;if(iceTransport){delete iceTransport.onicestatechange;delete this.transceivers[sdpMLineIndex].iceTransport;}var dtlsTransport=this.transceivers[sdpMLineIndex].dtlsTransport;if(dtlsTransport){delete dtlsTransport.ondtlssttatechange;delete dtlsTransport.onerror;delete this.transceivers[sdpMLineIndex].dtlsTransport;}};// Start the RTP Sender and Receiver for a transceiver.\nRTCPeerConnection.prototype._transceive=function(transceiver,send,recv){var params=getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);if(send&&transceiver.rtpSender){params.encodings=transceiver.sendEncodingParameters;params.rtcp={cname:SDPUtils.localCName,compound:transceiver.rtcpParameters.compound};if(transceiver.recvEncodingParameters.length){params.rtcp.ssrc=transceiver.recvEncodingParameters[0].ssrc;}transceiver.rtpSender.send(params);}if(recv&&transceiver.rtpReceiver){// remove RTX field in Edge 14942\nif(transceiver.kind==='video'&&transceiver.recvEncodingParameters&&edgeVersion<15019){transceiver.recvEncodingParameters.forEach(function(p){delete p.rtx;});}params.encodings=transceiver.recvEncodingParameters;params.rtcp={cname:transceiver.rtcpParameters.cname,compound:transceiver.rtcpParameters.compound};if(transceiver.sendEncodingParameters.length){params.rtcp.ssrc=transceiver.sendEncodingParameters[0].ssrc;}transceiver.rtpReceiver.receive(params);}};RTCPeerConnection.prototype.setLocalDescription=function(description){var self=this;if(!isActionAllowedInSignalingState('setLocalDescription',description.type,this.signalingState)){var e=new Error('Can not set local '+description.type+' in state '+this.signalingState);e.name='InvalidStateError';if(arguments.length>2&&typeof arguments[2]==='function'){window.setTimeout(arguments[2],0,e);}return Promise.reject(e);}var sections;var sessionpart;if(description.type==='offer'){// FIXME: What was the purpose of this empty if statement?\n// if (!this._pendingOffer) {\n// } else {\nif(this._pendingOffer){// VERY limited support for SDP munging. Limited to:\n// * changing the order of codecs\nsections=SDPUtils.splitSections(description.sdp);sessionpart=sections.shift();sections.forEach(function(mediaSection,sdpMLineIndex){var caps=SDPUtils.parseRtpParameters(mediaSection);self._pendingOffer[sdpMLineIndex].localCapabilities=caps;});this.transceivers=this._pendingOffer;delete this._pendingOffer;}}else if(description.type==='answer'){sections=SDPUtils.splitSections(self.remoteDescription.sdp);sessionpart=sections.shift();var isIceLite=SDPUtils.matchPrefix(sessionpart,'a=ice-lite').length>0;sections.forEach(function(mediaSection,sdpMLineIndex){var transceiver=self.transceivers[sdpMLineIndex];var iceGatherer=transceiver.iceGatherer;var iceTransport=transceiver.iceTransport;var dtlsTransport=transceiver.dtlsTransport;var localCapabilities=transceiver.localCapabilities;var remoteCapabilities=transceiver.remoteCapabilities;var rejected=SDPUtils.isRejected(mediaSection);if(!rejected&&!transceiver.isDatachannel){var remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);var remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);if(isIceLite){remoteDtlsParameters.role='server';}if(!self.usingBundle||sdpMLineIndex===0){iceTransport.start(iceGatherer,remoteIceParameters,isIceLite?'controlling':'controlled');dtlsTransport.start(remoteDtlsParameters);}// Calculate intersection of capabilities.\nvar params=getCommonCapabilities(localCapabilities,remoteCapabilities);// Start the RTCRtpSender. The RTCRtpReceiver for this\n// transceiver has already been started in setRemoteDescription.\nself._transceive(transceiver,params.codecs.length>0,false);}});}this.localDescription={type:description.type,sdp:description.sdp};switch(description.type){case'offer':this._updateSignalingState('have-local-offer');break;case'answer':this._updateSignalingState('stable');break;default:throw new TypeError('unsupported type \"'+description.type+'\"');}// If a success callback was provided, emit ICE candidates after it\n// has been executed. Otherwise, emit callback after the Promise is\n// resolved.\nvar hasCallback=arguments.length>1&&typeof arguments[1]==='function';if(hasCallback){var cb=arguments[1];window.setTimeout(function(){cb();if(self.iceGatheringState==='new'){self.iceGatheringState='gathering';self._emitGatheringStateChange();}self._emitBufferedCandidates();},0);}var p=Promise.resolve();p.then(function(){if(!hasCallback){if(self.iceGatheringState==='new'){self.iceGatheringState='gathering';self._emitGatheringStateChange();}// Usually candidates will be emitted earlier.\nwindow.setTimeout(self._emitBufferedCandidates.bind(self),500);}});return p;};RTCPeerConnection.prototype.setRemoteDescription=function(description){var self=this;if(!isActionAllowedInSignalingState('setRemoteDescription',description.type,this.signalingState)){var e=new Error('Can not set remote '+description.type+' in state '+this.signalingState);e.name='InvalidStateError';if(arguments.length>2&&typeof arguments[2]==='function'){window.setTimeout(arguments[2],0,e);}return Promise.reject(e);}var streams={};var receiverList=[];var sections=SDPUtils.splitSections(description.sdp);var sessionpart=sections.shift();var isIceLite=SDPUtils.matchPrefix(sessionpart,'a=ice-lite').length>0;var usingBundle=SDPUtils.matchPrefix(sessionpart,'a=group:BUNDLE ').length>0;this.usingBundle=usingBundle;var iceOptions=SDPUtils.matchPrefix(sessionpart,'a=ice-options:')[0];if(iceOptions){this.canTrickleIceCandidates=iceOptions.substr(14).split(' ').indexOf('trickle')>=0;}else{this.canTrickleIceCandidates=false;}sections.forEach(function(mediaSection,sdpMLineIndex){var lines=SDPUtils.splitLines(mediaSection);var kind=SDPUtils.getKind(mediaSection);var rejected=SDPUtils.isRejected(mediaSection);var protocol=lines[0].substr(2).split(' ')[2];var direction=SDPUtils.getDirection(mediaSection,sessionpart);var remoteMsid=SDPUtils.parseMsid(mediaSection);var mid=SDPUtils.getMid(mediaSection)||SDPUtils.generateIdentifier();// Reject datachannels which are not implemented yet.\nif(kind==='application'&&protocol==='DTLS/SCTP'){self.transceivers[sdpMLineIndex]={mid:mid,isDatachannel:true};return;}var transceiver;var iceGatherer;var iceTransport;var dtlsTransport;var rtpReceiver;var sendEncodingParameters;var recvEncodingParameters;var localCapabilities;var track;// FIXME: ensure the mediaSection has rtcp-mux set.\nvar remoteCapabilities=SDPUtils.parseRtpParameters(mediaSection);var remoteIceParameters;var remoteDtlsParameters;if(!rejected){remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);remoteDtlsParameters.role='client';}recvEncodingParameters=SDPUtils.parseRtpEncodingParameters(mediaSection);var rtcpParameters=SDPUtils.parseRtcpParameters(mediaSection);var isComplete=SDPUtils.matchPrefix(mediaSection,'a=end-of-candidates',sessionpart).length>0;var cands=SDPUtils.matchPrefix(mediaSection,'a=candidate:').map(function(cand){return SDPUtils.parseCandidate(cand);}).filter(function(cand){return cand.component==='1'||cand.component===1;});// Check if we can use BUNDLE and dispose transports.\nif((description.type==='offer'||description.type==='answer')&&!rejected&&usingBundle&&sdpMLineIndex>0&&self.transceivers[sdpMLineIndex]){self._disposeIceAndDtlsTransports(sdpMLineIndex);self.transceivers[sdpMLineIndex].iceGatherer=self.transceivers[0].iceGatherer;self.transceivers[sdpMLineIndex].iceTransport=self.transceivers[0].iceTransport;self.transceivers[sdpMLineIndex].dtlsTransport=self.transceivers[0].dtlsTransport;if(self.transceivers[sdpMLineIndex].rtpSender){self.transceivers[sdpMLineIndex].rtpSender.setTransport(self.transceivers[0].dtlsTransport);}if(self.transceivers[sdpMLineIndex].rtpReceiver){self.transceivers[sdpMLineIndex].rtpReceiver.setTransport(self.transceivers[0].dtlsTransport);}}if(description.type==='offer'&&!rejected){transceiver=self.transceivers[sdpMLineIndex]||self._createTransceiver(kind);transceiver.mid=mid;if(!transceiver.iceGatherer){transceiver.iceGatherer=usingBundle&&sdpMLineIndex>0?self.transceivers[0].iceGatherer:self._createIceGatherer(mid,sdpMLineIndex);}if(isComplete&&(!usingBundle||sdpMLineIndex===0)){transceiver.iceTransport.setRemoteCandidates(cands);}localCapabilities=window.RTCRtpReceiver.getCapabilities(kind);// filter RTX until additional stuff needed for RTX is implemented\n// in adapter.js\nif(edgeVersion<15019){localCapabilities.codecs=localCapabilities.codecs.filter(function(codec){return codec.name!=='rtx';});}sendEncodingParameters=[{ssrc:(2*sdpMLineIndex+2)*1001}];if(direction==='sendrecv'||direction==='sendonly'){rtpReceiver=new window.RTCRtpReceiver(transceiver.dtlsTransport,kind);track=rtpReceiver.track;// FIXME: does not work with Plan B.\nif(remoteMsid){if(!streams[remoteMsid.stream]){streams[remoteMsid.stream]=new window.MediaStream();Object.defineProperty(streams[remoteMsid.stream],'id',{get:function get(){return remoteMsid.stream;}});}Object.defineProperty(track,'id',{get:function get(){return remoteMsid.track;}});streams[remoteMsid.stream].addTrack(track);receiverList.push([track,rtpReceiver,streams[remoteMsid.stream]]);}else{if(!streams.default){streams.default=new window.MediaStream();}streams.default.addTrack(track);receiverList.push([track,rtpReceiver,streams.default]);}}transceiver.localCapabilities=localCapabilities;transceiver.remoteCapabilities=remoteCapabilities;transceiver.rtpReceiver=rtpReceiver;transceiver.rtcpParameters=rtcpParameters;transceiver.sendEncodingParameters=sendEncodingParameters;transceiver.recvEncodingParameters=recvEncodingParameters;// Start the RTCRtpReceiver now. The RTPSender is started in\n// setLocalDescription.\nself._transceive(self.transceivers[sdpMLineIndex],false,direction==='sendrecv'||direction==='sendonly');}else if(description.type==='answer'&&!rejected){transceiver=self.transceivers[sdpMLineIndex];iceGatherer=transceiver.iceGatherer;iceTransport=transceiver.iceTransport;dtlsTransport=transceiver.dtlsTransport;rtpReceiver=transceiver.rtpReceiver;sendEncodingParameters=transceiver.sendEncodingParameters;localCapabilities=transceiver.localCapabilities;self.transceivers[sdpMLineIndex].recvEncodingParameters=recvEncodingParameters;self.transceivers[sdpMLineIndex].remoteCapabilities=remoteCapabilities;self.transceivers[sdpMLineIndex].rtcpParameters=rtcpParameters;if((isIceLite||isComplete)&&cands.length){iceTransport.setRemoteCandidates(cands);}if(!usingBundle||sdpMLineIndex===0){iceTransport.start(iceGatherer,remoteIceParameters,'controlling');dtlsTransport.start(remoteDtlsParameters);}self._transceive(transceiver,direction==='sendrecv'||direction==='recvonly',direction==='sendrecv'||direction==='sendonly');if(rtpReceiver&&(direction==='sendrecv'||direction==='sendonly')){track=rtpReceiver.track;if(remoteMsid){if(!streams[remoteMsid.stream]){streams[remoteMsid.stream]=new window.MediaStream();}streams[remoteMsid.stream].addTrack(track);receiverList.push([track,rtpReceiver,streams[remoteMsid.stream]]);}else{if(!streams.default){streams.default=new window.MediaStream();}streams.default.addTrack(track);receiverList.push([track,rtpReceiver,streams.default]);}}else{// FIXME: actually the receiver should be created later.\ndelete transceiver.rtpReceiver;}}});this.remoteDescription={type:description.type,sdp:description.sdp};switch(description.type){case'offer':this._updateSignalingState('have-remote-offer');break;case'answer':this._updateSignalingState('stable');break;default:throw new TypeError('unsupported type \"'+description.type+'\"');}Object.keys(streams).forEach(function(sid){var stream=streams[sid];if(stream.getTracks().length){self.remoteStreams.push(stream);var event=new Event('addstream');event.stream=stream;self.dispatchEvent(event);if(self.onaddstream!==null){window.setTimeout(function(){self.onaddstream(event);},0);}receiverList.forEach(function(item){var track=item[0];var receiver=item[1];if(stream.id!==item[2].id){return;}var trackEvent=new Event('track');trackEvent.track=track;trackEvent.receiver=receiver;trackEvent.streams=[stream];self.dispatchEvent(trackEvent);if(self.ontrack!==null){window.setTimeout(function(){self.ontrack(trackEvent);},0);}});}});// check whether addIceCandidate({}) was called within four seconds after\n// setRemoteDescription.\nwindow.setTimeout(function(){if(!(self&&self.transceivers)){return;}self.transceivers.forEach(function(transceiver){if(transceiver.iceTransport&&transceiver.iceTransport.state==='new'&&transceiver.iceTransport.getRemoteCandidates().length>0){console.warn('Timeout for addRemoteCandidate. Consider sending '+'an end-of-candidates notification');transceiver.iceTransport.addRemoteCandidate({});}});},4000);if(arguments.length>1&&typeof arguments[1]==='function'){window.setTimeout(arguments[1],0);}return Promise.resolve();};RTCPeerConnection.prototype.close=function(){this.transceivers.forEach(function(transceiver){/* not yet\n      if (transceiver.iceGatherer) {\n        transceiver.iceGatherer.close();\n      }\n      */if(transceiver.iceTransport){transceiver.iceTransport.stop();}if(transceiver.dtlsTransport){transceiver.dtlsTransport.stop();}if(transceiver.rtpSender){transceiver.rtpSender.stop();}if(transceiver.rtpReceiver){transceiver.rtpReceiver.stop();}});// FIXME: clean up tracks, local streams, remote streams, etc\nthis._updateSignalingState('closed');};// Update the signaling state.\nRTCPeerConnection.prototype._updateSignalingState=function(newState){this.signalingState=newState;var event=new Event('signalingstatechange');this.dispatchEvent(event);if(this.onsignalingstatechange!==null){this.onsignalingstatechange(event);}};// Determine whether to fire the negotiationneeded event.\nRTCPeerConnection.prototype._maybeFireNegotiationNeeded=function(){var self=this;if(this.signalingState!=='stable'||this.needNegotiation===true){return;}this.needNegotiation=true;window.setTimeout(function(){if(self.needNegotiation===false){return;}self.needNegotiation=false;var event=new Event('negotiationneeded');self.dispatchEvent(event);if(self.onnegotiationneeded!==null){self.onnegotiationneeded(event);}},0);};// Update the connection state.\nRTCPeerConnection.prototype._updateConnectionState=function(){var self=this;var newState;var states={'new':0,closed:0,connecting:0,checking:0,connected:0,completed:0,disconnected:0,failed:0};this.transceivers.forEach(function(transceiver){states[transceiver.iceTransport.state]++;states[transceiver.dtlsTransport.state]++;});// ICETransport.completed and connected are the same for this purpose.\nstates.connected+=states.completed;newState='new';if(states.failed>0){newState='failed';}else if(states.connecting>0||states.checking>0){newState='connecting';}else if(states.disconnected>0){newState='disconnected';}else if(states.new>0){newState='new';}else if(states.connected>0||states.completed>0){newState='connected';}if(newState!==self.iceConnectionState){self.iceConnectionState=newState;var event=new Event('iceconnectionstatechange');this.dispatchEvent(event);if(this.oniceconnectionstatechange!==null){this.oniceconnectionstatechange(event);}}};RTCPeerConnection.prototype.createOffer=function(){var self=this;if(this._pendingOffer){throw new Error('createOffer called while there is a pending offer.');}var offerOptions;if(arguments.length===1&&typeof arguments[0]!=='function'){offerOptions=arguments[0];}else if(arguments.length===3){offerOptions=arguments[2];}var numAudioTracks=this.transceivers.filter(function(t){return t.kind==='audio';}).length;var numVideoTracks=this.transceivers.filter(function(t){return t.kind==='video';}).length;// Determine number of audio and video tracks we need to send/recv.\nif(offerOptions){// Reject Chrome legacy constraints.\nif(offerOptions.mandatory||offerOptions.optional){throw new TypeError('Legacy mandatory/optional constraints not supported.');}if(offerOptions.offerToReceiveAudio!==undefined){if(offerOptions.offerToReceiveAudio===true){numAudioTracks=1;}else if(offerOptions.offerToReceiveAudio===false){numAudioTracks=0;}else{numAudioTracks=offerOptions.offerToReceiveAudio;}}if(offerOptions.offerToReceiveVideo!==undefined){if(offerOptions.offerToReceiveVideo===true){numVideoTracks=1;}else if(offerOptions.offerToReceiveVideo===false){numVideoTracks=0;}else{numVideoTracks=offerOptions.offerToReceiveVideo;}}}this.transceivers.forEach(function(transceiver){if(transceiver.kind==='audio'){numAudioTracks--;if(numAudioTracks<0){transceiver.wantReceive=false;}}else if(transceiver.kind==='video'){numVideoTracks--;if(numVideoTracks<0){transceiver.wantReceive=false;}}});// Create M-lines for recvonly streams.\nwhile(numAudioTracks>0||numVideoTracks>0){if(numAudioTracks>0){this._createTransceiver('audio');numAudioTracks--;}if(numVideoTracks>0){this._createTransceiver('video');numVideoTracks--;}}// reorder tracks\nvar transceivers=sortTracks(this.transceivers);var sdp=SDPUtils.writeSessionBoilerplate();transceivers.forEach(function(transceiver,sdpMLineIndex){// For each track, create an ice gatherer, ice transport,\n// dtls transport, potentially rtpsender and rtpreceiver.\nvar track=transceiver.track;var kind=transceiver.kind;var mid=SDPUtils.generateIdentifier();transceiver.mid=mid;if(!transceiver.iceGatherer){transceiver.iceGatherer=self.usingBundle&&sdpMLineIndex>0?transceivers[0].iceGatherer:self._createIceGatherer(mid,sdpMLineIndex);}var localCapabilities=window.RTCRtpSender.getCapabilities(kind);// filter RTX until additional stuff needed for RTX is implemented\n// in adapter.js\nif(edgeVersion<15019){localCapabilities.codecs=localCapabilities.codecs.filter(function(codec){return codec.name!=='rtx';});}localCapabilities.codecs.forEach(function(codec){// work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n// by adding level-asymmetry-allowed=1\nif(codec.name==='H264'&&codec.parameters['level-asymmetry-allowed']===undefined){codec.parameters['level-asymmetry-allowed']='1';}});// generate an ssrc now, to be used later in rtpSender.send\nvar sendEncodingParameters=[{ssrc:(2*sdpMLineIndex+1)*1001}];if(track){// add RTX\nif(edgeVersion>=15019&&kind==='video'){sendEncodingParameters[0].rtx={ssrc:(2*sdpMLineIndex+1)*1001+1};}}if(transceiver.wantReceive){transceiver.rtpReceiver=new window.RTCRtpReceiver(transceiver.dtlsTransport,kind);}transceiver.localCapabilities=localCapabilities;transceiver.sendEncodingParameters=sendEncodingParameters;});// always offer BUNDLE and dispose on return if not supported.\nif(this._config.bundlePolicy!=='max-compat'){sdp+='a=group:BUNDLE '+transceivers.map(function(t){return t.mid;}).join(' ')+'\\r\\n';}sdp+='a=ice-options:trickle\\r\\n';transceivers.forEach(function(transceiver,sdpMLineIndex){sdp+=SDPUtils.writeMediaSection(transceiver,transceiver.localCapabilities,'offer',transceiver.stream);sdp+='a=rtcp-rsize\\r\\n';});this._pendingOffer=transceivers;var desc=new window.RTCSessionDescription({type:'offer',sdp:sdp});if(arguments.length&&typeof arguments[0]==='function'){window.setTimeout(arguments[0],0,desc);}return Promise.resolve(desc);};RTCPeerConnection.prototype.createAnswer=function(){var sdp=SDPUtils.writeSessionBoilerplate();if(this.usingBundle){sdp+='a=group:BUNDLE '+this.transceivers.map(function(t){return t.mid;}).join(' ')+'\\r\\n';}this.transceivers.forEach(function(transceiver,sdpMLineIndex){if(transceiver.isDatachannel){sdp+='m=application 0 DTLS/SCTP 5000\\r\\n'+'c=IN IP4 0.0.0.0\\r\\n'+'a=mid:'+transceiver.mid+'\\r\\n';return;}// FIXME: look at direction.\nif(transceiver.stream){var localTrack;if(transceiver.kind==='audio'){localTrack=transceiver.stream.getAudioTracks()[0];}else if(transceiver.kind==='video'){localTrack=transceiver.stream.getVideoTracks()[0];}if(localTrack){// add RTX\nif(edgeVersion>=15019&&transceiver.kind==='video'){transceiver.sendEncodingParameters[0].rtx={ssrc:(2*sdpMLineIndex+2)*1001+1};}}}// Calculate intersection of capabilities.\nvar commonCapabilities=getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);var hasRtx=commonCapabilities.codecs.filter(function(c){return c.name.toLowerCase()==='rtx';}).length;if(!hasRtx&&transceiver.sendEncodingParameters[0].rtx){delete transceiver.sendEncodingParameters[0].rtx;}sdp+=SDPUtils.writeMediaSection(transceiver,commonCapabilities,'answer',transceiver.stream);if(transceiver.rtcpParameters&&transceiver.rtcpParameters.reducedSize){sdp+='a=rtcp-rsize\\r\\n';}});var desc=new window.RTCSessionDescription({type:'answer',sdp:sdp});if(arguments.length&&typeof arguments[0]==='function'){window.setTimeout(arguments[0],0,desc);}return Promise.resolve(desc);};RTCPeerConnection.prototype.addIceCandidate=function(candidate){if(!candidate){for(var j=0;j<this.transceivers.length;j++){this.transceivers[j].iceTransport.addRemoteCandidate({});if(this.usingBundle){return Promise.resolve();}}}else{var mLineIndex=candidate.sdpMLineIndex;if(candidate.sdpMid){for(var i=0;i<this.transceivers.length;i++){if(this.transceivers[i].mid===candidate.sdpMid){mLineIndex=i;break;}}}var transceiver=this.transceivers[mLineIndex];if(transceiver){var cand=Object.keys(candidate.candidate).length>0?SDPUtils.parseCandidate(candidate.candidate):{};// Ignore Chrome's invalid candidates since Edge does not like them.\nif(cand.protocol==='tcp'&&(cand.port===0||cand.port===9)){return Promise.resolve();}// Ignore RTCP candidates, we assume RTCP-MUX.\nif(cand.component&&!(cand.component==='1'||cand.component===1)){return Promise.resolve();}transceiver.iceTransport.addRemoteCandidate(cand);// update the remoteDescription.\nvar sections=SDPUtils.splitSections(this.remoteDescription.sdp);sections[mLineIndex+1]+=(cand.type?candidate.candidate.trim():'a=end-of-candidates')+'\\r\\n';this.remoteDescription.sdp=sections.join('');}}if(arguments.length>1&&typeof arguments[1]==='function'){window.setTimeout(arguments[1],0);}return Promise.resolve();};RTCPeerConnection.prototype.getStats=function(){var promises=[];this.transceivers.forEach(function(transceiver){['rtpSender','rtpReceiver','iceGatherer','iceTransport','dtlsTransport'].forEach(function(method){if(transceiver[method]){promises.push(transceiver[method].getStats());}});});var cb=arguments.length>1&&typeof arguments[1]==='function'&&arguments[1];var fixStatsType=function fixStatsType(stat){return{inboundrtp:'inbound-rtp',outboundrtp:'outbound-rtp',candidatepair:'candidate-pair',localcandidate:'local-candidate',remotecandidate:'remote-candidate'}[stat.type]||stat.type;};return new Promise(function(resolve){// shim getStats with maplike support\nvar results=new Map();Promise.all(promises).then(function(res){res.forEach(function(result){Object.keys(result).forEach(function(id){result[id].type=fixStatsType(result[id]);results.set(id,result[id]);});});if(cb){window.setTimeout(cb,0,results);}resolve(results);});});};return RTCPeerConnection;};},{\"sdp\":1}],9:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var utils=require('../utils');var firefoxShim={shimOnTrack:function shimOnTrack(window){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.RTCPeerConnection&&!('ontrack'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'ontrack',{get:function get(){return this._ontrack;},set:function set(f){if(this._ontrack){this.removeEventListener('track',this._ontrack);this.removeEventListener('addstream',this._ontrackpoly);}this.addEventListener('track',this._ontrack=f);this.addEventListener('addstream',this._ontrackpoly=function(e){e.stream.getTracks().forEach(function(track){var event=new Event('track');event.track=track;event.receiver={track:track};event.streams=[e.stream];this.dispatchEvent(event);}.bind(this));}.bind(this));}});}},shimSourceObject:function shimSourceObject(window){// Firefox has supported mozSrcObject since FF22, unprefixed in 42.\nif((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'){if(window.HTMLMediaElement&&!('srcObject'in window.HTMLMediaElement.prototype)){// Shim the srcObject property, once, when HTMLMediaElement is found.\nObject.defineProperty(window.HTMLMediaElement.prototype,'srcObject',{get:function get(){return this.mozSrcObject;},set:function set(stream){this.mozSrcObject=stream;}});}}},shimPeerConnection:function shimPeerConnection(window){var browserDetails=utils.detectBrowser(window);if((typeof window===\"undefined\"?\"undefined\":_typeof(window))!=='object'||!(window.RTCPeerConnection||window.mozRTCPeerConnection)){return;// probably media.peerconnection.enabled=false in about:config\n}// The RTCPeerConnection object.\nif(!window.RTCPeerConnection){window.RTCPeerConnection=function(pcConfig,pcConstraints){if(browserDetails.version<38){// .urls is not supported in FF < 38.\n// create RTCIceServers with a single url.\nif(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(server.hasOwnProperty('urls')){for(var j=0;j<server.urls.length;j++){var newServer={url:server.urls[j]};if(server.urls[j].indexOf('turn')===0){newServer.username=server.username;newServer.credential=server.credential;}newIceServers.push(newServer);}}else{newIceServers.push(pcConfig.iceServers[i]);}}pcConfig.iceServers=newIceServers;}}return new window.mozRTCPeerConnection(pcConfig,pcConstraints);};window.RTCPeerConnection.prototype=window.mozRTCPeerConnection.prototype;// wrap static methods. Currently just generateCertificate.\nif(window.mozRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,'generateCertificate',{get:function get(){return window.mozRTCPeerConnection.generateCertificate;}});}window.RTCSessionDescription=window.mozRTCSessionDescription;window.RTCIceCandidate=window.mozRTCIceCandidate;}// shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=window.RTCPeerConnection.prototype[method];window.RTCPeerConnection.prototype[method]=function(){arguments[0]=new(method==='addIceCandidate'?window.RTCIceCandidate:window.RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments);};});// support for addIceCandidate(null or undefined)\nvar nativeAddIceCandidate=window.RTCPeerConnection.prototype.addIceCandidate;window.RTCPeerConnection.prototype.addIceCandidate=function(){if(!arguments[0]){if(arguments[1]){arguments[1].apply(null);}return Promise.resolve();}return nativeAddIceCandidate.apply(this,arguments);};// shim getStats with maplike support\nvar makeMapStats=function makeMapStats(stats){var map=new Map();Object.keys(stats).forEach(function(key){map.set(key,stats[key]);map[key]=stats[key];});return map;};var modernStatsTypes={inboundrtp:'inbound-rtp',outboundrtp:'outbound-rtp',candidatepair:'candidate-pair',localcandidate:'local-candidate',remotecandidate:'remote-candidate'};var nativeGetStats=window.RTCPeerConnection.prototype.getStats;window.RTCPeerConnection.prototype.getStats=function(selector,onSucc,onErr){return nativeGetStats.apply(this,[selector||null]).then(function(stats){if(browserDetails.version<48){stats=makeMapStats(stats);}if(browserDetails.version<53&&!onSucc){// Shim only promise getStats with spec-hyphens in type names\n// Leave callback version alone; misc old uses of forEach before Map\ntry{stats.forEach(function(stat){stat.type=modernStatsTypes[stat.type]||stat.type;});}catch(e){if(e.name!=='TypeError'){throw e;}// Avoid TypeError: \"type\" is read-only, in old versions. 34-43ish\nstats.forEach(function(stat,i){stats.set(i,Object.assign({},stat,{type:modernStatsTypes[stat.type]||stat.type}));});}}return stats;}).then(onSucc,onErr);};}};// Expose public methods.\nmodule.exports={shimOnTrack:firefoxShim.shimOnTrack,shimSourceObject:firefoxShim.shimSourceObject,shimPeerConnection:firefoxShim.shimPeerConnection,shimGetUserMedia:require('./getusermedia')};},{\"../utils\":12,\"./getusermedia\":10}],10:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var utils=require('../utils');var logging=utils.log;// Expose public methods.\nmodule.exports=function(window){var browserDetails=utils.detectBrowser(window);var navigator=window&&window.navigator;var MediaStreamTrack=window&&window.MediaStreamTrack;var shimError_=function shimError_(e){return{name:{InternalError:'NotReadableError',NotSupportedError:'TypeError',PermissionDeniedError:'NotAllowedError',SecurityError:'NotAllowedError'}[e.name]||e.name,message:{'The operation is insecure.':'The request is not allowed by the '+'user agent or the platform in the current context.'}[e.message]||e.message,constraint:e.constraint,toString:function toString(){return this.name+(this.message&&': ')+this.message;}};};// getUserMedia constraints shim.\nvar getUserMedia_=function getUserMedia_(constraints,onSuccess,onError){var constraintsToFF37_=function constraintsToFF37_(c){if((typeof c===\"undefined\"?\"undefined\":_typeof(c))!=='object'||c.require){return c;}var require=[];Object.keys(c).forEach(function(key){if(key==='require'||key==='advanced'||key==='mediaSource'){return;}var r=c[key]=_typeof(c[key])==='object'?c[key]:{ideal:c[key]};if(r.min!==undefined||r.max!==undefined||r.exact!==undefined){require.push(key);}if(r.exact!==undefined){if(typeof r.exact==='number'){r.min=r.max=r.exact;}else{c[key]=r.exact;}delete r.exact;}if(r.ideal!==undefined){c.advanced=c.advanced||[];var oc={};if(typeof r.ideal==='number'){oc[key]={min:r.ideal,max:r.ideal};}else{oc[key]=r.ideal;}c.advanced.push(oc);delete r.ideal;if(!Object.keys(r).length){delete c[key];}}});if(require.length){c.require=require;}return c;};constraints=JSON.parse(JSON.stringify(constraints));if(browserDetails.version<38){logging('spec: '+JSON.stringify(constraints));if(constraints.audio){constraints.audio=constraintsToFF37_(constraints.audio);}if(constraints.video){constraints.video=constraintsToFF37_(constraints.video);}logging('ff37: '+JSON.stringify(constraints));}return navigator.mozGetUserMedia(constraints,onSuccess,function(e){onError(shimError_(e));});};// Returns the result of getUserMedia as a Promise.\nvar getUserMediaPromise_=function getUserMediaPromise_(constraints){return new Promise(function(resolve,reject){getUserMedia_(constraints,resolve,reject);});};// Shim for mediaDevices on older versions.\nif(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:getUserMediaPromise_,addEventListener:function addEventListener(){},removeEventListener:function removeEventListener(){}};}navigator.mediaDevices.enumerateDevices=navigator.mediaDevices.enumerateDevices||function(){return new Promise(function(resolve){var infos=[{kind:'audioinput',deviceId:'default',label:'',groupId:''},{kind:'videoinput',deviceId:'default',label:'',groupId:''}];resolve(infos);});};if(browserDetails.version<41){// Work around http://bugzil.la/1169665\nvar orgEnumerateDevices=navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);navigator.mediaDevices.enumerateDevices=function(){return orgEnumerateDevices().then(undefined,function(e){if(e.name==='NotFoundError'){return[];}throw e;});};}if(browserDetails.version<49){var origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){return origGetUserMedia(c).then(function(stream){// Work around https://bugzil.la/802326\nif(c.audio&&!stream.getAudioTracks().length||c.video&&!stream.getVideoTracks().length){stream.getTracks().forEach(function(track){track.stop();});throw new DOMException('The object can not be found here.','NotFoundError');}return stream;},function(e){return Promise.reject(shimError_(e));});};}if(!(browserDetails.version>55&&'autoGainControl'in navigator.mediaDevices.getSupportedConstraints())){var remap=function remap(obj,a,b){if(a in obj&&!(b in obj)){obj[b]=obj[a];delete obj[a];}};var nativeGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){if((typeof c===\"undefined\"?\"undefined\":_typeof(c))==='object'&&_typeof(c.audio)==='object'){c=JSON.parse(JSON.stringify(c));remap(c.audio,'autoGainControl','mozAutoGainControl');remap(c.audio,'noiseSuppression','mozNoiseSuppression');}return nativeGetUserMedia(c);};if(MediaStreamTrack&&MediaStreamTrack.prototype.getSettings){var nativeGetSettings=MediaStreamTrack.prototype.getSettings;MediaStreamTrack.prototype.getSettings=function(){var obj=nativeGetSettings.apply(this,arguments);remap(obj,'mozAutoGainControl','autoGainControl');remap(obj,'mozNoiseSuppression','noiseSuppression');return obj;};}if(MediaStreamTrack&&MediaStreamTrack.prototype.applyConstraints){var nativeApplyConstraints=MediaStreamTrack.prototype.applyConstraints;MediaStreamTrack.prototype.applyConstraints=function(c){if(this.kind==='audio'&&(typeof c===\"undefined\"?\"undefined\":_typeof(c))==='object'){c=JSON.parse(JSON.stringify(c));remap(c,'autoGainControl','mozAutoGainControl');remap(c,'noiseSuppression','mozNoiseSuppression');}return nativeApplyConstraints.apply(this,[c]);};}}navigator.getUserMedia=function(constraints,onSuccess,onError){if(browserDetails.version<44){return getUserMedia_(constraints,onSuccess,onError);}// Replace Firefox 44+'s deprecation warning with unprefixed version.\nconsole.warn('navigator.getUserMedia has been replaced by '+'navigator.mediaDevices.getUserMedia');navigator.mediaDevices.getUserMedia(constraints).then(onSuccess,onError);};};},{\"../utils\":12}],11:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */'use strict';var safariShim={// TODO: DrAlex, should be here, double check against LayoutTests\n// TODO: once the back-end for the mac port is done, add.\n// TODO: check for webkitGTK+\n// shimPeerConnection: function() { },\nshimAddStream:function shimAddStream(window){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.RTCPeerConnection&&!('addStream'in window.RTCPeerConnection.prototype)){window.RTCPeerConnection.prototype.addStream=function(stream){var self=this;stream.getTracks().forEach(function(track){self.addTrack(track,stream);});};}},shimOnAddStream:function shimOnAddStream(window){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.RTCPeerConnection&&!('onaddstream'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'onaddstream',{get:function get(){return this._onaddstream;},set:function set(f){if(this._onaddstream){this.removeEventListener('addstream',this._onaddstream);this.removeEventListener('track',this._onaddstreampoly);}this.addEventListener('addstream',this._onaddstream=f);this.addEventListener('track',this._onaddstreampoly=function(e){var stream=e.streams[0];if(!this._streams){this._streams=[];}if(this._streams.indexOf(stream)>=0){return;}this._streams.push(stream);var event=new Event('addstream');event.stream=e.streams[0];this.dispatchEvent(event);}.bind(this));}});}},shimCallbacksAPI:function shimCallbacksAPI(window){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))!=='object'||!window.RTCPeerConnection){return;}var prototype=window.RTCPeerConnection.prototype;var createOffer=prototype.createOffer;var createAnswer=prototype.createAnswer;var setLocalDescription=prototype.setLocalDescription;var setRemoteDescription=prototype.setRemoteDescription;var addIceCandidate=prototype.addIceCandidate;prototype.createOffer=function(successCallback,failureCallback){var options=arguments.length>=2?arguments[2]:arguments[0];var promise=createOffer.apply(this,[options]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.createAnswer=function(successCallback,failureCallback){var options=arguments.length>=2?arguments[2]:arguments[0];var promise=createAnswer.apply(this,[options]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};var withCallback=function withCallback(description,successCallback,failureCallback){var promise=setLocalDescription.apply(this,[description]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.setLocalDescription=withCallback;withCallback=function withCallback(description,successCallback,failureCallback){var promise=setRemoteDescription.apply(this,[description]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.setRemoteDescription=withCallback;withCallback=function withCallback(candidate,successCallback,failureCallback){var promise=addIceCandidate.apply(this,[candidate]);if(!failureCallback){return promise;}promise.then(successCallback,failureCallback);return Promise.resolve();};prototype.addIceCandidate=withCallback;},shimGetUserMedia:function shimGetUserMedia(window){var navigator=window&&window.navigator;if(!navigator.getUserMedia){if(navigator.webkitGetUserMedia){navigator.getUserMedia=navigator.webkitGetUserMedia.bind(navigator);}else if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia){navigator.getUserMedia=function(constraints,cb,errcb){navigator.mediaDevices.getUserMedia(constraints).then(cb,errcb);}.bind(navigator);}}}};// Expose public methods.\nmodule.exports={shimCallbacksAPI:safariShim.shimCallbacksAPI,shimAddStream:safariShim.shimAddStream,shimOnAddStream:safariShim.shimOnAddStream,shimGetUserMedia:safariShim.shimGetUserMedia// TODO\n// shimPeerConnection: safariShim.shimPeerConnection\n};},{}],12:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var logDisabled_=true;// Utility methods.\nvar utils={disableLog:function disableLog(bool){if(typeof bool!=='boolean'){return new Error('Argument type: '+(typeof bool===\"undefined\"?\"undefined\":_typeof(bool))+'. Please use a boolean.');}logDisabled_=bool;return bool?'adapter.js logging disabled':'adapter.js logging enabled';},log:function log(){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'){if(logDisabled_){return;}if(typeof console!=='undefined'&&typeof console.log==='function'){console.log.apply(console,arguments);}}},/**\n             * Extract browser version out of the provided user agent string.\n             *\n             * @param {!string} uastring userAgent string.\n             * @param {!string} expr Regular expression used as match criteria.\n             * @param {!number} pos position in the version string to be returned.\n             * @return {!number} browser version.\n             */extractVersion:function extractVersion(uastring,expr,pos){var match=uastring.match(expr);return match&&match.length>=pos&&parseInt(match[pos],10);},/**\n             * Browser detector.\n             *\n             * @return {object} result containing browser and version\n             *     properties.\n             */detectBrowser:function detectBrowser(window){var navigator=window&&window.navigator;// Returned result object.\nvar result={};result.browser=null;result.version=null;// Fail early if it's not a browser\nif(typeof window==='undefined'||!window.navigator){result.browser='Not a browser.';return result;}// Firefox.\nif(navigator.mozGetUserMedia){result.browser='firefox';result.version=this.extractVersion(navigator.userAgent,/Firefox\\/(\\d+)\\./,1);}else if(navigator.webkitGetUserMedia){// Chrome, Chromium, Webview, Opera, all use the chrome shim for now\nif(window.webkitRTCPeerConnection){result.browser='chrome';result.version=this.extractVersion(navigator.userAgent,/Chrom(e|ium)\\/(\\d+)\\./,2);}else{// Safari (in an unpublished version) or unknown webkit-based.\nif(navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)){result.browser='safari';result.version=this.extractVersion(navigator.userAgent,/AppleWebKit\\/(\\d+)\\./,1);}else{// unknown webkit-based browser.\nresult.browser='Unsupported webkit-based browser '+'with GUM support but no WebRTC support.';return result;}}}else if(navigator.mediaDevices&&navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)){// Edge.\nresult.browser='edge';result.version=this.extractVersion(navigator.userAgent,/Edge\\/(\\d+).(\\d+)$/,2);}else if(navigator.mediaDevices&&navigator.userAgent.match(/AppleWebKit\\/(\\d+)\\./)){// Safari, with webkitGetUserMedia removed.\nresult.browser='safari';result.version=this.extractVersion(navigator.userAgent,/AppleWebKit\\/(\\d+)\\./,1);}else{// Default fallthrough: not supported.\nresult.browser='Not a supported browser.';return result;}return result;},// shimCreateObjectURL must be called before shimSourceObject to avoid loop.\nshimCreateObjectURL:function shimCreateObjectURL(window){var URL=window&&window.URL;if(!((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.HTMLMediaElement&&'srcObject'in window.HTMLMediaElement.prototype)){// Only shim CreateObjectURL using srcObject if srcObject exists.\nreturn undefined;}var nativeCreateObjectURL=URL.createObjectURL.bind(URL);var nativeRevokeObjectURL=URL.revokeObjectURL.bind(URL);var streams=new Map(),newId=0;URL.createObjectURL=function(stream){if('getTracks'in stream){var url='polyblob:'+ ++newId;streams.set(url,stream);console.log('URL.createObjectURL(stream) is deprecated! '+'Use elem.srcObject = stream instead!');return url;}return nativeCreateObjectURL(stream);};URL.revokeObjectURL=function(url){nativeRevokeObjectURL(url);streams.delete(url);};var dsc=Object.getOwnPropertyDescriptor(window.HTMLMediaElement.prototype,'src');Object.defineProperty(window.HTMLMediaElement.prototype,'src',{get:function get(){return dsc.get.apply(this);},set:function set(url){this.srcObject=streams.get(url)||null;return dsc.set.apply(this,[url]);}});var nativeSetAttribute=window.HTMLMediaElement.prototype.setAttribute;window.HTMLMediaElement.prototype.setAttribute=function(){if(arguments.length===2&&(''+arguments[0]).toLowerCase()==='src'){this.srcObject=streams.get(arguments[1])||null;}return nativeSetAttribute.apply(this,arguments);};}};// Export.\nmodule.exports={log:utils.log,disableLog:utils.disableLog,extractVersion:utils.extractVersion,shimCreateObjectURL:utils.shimCreateObjectURL,detectBrowser:utils.detectBrowser.bind(utils)};},{}]},{},[2])(2);});(function(f){if(( false?\"undefined\":_typeof(exports))===\"object\"&&typeof module!==\"undefined\"){module.exports=f();}else if(true){!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (f),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else{var g;if(typeof window!==\"undefined\"){g=window;}else if(typeof global!==\"undefined\"){g=global;}else if(typeof self!==\"undefined\"){g=self;}else{g=this;}g.SimpleWebRTC=f();}})(function(){var define,module,exports;return function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f;}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e);},l,l.exports,e,t,n,r);}return n[o].exports;}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++){s(r[o]);}return s;}({1:[function(require,module,exports){module.exports=after;function after(count,callback,err_cb){var bail=false;err_cb=err_cb||noop;proxy.count=count;return count===0?callback():proxy;function proxy(err,result){if(proxy.count<=0){throw new Error('after called too many times');}--proxy.count;// after first error, rest are passed to err_cb\nif(err){bail=true;callback(err);// future error callbacks will go to error handler\ncallback=err_cb;}else if(proxy.count===0&&!bail){callback(null,result);}}}function noop(){}},{}],2:[function(require,module,exports){/**\n         * An abstraction for slicing an arraybuffer even when\n         * ArrayBuffer.prototype.slice is not supported\n         *\n         * @api public\n         */module.exports=function(arraybuffer,start,end){var bytes=arraybuffer.byteLength;start=start||0;end=end||bytes;if(arraybuffer.slice){return arraybuffer.slice(start,end);}if(start<0){start+=bytes;}if(end<0){end+=bytes;}if(end>bytes){end=bytes;}if(start>=bytes||start>=end||bytes===0){return new ArrayBuffer(0);}var abv=new Uint8Array(arraybuffer);var result=new Uint8Array(end-start);for(var i=start,ii=0;i<end;i++,ii++){result[ii]=abv[i];}return result.buffer;};},{}],3:[function(require,module,exports){var adapter=require('webrtc-adapter');module.exports=function(stream,el,options){var item;var URL=window.URL;var element=el;var opts={autoplay:true,mirror:false,muted:false,audio:false,disableContextMenu:false};if(options){for(item in options){opts[item]=options[item];}}if(!element){element=document.createElement(opts.audio?'audio':'video');}else if(element.tagName.toLowerCase()==='audio'){opts.audio=true;}if(opts.disableContextMenu){element.oncontextmenu=function(e){e.preventDefault();};}if(opts.autoplay)element.autoplay='autoplay';if(opts.muted)element.muted=true;if(!opts.audio&&opts.mirror){['','moz','webkit','o','ms'].forEach(function(prefix){var styleName=prefix?prefix+'Transform':'transform';element.style[styleName]='scaleX(-1)';});}element.srcObject=stream;return element;};},{\"webrtc-adapter\":4}],4:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';// Shimming starts here.\n(function(){// Utils.\nvar logging=require('./utils').log;var browserDetails=require('./utils').browserDetails;// Export to the adapter global object visible in the browser.\nmodule.exports.browserDetails=browserDetails;module.exports.extractVersion=require('./utils').extractVersion;module.exports.disableLog=require('./utils').disableLog;// Uncomment the line below if you want logging to occur, including logging\n// for the switch statement below. Can also be turned on in the browser via\n// adapter.disableLog(false), but then logging from the switch statement below\n// will not appear.\n// require('./utils').disableLog(false);\n// Browser shims.\nvar chromeShim=require('./chrome/chrome_shim')||null;var edgeShim=require('./edge/edge_shim')||null;var firefoxShim=require('./firefox/firefox_shim')||null;var safariShim=require('./safari/safari_shim')||null;// Shim browser if found.\nswitch(browserDetails.browser){case'opera':// fallthrough as it uses chrome shims\ncase'chrome':if(!chromeShim||!chromeShim.shimPeerConnection){logging('Chrome shim is not included in this adapter release.');return;}logging('adapter.js shimming chrome.');// Export to the adapter global object visible in the browser.\nmodule.exports.browserShim=chromeShim;chromeShim.shimGetUserMedia();chromeShim.shimMediaStream();chromeShim.shimSourceObject();chromeShim.shimPeerConnection();chromeShim.shimOnTrack();break;case'firefox':if(!firefoxShim||!firefoxShim.shimPeerConnection){logging('Firefox shim is not included in this adapter release.');return;}logging('adapter.js shimming firefox.');// Export to the adapter global object visible in the browser.\nmodule.exports.browserShim=firefoxShim;firefoxShim.shimGetUserMedia();firefoxShim.shimSourceObject();firefoxShim.shimPeerConnection();firefoxShim.shimOnTrack();break;case'edge':if(!edgeShim||!edgeShim.shimPeerConnection){logging('MS edge shim is not included in this adapter release.');return;}logging('adapter.js shimming edge.');// Export to the adapter global object visible in the browser.\nmodule.exports.browserShim=edgeShim;edgeShim.shimGetUserMedia();edgeShim.shimPeerConnection();break;case'safari':if(!safariShim){logging('Safari shim is not included in this adapter release.');return;}logging('adapter.js shimming safari.');// Export to the adapter global object visible in the browser.\nmodule.exports.browserShim=safariShim;safariShim.shimGetUserMedia();break;default:logging('Unsupported browser!');}})();},{\"./chrome/chrome_shim\":5,\"./edge/edge_shim\":7,\"./firefox/firefox_shim\":9,\"./safari/safari_shim\":11,\"./utils\":12}],5:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var logging=require('../utils.js').log;var browserDetails=require('../utils.js').browserDetails;var chromeShim={shimMediaStream:function shimMediaStream(){window.MediaStream=window.MediaStream||window.webkitMediaStream;},shimOnTrack:function shimOnTrack(){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.RTCPeerConnection&&!('ontrack'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'ontrack',{get:function get(){return this._ontrack;},set:function set(f){var self=this;if(this._ontrack){this.removeEventListener('track',this._ontrack);this.removeEventListener('addstream',this._ontrackpoly);}this.addEventListener('track',this._ontrack=f);this.addEventListener('addstream',this._ontrackpoly=function(e){// onaddstream does not fire when a track is added to an existing\n// stream. But stream.onaddtrack is implemented so we use that.\ne.stream.addEventListener('addtrack',function(te){var event=new Event('track');event.track=te.track;event.receiver={track:te.track};event.streams=[e.stream];self.dispatchEvent(event);});e.stream.getTracks().forEach(function(track){var event=new Event('track');event.track=track;event.receiver={track:track};event.streams=[e.stream];this.dispatchEvent(event);}.bind(this));}.bind(this));}});}},shimSourceObject:function shimSourceObject(){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'){if(window.HTMLMediaElement&&!('srcObject'in window.HTMLMediaElement.prototype)){// Shim the srcObject property, once, when HTMLMediaElement is found.\nObject.defineProperty(window.HTMLMediaElement.prototype,'srcObject',{get:function get(){return this._srcObject;},set:function set(stream){var self=this;// Use _srcObject as a private property for this shim\nthis._srcObject=stream;if(this.src){URL.revokeObjectURL(this.src);}if(!stream){this.src='';return;}this.src=URL.createObjectURL(stream);// We need to recreate the blob url when a track is added or\n// removed. Doing it manually since we want to avoid a recursion.\nstream.addEventListener('addtrack',function(){if(self.src){URL.revokeObjectURL(self.src);}self.src=URL.createObjectURL(stream);});stream.addEventListener('removetrack',function(){if(self.src){URL.revokeObjectURL(self.src);}self.src=URL.createObjectURL(stream);});}});}}},shimPeerConnection:function shimPeerConnection(){// The RTCPeerConnection object.\nwindow.RTCPeerConnection=function(pcConfig,pcConstraints){// Translate iceTransportPolicy to iceTransports,\n// see https://code.google.com/p/webrtc/issues/detail?id=4869\nlogging('PeerConnection');if(pcConfig&&pcConfig.iceTransportPolicy){pcConfig.iceTransports=pcConfig.iceTransportPolicy;}var pc=new webkitRTCPeerConnection(pcConfig,pcConstraints);var origGetStats=pc.getStats.bind(pc);pc.getStats=function(selector,successCallback,errorCallback){var self=this;var args=arguments;// If selector is a function then we are in the old style stats so just\n// pass back the original getStats format to avoid breaking old users.\nif(arguments.length>0&&typeof selector==='function'){return origGetStats(selector,successCallback);}var fixChromeStats_=function fixChromeStats_(response){var standardReport={};var reports=response.result();reports.forEach(function(report){var standardStats={id:report.id,timestamp:report.timestamp,type:report.type};report.names().forEach(function(name){standardStats[name]=report.stat(name);});standardReport[standardStats.id]=standardStats;});return standardReport;};// shim getStats with maplike support\nvar makeMapStats=function makeMapStats(stats,legacyStats){var map=new Map(Object.keys(stats).map(function(key){return[key,stats[key]];}));legacyStats=legacyStats||stats;Object.keys(legacyStats).forEach(function(key){map[key]=legacyStats[key];});return map;};if(arguments.length>=2){var successCallbackWrapper_=function successCallbackWrapper_(response){args[1](makeMapStats(fixChromeStats_(response)));};return origGetStats.apply(this,[successCallbackWrapper_,arguments[0]]);}// promise-support\nreturn new Promise(function(resolve,reject){if(args.length===1&&(typeof selector===\"undefined\"?\"undefined\":_typeof(selector))==='object'){origGetStats.apply(self,[function(response){resolve(makeMapStats(fixChromeStats_(response)));},reject]);}else{// Preserve legacy chrome stats only on legacy access of stats obj\norigGetStats.apply(self,[function(response){resolve(makeMapStats(fixChromeStats_(response),response.result()));},reject]);}}).then(successCallback,errorCallback);};return pc;};window.RTCPeerConnection.prototype=webkitRTCPeerConnection.prototype;// wrap static methods. Currently just generateCertificate.\nif(webkitRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,'generateCertificate',{get:function get(){return webkitRTCPeerConnection.generateCertificate;}});}['createOffer','createAnswer'].forEach(function(method){var nativeMethod=webkitRTCPeerConnection.prototype[method];webkitRTCPeerConnection.prototype[method]=function(){var self=this;if(arguments.length<1||arguments.length===1&&_typeof(arguments[0])==='object'){var opts=arguments.length===1?arguments[0]:undefined;return new Promise(function(resolve,reject){nativeMethod.apply(self,[resolve,reject,opts]);});}return nativeMethod.apply(this,arguments);};});// add promise support -- natively available in Chrome 51\nif(browserDetails.version<51){['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=webkitRTCPeerConnection.prototype[method];webkitRTCPeerConnection.prototype[method]=function(){var args=arguments;var self=this;var promise=new Promise(function(resolve,reject){nativeMethod.apply(self,[args[0],resolve,reject]);});if(args.length<2){return promise;}return promise.then(function(){args[1].apply(null,[]);},function(err){if(args.length>=3){args[2].apply(null,[err]);}});};});}// shim implicit creation of RTCSessionDescription/RTCIceCandidate\n['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=webkitRTCPeerConnection.prototype[method];webkitRTCPeerConnection.prototype[method]=function(){arguments[0]=new(method==='addIceCandidate'?RTCIceCandidate:RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments);};});// support for addIceCandidate(null or undefined)\nvar nativeAddIceCandidate=RTCPeerConnection.prototype.addIceCandidate;RTCPeerConnection.prototype.addIceCandidate=function(){if(!arguments[0]){if(arguments[1]){arguments[1].apply(null);}return Promise.resolve();}return nativeAddIceCandidate.apply(this,arguments);};}};// Expose public methods.\nmodule.exports={shimMediaStream:chromeShim.shimMediaStream,shimOnTrack:chromeShim.shimOnTrack,shimSourceObject:chromeShim.shimSourceObject,shimPeerConnection:chromeShim.shimPeerConnection,shimGetUserMedia:require('./getusermedia')};},{\"../utils.js\":12,\"./getusermedia\":6}],6:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var logging=require('../utils.js').log;// Expose public methods.\nmodule.exports=function(){var constraintsToChrome_=function constraintsToChrome_(c){if((typeof c===\"undefined\"?\"undefined\":_typeof(c))!=='object'||c.mandatory||c.optional){return c;}var cc={};Object.keys(c).forEach(function(key){if(key==='require'||key==='advanced'||key==='mediaSource'){return;}var r=_typeof(c[key])==='object'?c[key]:{ideal:c[key]};if(r.exact!==undefined&&typeof r.exact==='number'){r.min=r.max=r.exact;}var oldname_=function oldname_(prefix,name){if(prefix){return prefix+name.charAt(0).toUpperCase()+name.slice(1);}return name==='deviceId'?'sourceId':name;};if(r.ideal!==undefined){cc.optional=cc.optional||[];var oc={};if(typeof r.ideal==='number'){oc[oldname_('min',key)]=r.ideal;cc.optional.push(oc);oc={};oc[oldname_('max',key)]=r.ideal;cc.optional.push(oc);}else{oc[oldname_('',key)]=r.ideal;cc.optional.push(oc);}}if(r.exact!==undefined&&typeof r.exact!=='number'){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_('',key)]=r.exact;}else{['min','max'].forEach(function(mix){if(r[mix]!==undefined){cc.mandatory=cc.mandatory||{};cc.mandatory[oldname_(mix,key)]=r[mix];}});}});if(c.advanced){cc.optional=(cc.optional||[]).concat(c.advanced);}return cc;};var shimConstraints_=function shimConstraints_(constraints,func){constraints=JSON.parse(JSON.stringify(constraints));if(constraints&&constraints.audio){constraints.audio=constraintsToChrome_(constraints.audio);}if(constraints&&_typeof(constraints.video)==='object'){// Shim facingMode for mobile, where it defaults to \"user\".\nvar face=constraints.video.facingMode;face=face&&((typeof face===\"undefined\"?\"undefined\":_typeof(face))==='object'?face:{ideal:face});if(face&&(face.exact==='user'||face.exact==='environment'||face.ideal==='user'||face.ideal==='environment')&&!(navigator.mediaDevices.getSupportedConstraints&&navigator.mediaDevices.getSupportedConstraints().facingMode)){delete constraints.video.facingMode;if(face.exact==='environment'||face.ideal==='environment'){// Look for \"back\" in label, or use last cam (typically back cam).\nreturn navigator.mediaDevices.enumerateDevices().then(function(devices){devices=devices.filter(function(d){return d.kind==='videoinput';});var back=devices.find(function(d){return d.label.toLowerCase().indexOf('back')!==-1;})||devices.length&&devices[devices.length-1];if(back){constraints.video.deviceId=face.exact?{exact:back.deviceId}:{ideal:back.deviceId};}constraints.video=constraintsToChrome_(constraints.video);logging('chrome: '+JSON.stringify(constraints));return func(constraints);});}}constraints.video=constraintsToChrome_(constraints.video);}logging('chrome: '+JSON.stringify(constraints));return func(constraints);};var shimError_=function shimError_(e){return{name:{PermissionDeniedError:'NotAllowedError',ConstraintNotSatisfiedError:'OverconstrainedError'}[e.name]||e.name,message:e.message,constraint:e.constraintName,toString:function toString(){return this.name+(this.message&&': ')+this.message;}};};var getUserMedia_=function getUserMedia_(constraints,onSuccess,onError){shimConstraints_(constraints,function(c){navigator.webkitGetUserMedia(c,onSuccess,function(e){onError(shimError_(e));});});};navigator.getUserMedia=getUserMedia_;// Returns the result of getUserMedia as a Promise.\nvar getUserMediaPromise_=function getUserMediaPromise_(constraints){return new Promise(function(resolve,reject){navigator.getUserMedia(constraints,resolve,reject);});};if(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:getUserMediaPromise_,enumerateDevices:function enumerateDevices(){return new Promise(function(resolve){var kinds={audio:'audioinput',video:'videoinput'};return MediaStreamTrack.getSources(function(devices){resolve(devices.map(function(device){return{label:device.label,kind:kinds[device.kind],deviceId:device.id,groupId:''};}));});});}};}// A shim for getUserMedia method on the mediaDevices object.\n// TODO(KaptenJansson) remove once implemented in Chrome stable.\nif(!navigator.mediaDevices.getUserMedia){navigator.mediaDevices.getUserMedia=function(constraints){return getUserMediaPromise_(constraints);};}else{// Even though Chrome 45 has navigator.mediaDevices and a getUserMedia\n// function which returns a Promise, it does not accept spec-style\n// constraints.\nvar origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(cs){return shimConstraints_(cs,function(c){return origGetUserMedia(c).then(function(stream){if(c.audio&&!stream.getAudioTracks().length||c.video&&!stream.getVideoTracks().length){stream.getTracks().forEach(function(track){track.stop();});throw new DOMException('','NotFoundError');}return stream;},function(e){return Promise.reject(shimError_(e));});});};}// Dummy devicechange event methods.\n// TODO(KaptenJansson) remove once implemented in Chrome stable.\nif(typeof navigator.mediaDevices.addEventListener==='undefined'){navigator.mediaDevices.addEventListener=function(){logging('Dummy mediaDevices.addEventListener called.');};}if(typeof navigator.mediaDevices.removeEventListener==='undefined'){navigator.mediaDevices.removeEventListener=function(){logging('Dummy mediaDevices.removeEventListener called.');};}};},{\"../utils.js\":12}],7:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var SDPUtils=require('sdp');var browserDetails=require('../utils').browserDetails;var edgeShim={shimPeerConnection:function shimPeerConnection(){if(window.RTCIceGatherer){// ORTC defines an RTCIceCandidate object but no constructor.\n// Not implemented in Edge.\nif(!window.RTCIceCandidate){window.RTCIceCandidate=function(args){return args;};}// ORTC does not have a session description object but\n// other browsers (i.e. Chrome) that will support both PC and ORTC\n// in the future might have this defined already.\nif(!window.RTCSessionDescription){window.RTCSessionDescription=function(args){return args;};}// this adds an additional event listener to MediaStrackTrack that signals\n// when a tracks enabled property was changed.\nvar origMSTEnabled=Object.getOwnPropertyDescriptor(MediaStreamTrack.prototype,'enabled');Object.defineProperty(MediaStreamTrack.prototype,'enabled',{set:function set(value){origMSTEnabled.set.call(this,value);var ev=new Event('enabled');ev.enabled=value;this.dispatchEvent(ev);}});}window.RTCPeerConnection=function(config){var self=this;var _eventTarget=document.createDocumentFragment();['addEventListener','removeEventListener','dispatchEvent'].forEach(function(method){self[method]=_eventTarget[method].bind(_eventTarget);});this.onicecandidate=null;this.onaddstream=null;this.ontrack=null;this.onremovestream=null;this.onsignalingstatechange=null;this.oniceconnectionstatechange=null;this.onnegotiationneeded=null;this.ondatachannel=null;this.localStreams=[];this.remoteStreams=[];this.getLocalStreams=function(){return self.localStreams;};this.getRemoteStreams=function(){return self.remoteStreams;};this.localDescription=new RTCSessionDescription({type:'',sdp:''});this.remoteDescription=new RTCSessionDescription({type:'',sdp:''});this.signalingState='stable';this.iceConnectionState='new';this.iceGatheringState='new';this.iceOptions={gatherPolicy:'all',iceServers:[]};if(config&&config.iceTransportPolicy){switch(config.iceTransportPolicy){case'all':case'relay':this.iceOptions.gatherPolicy=config.iceTransportPolicy;break;case'none':// FIXME: remove once implementation and spec have added this.\nthrow new TypeError('iceTransportPolicy \"none\" not supported');default:// don't set iceTransportPolicy.\nbreak;}}this.usingBundle=config&&config.bundlePolicy==='max-bundle';if(config&&config.iceServers){// Edge does not like\n// 1) stun:\n// 2) turn: that does not have all of turn:host:port?transport=udp\n// 3) turn: with ipv6 addresses\nvar iceServers=JSON.parse(JSON.stringify(config.iceServers));this.iceOptions.iceServers=iceServers.filter(function(server){if(server&&server.urls){var urls=server.urls;if(typeof urls==='string'){urls=[urls];}urls=urls.filter(function(url){return url.indexOf('turn:')===0&&url.indexOf('transport=udp')!==-1&&url.indexOf('turn:[')===-1||url.indexOf('stun:')===0&&browserDetails.version>=14393;})[0];return!!urls;}return false;});}this._config=config;// per-track iceGathers, iceTransports, dtlsTransports, rtpSenders, ...\n// everything that is needed to describe a SDP m-line.\nthis.transceivers=[];// since the iceGatherer is currently created in createOffer but we\n// must not emit candidates until after setLocalDescription we buffer\n// them in this array.\nthis._localIceCandidatesBuffer=[];};window.RTCPeerConnection.prototype._emitBufferedCandidates=function(){var self=this;var sections=SDPUtils.splitSections(self.localDescription.sdp);// FIXME: need to apply ice candidates in a way which is async but\n// in-order\nthis._localIceCandidatesBuffer.forEach(function(event){var end=!event.candidate||Object.keys(event.candidate).length===0;if(end){for(var j=1;j<sections.length;j++){if(sections[j].indexOf('\\r\\na=end-of-candidates\\r\\n')===-1){sections[j]+='a=end-of-candidates\\r\\n';}}}else if(event.candidate.candidate.indexOf('typ endOfCandidates')===-1){sections[event.candidate.sdpMLineIndex+1]+='a='+event.candidate.candidate+'\\r\\n';}self.localDescription.sdp=sections.join('');self.dispatchEvent(event);if(self.onicecandidate!==null){self.onicecandidate(event);}if(!event.candidate&&self.iceGatheringState!=='complete'){var complete=self.transceivers.every(function(transceiver){return transceiver.iceGatherer&&transceiver.iceGatherer.state==='completed';});if(complete){self.iceGatheringState='complete';}}});this._localIceCandidatesBuffer=[];};window.RTCPeerConnection.prototype.getConfiguration=function(){return this._config;};window.RTCPeerConnection.prototype.addStream=function(stream){// Clone is necessary for local demos mostly, attaching directly\n// to two different senders does not work (build 10547).\nvar clonedStream=stream.clone();stream.getTracks().forEach(function(track,idx){var clonedTrack=clonedStream.getTracks()[idx];track.addEventListener('enabled',function(event){clonedTrack.enabled=event.enabled;});});this.localStreams.push(clonedStream);this._maybeFireNegotiationNeeded();};window.RTCPeerConnection.prototype.removeStream=function(stream){var idx=this.localStreams.indexOf(stream);if(idx>-1){this.localStreams.splice(idx,1);this._maybeFireNegotiationNeeded();}};window.RTCPeerConnection.prototype.getSenders=function(){return this.transceivers.filter(function(transceiver){return!!transceiver.rtpSender;}).map(function(transceiver){return transceiver.rtpSender;});};window.RTCPeerConnection.prototype.getReceivers=function(){return this.transceivers.filter(function(transceiver){return!!transceiver.rtpReceiver;}).map(function(transceiver){return transceiver.rtpReceiver;});};// Determines the intersection of local and remote capabilities.\nwindow.RTCPeerConnection.prototype._getCommonCapabilities=function(localCapabilities,remoteCapabilities){var commonCapabilities={codecs:[],headerExtensions:[],fecMechanisms:[]};localCapabilities.codecs.forEach(function(lCodec){for(var i=0;i<remoteCapabilities.codecs.length;i++){var rCodec=remoteCapabilities.codecs[i];if(lCodec.name.toLowerCase()===rCodec.name.toLowerCase()&&lCodec.clockRate===rCodec.clockRate){// number of channels is the highest common number of channels\nrCodec.numChannels=Math.min(lCodec.numChannels,rCodec.numChannels);// push rCodec so we reply with offerer payload type\ncommonCapabilities.codecs.push(rCodec);// determine common feedback mechanisms\nrCodec.rtcpFeedback=rCodec.rtcpFeedback.filter(function(fb){for(var j=0;j<lCodec.rtcpFeedback.length;j++){if(lCodec.rtcpFeedback[j].type===fb.type&&lCodec.rtcpFeedback[j].parameter===fb.parameter){return true;}}return false;});// FIXME: also need to determine .parameters\n//  see https://github.com/openpeer/ortc/issues/569\nbreak;}}});localCapabilities.headerExtensions.forEach(function(lHeaderExtension){for(var i=0;i<remoteCapabilities.headerExtensions.length;i++){var rHeaderExtension=remoteCapabilities.headerExtensions[i];if(lHeaderExtension.uri===rHeaderExtension.uri){commonCapabilities.headerExtensions.push(rHeaderExtension);break;}}});// FIXME: fecMechanisms\nreturn commonCapabilities;};// Create ICE gatherer, ICE transport and DTLS transport.\nwindow.RTCPeerConnection.prototype._createIceAndDtlsTransports=function(mid,sdpMLineIndex){var self=this;var iceGatherer=new RTCIceGatherer(self.iceOptions);var iceTransport=new RTCIceTransport(iceGatherer);iceGatherer.onlocalcandidate=function(evt){var event=new Event('icecandidate');event.candidate={sdpMid:mid,sdpMLineIndex:sdpMLineIndex};var cand=evt.candidate;var end=!cand||Object.keys(cand).length===0;// Edge emits an empty object for RTCIceCandidateComplete‥\nif(end){// polyfill since RTCIceGatherer.state is not implemented in\n// Edge 10547 yet.\nif(iceGatherer.state===undefined){iceGatherer.state='completed';}// Emit a candidate with type endOfCandidates to make the samples\n// work. Edge requires addIceCandidate with this empty candidate\n// to start checking. The real solution is to signal\n// end-of-candidates to the other side when getting the null\n// candidate but some apps (like the samples) don't do that.\nevent.candidate.candidate='candidate:1 1 udp 1 0.0.0.0 9 typ endOfCandidates';}else{// RTCIceCandidate doesn't have a component, needs to be added\ncand.component=iceTransport.component==='RTCP'?2:1;event.candidate.candidate=SDPUtils.writeCandidate(cand);}// update local description.\nvar sections=SDPUtils.splitSections(self.localDescription.sdp);if(event.candidate.candidate.indexOf('typ endOfCandidates')===-1){sections[event.candidate.sdpMLineIndex+1]+='a='+event.candidate.candidate+'\\r\\n';}else{sections[event.candidate.sdpMLineIndex+1]+='a=end-of-candidates\\r\\n';}self.localDescription.sdp=sections.join('');var complete=self.transceivers.every(function(transceiver){return transceiver.iceGatherer&&transceiver.iceGatherer.state==='completed';});// Emit candidate if localDescription is set.\n// Also emits null candidate when all gatherers are complete.\nswitch(self.iceGatheringState){case'new':self._localIceCandidatesBuffer.push(event);if(end&&complete){self._localIceCandidatesBuffer.push(new Event('icecandidate'));}break;case'gathering':self._emitBufferedCandidates();self.dispatchEvent(event);if(self.onicecandidate!==null){self.onicecandidate(event);}if(complete){self.dispatchEvent(new Event('icecandidate'));if(self.onicecandidate!==null){self.onicecandidate(new Event('icecandidate'));}self.iceGatheringState='complete';}break;case'complete':// should not happen... currently!\nbreak;default:// no-op.\nbreak;}};iceTransport.onicestatechange=function(){self._updateConnectionState();};var dtlsTransport=new RTCDtlsTransport(iceTransport);dtlsTransport.ondtlsstatechange=function(){self._updateConnectionState();};dtlsTransport.onerror=function(){// onerror does not set state to failed by itself.\ndtlsTransport.state='failed';self._updateConnectionState();};return{iceGatherer:iceGatherer,iceTransport:iceTransport,dtlsTransport:dtlsTransport};};// Start the RTP Sender and Receiver for a transceiver.\nwindow.RTCPeerConnection.prototype._transceive=function(transceiver,send,recv){var params=this._getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);if(send&&transceiver.rtpSender){params.encodings=transceiver.sendEncodingParameters;params.rtcp={cname:SDPUtils.localCName};if(transceiver.recvEncodingParameters.length){params.rtcp.ssrc=transceiver.recvEncodingParameters[0].ssrc;}transceiver.rtpSender.send(params);}if(recv&&transceiver.rtpReceiver){// remove RTX field in Edge 14942\nif(transceiver.kind==='video'&&transceiver.recvEncodingParameters){transceiver.recvEncodingParameters.forEach(function(p){delete p.rtx;});}params.encodings=transceiver.recvEncodingParameters;params.rtcp={cname:transceiver.cname};if(transceiver.sendEncodingParameters.length){params.rtcp.ssrc=transceiver.sendEncodingParameters[0].ssrc;}transceiver.rtpReceiver.receive(params);}};window.RTCPeerConnection.prototype.setLocalDescription=function(description){var self=this;var sections;var sessionpart;if(description.type==='offer'){// FIXME: What was the purpose of this empty if statement?\n// if (!this._pendingOffer) {\n// } else {\nif(this._pendingOffer){// VERY limited support for SDP munging. Limited to:\n// * changing the order of codecs\nsections=SDPUtils.splitSections(description.sdp);sessionpart=sections.shift();sections.forEach(function(mediaSection,sdpMLineIndex){var caps=SDPUtils.parseRtpParameters(mediaSection);self._pendingOffer[sdpMLineIndex].localCapabilities=caps;});this.transceivers=this._pendingOffer;delete this._pendingOffer;}}else if(description.type==='answer'){sections=SDPUtils.splitSections(self.remoteDescription.sdp);sessionpart=sections.shift();var isIceLite=SDPUtils.matchPrefix(sessionpart,'a=ice-lite').length>0;sections.forEach(function(mediaSection,sdpMLineIndex){var transceiver=self.transceivers[sdpMLineIndex];var iceGatherer=transceiver.iceGatherer;var iceTransport=transceiver.iceTransport;var dtlsTransport=transceiver.dtlsTransport;var localCapabilities=transceiver.localCapabilities;var remoteCapabilities=transceiver.remoteCapabilities;var rejected=mediaSection.split('\\n',1)[0].split(' ',2)[1]==='0';if(!rejected&&!transceiver.isDatachannel){var remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);if(isIceLite){var cands=SDPUtils.matchPrefix(mediaSection,'a=candidate:').map(function(cand){return SDPUtils.parseCandidate(cand);}).filter(function(cand){return cand.component==='1';});// ice-lite only includes host candidates in the SDP so we can\n// use setRemoteCandidates (which implies an\n// RTCIceCandidateComplete)\nif(cands.length){iceTransport.setRemoteCandidates(cands);}}var remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);if(isIceLite){remoteDtlsParameters.role='server';}if(!self.usingBundle||sdpMLineIndex===0){iceTransport.start(iceGatherer,remoteIceParameters,isIceLite?'controlling':'controlled');dtlsTransport.start(remoteDtlsParameters);}// Calculate intersection of capabilities.\nvar params=self._getCommonCapabilities(localCapabilities,remoteCapabilities);// Start the RTCRtpSender. The RTCRtpReceiver for this\n// transceiver has already been started in setRemoteDescription.\nself._transceive(transceiver,params.codecs.length>0,false);}});}this.localDescription={type:description.type,sdp:description.sdp};switch(description.type){case'offer':this._updateSignalingState('have-local-offer');break;case'answer':this._updateSignalingState('stable');break;default:throw new TypeError('unsupported type \"'+description.type+'\"');}// If a success callback was provided, emit ICE candidates after it\n// has been executed. Otherwise, emit callback after the Promise is\n// resolved.\nvar hasCallback=arguments.length>1&&typeof arguments[1]==='function';if(hasCallback){var cb=arguments[1];window.setTimeout(function(){cb();if(self.iceGatheringState==='new'){self.iceGatheringState='gathering';}self._emitBufferedCandidates();},0);}var p=Promise.resolve();p.then(function(){if(!hasCallback){if(self.iceGatheringState==='new'){self.iceGatheringState='gathering';}// Usually candidates will be emitted earlier.\nwindow.setTimeout(self._emitBufferedCandidates.bind(self),500);}});return p;};window.RTCPeerConnection.prototype.setRemoteDescription=function(description){var self=this;var stream=new MediaStream();var receiverList=[];var sections=SDPUtils.splitSections(description.sdp);var sessionpart=sections.shift();var isIceLite=SDPUtils.matchPrefix(sessionpart,'a=ice-lite').length>0;this.usingBundle=SDPUtils.matchPrefix(sessionpart,'a=group:BUNDLE ').length>0;sections.forEach(function(mediaSection,sdpMLineIndex){var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].substr(2).split(' ');var kind=mline[0];var rejected=mline[1]==='0';var direction=SDPUtils.getDirection(mediaSection,sessionpart);var mid=SDPUtils.matchPrefix(mediaSection,'a=mid:');if(mid.length){mid=mid[0].substr(6);}else{mid=SDPUtils.generateIdentifier();}// Reject datachannels which are not implemented yet.\nif(kind==='application'&&mline[2]==='DTLS/SCTP'){self.transceivers[sdpMLineIndex]={mid:mid,isDatachannel:true};return;}var transceiver;var iceGatherer;var iceTransport;var dtlsTransport;var rtpSender;var rtpReceiver;var sendEncodingParameters;var recvEncodingParameters;var localCapabilities;var track;// FIXME: ensure the mediaSection has rtcp-mux set.\nvar remoteCapabilities=SDPUtils.parseRtpParameters(mediaSection);var remoteIceParameters;var remoteDtlsParameters;if(!rejected){remoteIceParameters=SDPUtils.getIceParameters(mediaSection,sessionpart);remoteDtlsParameters=SDPUtils.getDtlsParameters(mediaSection,sessionpart);remoteDtlsParameters.role='client';}recvEncodingParameters=SDPUtils.parseRtpEncodingParameters(mediaSection);var cname;// Gets the first SSRC. Note that with RTX there might be multiple\n// SSRCs.\nvar remoteSsrc=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(obj){return obj.attribute==='cname';})[0];if(remoteSsrc){cname=remoteSsrc.value;}var isComplete=SDPUtils.matchPrefix(mediaSection,'a=end-of-candidates',sessionpart).length>0;var cands=SDPUtils.matchPrefix(mediaSection,'a=candidate:').map(function(cand){return SDPUtils.parseCandidate(cand);}).filter(function(cand){return cand.component==='1';});if(description.type==='offer'&&!rejected){var transports=self.usingBundle&&sdpMLineIndex>0?{iceGatherer:self.transceivers[0].iceGatherer,iceTransport:self.transceivers[0].iceTransport,dtlsTransport:self.transceivers[0].dtlsTransport}:self._createIceAndDtlsTransports(mid,sdpMLineIndex);if(isComplete){transports.iceTransport.setRemoteCandidates(cands);}localCapabilities=RTCRtpReceiver.getCapabilities(kind);// filter RTX until additional stuff needed for RTX is implemented\n// in adapter.js\nlocalCapabilities.codecs=localCapabilities.codecs.filter(function(codec){return codec.name!=='rtx';});sendEncodingParameters=[{ssrc:(2*sdpMLineIndex+2)*1001}];rtpReceiver=new RTCRtpReceiver(transports.dtlsTransport,kind);track=rtpReceiver.track;receiverList.push([track,rtpReceiver]);// FIXME: not correct when there are multiple streams but that is\n// not currently supported in this shim.\nstream.addTrack(track);// FIXME: look at direction.\nif(self.localStreams.length>0&&self.localStreams[0].getTracks().length>=sdpMLineIndex){var localTrack;if(kind==='audio'){localTrack=self.localStreams[0].getAudioTracks()[0];}else if(kind==='video'){localTrack=self.localStreams[0].getVideoTracks()[0];}if(localTrack){rtpSender=new RTCRtpSender(localTrack,transports.dtlsTransport);}}self.transceivers[sdpMLineIndex]={iceGatherer:transports.iceGatherer,iceTransport:transports.iceTransport,dtlsTransport:transports.dtlsTransport,localCapabilities:localCapabilities,remoteCapabilities:remoteCapabilities,rtpSender:rtpSender,rtpReceiver:rtpReceiver,kind:kind,mid:mid,cname:cname,sendEncodingParameters:sendEncodingParameters,recvEncodingParameters:recvEncodingParameters};// Start the RTCRtpReceiver now. The RTPSender is started in\n// setLocalDescription.\nself._transceive(self.transceivers[sdpMLineIndex],false,direction==='sendrecv'||direction==='sendonly');}else if(description.type==='answer'&&!rejected){transceiver=self.transceivers[sdpMLineIndex];iceGatherer=transceiver.iceGatherer;iceTransport=transceiver.iceTransport;dtlsTransport=transceiver.dtlsTransport;rtpSender=transceiver.rtpSender;rtpReceiver=transceiver.rtpReceiver;sendEncodingParameters=transceiver.sendEncodingParameters;localCapabilities=transceiver.localCapabilities;self.transceivers[sdpMLineIndex].recvEncodingParameters=recvEncodingParameters;self.transceivers[sdpMLineIndex].remoteCapabilities=remoteCapabilities;self.transceivers[sdpMLineIndex].cname=cname;if((isIceLite||isComplete)&&cands.length){iceTransport.setRemoteCandidates(cands);}if(!self.usingBundle||sdpMLineIndex===0){iceTransport.start(iceGatherer,remoteIceParameters,'controlling');dtlsTransport.start(remoteDtlsParameters);}self._transceive(transceiver,direction==='sendrecv'||direction==='recvonly',direction==='sendrecv'||direction==='sendonly');if(rtpReceiver&&(direction==='sendrecv'||direction==='sendonly')){track=rtpReceiver.track;receiverList.push([track,rtpReceiver]);stream.addTrack(track);}else{// FIXME: actually the receiver should be created later.\ndelete transceiver.rtpReceiver;}}});this.remoteDescription={type:description.type,sdp:description.sdp};switch(description.type){case'offer':this._updateSignalingState('have-remote-offer');break;case'answer':this._updateSignalingState('stable');break;default:throw new TypeError('unsupported type \"'+description.type+'\"');}if(stream.getTracks().length){self.remoteStreams.push(stream);window.setTimeout(function(){var event=new Event('addstream');event.stream=stream;self.dispatchEvent(event);if(self.onaddstream!==null){window.setTimeout(function(){self.onaddstream(event);},0);}receiverList.forEach(function(item){var track=item[0];var receiver=item[1];var trackEvent=new Event('track');trackEvent.track=track;trackEvent.receiver=receiver;trackEvent.streams=[stream];self.dispatchEvent(event);if(self.ontrack!==null){window.setTimeout(function(){self.ontrack(trackEvent);},0);}});},0);}if(arguments.length>1&&typeof arguments[1]==='function'){window.setTimeout(arguments[1],0);}return Promise.resolve();};window.RTCPeerConnection.prototype.close=function(){this.transceivers.forEach(function(transceiver){/* not yet\n        if (transceiver.iceGatherer) {\n          transceiver.iceGatherer.close();\n        }\n        */if(transceiver.iceTransport){transceiver.iceTransport.stop();}if(transceiver.dtlsTransport){transceiver.dtlsTransport.stop();}if(transceiver.rtpSender){transceiver.rtpSender.stop();}if(transceiver.rtpReceiver){transceiver.rtpReceiver.stop();}});// FIXME: clean up tracks, local streams, remote streams, etc\nthis._updateSignalingState('closed');};// Update the signaling state.\nwindow.RTCPeerConnection.prototype._updateSignalingState=function(newState){this.signalingState=newState;var event=new Event('signalingstatechange');this.dispatchEvent(event);if(this.onsignalingstatechange!==null){this.onsignalingstatechange(event);}};// Determine whether to fire the negotiationneeded event.\nwindow.RTCPeerConnection.prototype._maybeFireNegotiationNeeded=function(){// Fire away (for now).\nvar event=new Event('negotiationneeded');this.dispatchEvent(event);if(this.onnegotiationneeded!==null){this.onnegotiationneeded(event);}};// Update the connection state.\nwindow.RTCPeerConnection.prototype._updateConnectionState=function(){var self=this;var newState;var states={'new':0,closed:0,connecting:0,checking:0,connected:0,completed:0,failed:0};this.transceivers.forEach(function(transceiver){states[transceiver.iceTransport.state]++;states[transceiver.dtlsTransport.state]++;});// ICETransport.completed and connected are the same for this purpose.\nstates.connected+=states.completed;newState='new';if(states.failed>0){newState='failed';}else if(states.connecting>0||states.checking>0){newState='connecting';}else if(states.disconnected>0){newState='disconnected';}else if(states.new>0){newState='new';}else if(states.connected>0||states.completed>0){newState='connected';}if(newState!==self.iceConnectionState){self.iceConnectionState=newState;var event=new Event('iceconnectionstatechange');this.dispatchEvent(event);if(this.oniceconnectionstatechange!==null){this.oniceconnectionstatechange(event);}}};window.RTCPeerConnection.prototype.createOffer=function(){var self=this;if(this._pendingOffer){throw new Error('createOffer called while there is a pending offer.');}var offerOptions;if(arguments.length===1&&typeof arguments[0]!=='function'){offerOptions=arguments[0];}else if(arguments.length===3){offerOptions=arguments[2];}var tracks=[];var numAudioTracks=0;var numVideoTracks=0;// Default to sendrecv.\nif(this.localStreams.length){numAudioTracks=this.localStreams[0].getAudioTracks().length;numVideoTracks=this.localStreams[0].getVideoTracks().length;}// Determine number of audio and video tracks we need to send/recv.\nif(offerOptions){// Reject Chrome legacy constraints.\nif(offerOptions.mandatory||offerOptions.optional){throw new TypeError('Legacy mandatory/optional constraints not supported.');}if(offerOptions.offerToReceiveAudio!==undefined){numAudioTracks=offerOptions.offerToReceiveAudio;}if(offerOptions.offerToReceiveVideo!==undefined){numVideoTracks=offerOptions.offerToReceiveVideo;}}if(this.localStreams.length){// Push local streams.\nthis.localStreams[0].getTracks().forEach(function(track){tracks.push({kind:track.kind,track:track,wantReceive:track.kind==='audio'?numAudioTracks>0:numVideoTracks>0});if(track.kind==='audio'){numAudioTracks--;}else if(track.kind==='video'){numVideoTracks--;}});}// Create M-lines for recvonly streams.\nwhile(numAudioTracks>0||numVideoTracks>0){if(numAudioTracks>0){tracks.push({kind:'audio',wantReceive:true});numAudioTracks--;}if(numVideoTracks>0){tracks.push({kind:'video',wantReceive:true});numVideoTracks--;}}var sdp=SDPUtils.writeSessionBoilerplate();var transceivers=[];tracks.forEach(function(mline,sdpMLineIndex){// For each track, create an ice gatherer, ice transport,\n// dtls transport, potentially rtpsender and rtpreceiver.\nvar track=mline.track;var kind=mline.kind;var mid=SDPUtils.generateIdentifier();var transports=self.usingBundle&&sdpMLineIndex>0?{iceGatherer:transceivers[0].iceGatherer,iceTransport:transceivers[0].iceTransport,dtlsTransport:transceivers[0].dtlsTransport}:self._createIceAndDtlsTransports(mid,sdpMLineIndex);var localCapabilities=RTCRtpSender.getCapabilities(kind);// filter RTX until additional stuff needed for RTX is implemented\n// in adapter.js\nlocalCapabilities.codecs=localCapabilities.codecs.filter(function(codec){return codec.name!=='rtx';});localCapabilities.codecs.forEach(function(codec){// work around https://bugs.chromium.org/p/webrtc/issues/detail?id=6552\n// by adding level-asymmetry-allowed=1\nif(codec.name==='H264'&&codec.parameters['level-asymmetry-allowed']===undefined){codec.parameters['level-asymmetry-allowed']='1';}});var rtpSender;var rtpReceiver;// generate an ssrc now, to be used later in rtpSender.send\nvar sendEncodingParameters=[{ssrc:(2*sdpMLineIndex+1)*1001}];if(track){rtpSender=new RTCRtpSender(track,transports.dtlsTransport);}if(mline.wantReceive){rtpReceiver=new RTCRtpReceiver(transports.dtlsTransport,kind);}transceivers[sdpMLineIndex]={iceGatherer:transports.iceGatherer,iceTransport:transports.iceTransport,dtlsTransport:transports.dtlsTransport,localCapabilities:localCapabilities,remoteCapabilities:null,rtpSender:rtpSender,rtpReceiver:rtpReceiver,kind:kind,mid:mid,sendEncodingParameters:sendEncodingParameters,recvEncodingParameters:null};});if(this.usingBundle){sdp+='a=group:BUNDLE '+transceivers.map(function(t){return t.mid;}).join(' ')+'\\r\\n';}tracks.forEach(function(mline,sdpMLineIndex){var transceiver=transceivers[sdpMLineIndex];sdp+=SDPUtils.writeMediaSection(transceiver,transceiver.localCapabilities,'offer',self.localStreams[0]);});this._pendingOffer=transceivers;var desc=new RTCSessionDescription({type:'offer',sdp:sdp});if(arguments.length&&typeof arguments[0]==='function'){window.setTimeout(arguments[0],0,desc);}return Promise.resolve(desc);};window.RTCPeerConnection.prototype.createAnswer=function(){var self=this;var sdp=SDPUtils.writeSessionBoilerplate();if(this.usingBundle){sdp+='a=group:BUNDLE '+this.transceivers.map(function(t){return t.mid;}).join(' ')+'\\r\\n';}this.transceivers.forEach(function(transceiver){if(transceiver.isDatachannel){sdp+='m=application 0 DTLS/SCTP 5000\\r\\n'+'c=IN IP4 0.0.0.0\\r\\n'+'a=mid:'+transceiver.mid+'\\r\\n';return;}// Calculate intersection of capabilities.\nvar commonCapabilities=self._getCommonCapabilities(transceiver.localCapabilities,transceiver.remoteCapabilities);sdp+=SDPUtils.writeMediaSection(transceiver,commonCapabilities,'answer',self.localStreams[0]);});var desc=new RTCSessionDescription({type:'answer',sdp:sdp});if(arguments.length&&typeof arguments[0]==='function'){window.setTimeout(arguments[0],0,desc);}return Promise.resolve(desc);};window.RTCPeerConnection.prototype.addIceCandidate=function(candidate){if(!candidate){this.transceivers.forEach(function(transceiver){transceiver.iceTransport.addRemoteCandidate({});});}else{var mLineIndex=candidate.sdpMLineIndex;if(candidate.sdpMid){for(var i=0;i<this.transceivers.length;i++){if(this.transceivers[i].mid===candidate.sdpMid){mLineIndex=i;break;}}}var transceiver=this.transceivers[mLineIndex];if(transceiver){var cand=Object.keys(candidate.candidate).length>0?SDPUtils.parseCandidate(candidate.candidate):{};// Ignore Chrome's invalid candidates since Edge does not like them.\nif(cand.protocol==='tcp'&&(cand.port===0||cand.port===9)){return;}// Ignore RTCP candidates, we assume RTCP-MUX.\nif(cand.component!=='1'){return;}// A dirty hack to make samples work.\nif(cand.type==='endOfCandidates'){cand={};}transceiver.iceTransport.addRemoteCandidate(cand);// update the remoteDescription.\nvar sections=SDPUtils.splitSections(this.remoteDescription.sdp);sections[mLineIndex+1]+=(cand.type?candidate.candidate.trim():'a=end-of-candidates')+'\\r\\n';this.remoteDescription.sdp=sections.join('');}}if(arguments.length>1&&typeof arguments[1]==='function'){window.setTimeout(arguments[1],0);}return Promise.resolve();};window.RTCPeerConnection.prototype.getStats=function(){var promises=[];this.transceivers.forEach(function(transceiver){['rtpSender','rtpReceiver','iceGatherer','iceTransport','dtlsTransport'].forEach(function(method){if(transceiver[method]){promises.push(transceiver[method].getStats());}});});var cb=arguments.length>1&&typeof arguments[1]==='function'&&arguments[1];return new Promise(function(resolve){// shim getStats with maplike support\nvar results=new Map();Promise.all(promises).then(function(res){res.forEach(function(result){Object.keys(result).forEach(function(id){results.set(id,result[id]);results[id]=result[id];});});if(cb){window.setTimeout(cb,0,results);}resolve(results);});});};}};// Expose public methods.\nmodule.exports={shimPeerConnection:edgeShim.shimPeerConnection,shimGetUserMedia:require('./getusermedia')};},{\"../utils\":12,\"./getusermedia\":8,\"sdp\":59}],8:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';// Expose public methods.\nmodule.exports=function(){var shimError_=function shimError_(e){return{name:{PermissionDeniedError:'NotAllowedError'}[e.name]||e.name,message:e.message,constraint:e.constraint,toString:function toString(){return this.name;}};};// getUserMedia error shim.\nvar origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){return origGetUserMedia(c).catch(function(e){return Promise.reject(shimError_(e));});};};},{}],9:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var browserDetails=require('../utils').browserDetails;var firefoxShim={shimOnTrack:function shimOnTrack(){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'&&window.RTCPeerConnection&&!('ontrack'in window.RTCPeerConnection.prototype)){Object.defineProperty(window.RTCPeerConnection.prototype,'ontrack',{get:function get(){return this._ontrack;},set:function set(f){if(this._ontrack){this.removeEventListener('track',this._ontrack);this.removeEventListener('addstream',this._ontrackpoly);}this.addEventListener('track',this._ontrack=f);this.addEventListener('addstream',this._ontrackpoly=function(e){e.stream.getTracks().forEach(function(track){var event=new Event('track');event.track=track;event.receiver={track:track};event.streams=[e.stream];this.dispatchEvent(event);}.bind(this));}.bind(this));}});}},shimSourceObject:function shimSourceObject(){// Firefox has supported mozSrcObject since FF22, unprefixed in 42.\nif((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'){if(window.HTMLMediaElement&&!('srcObject'in window.HTMLMediaElement.prototype)){// Shim the srcObject property, once, when HTMLMediaElement is found.\nObject.defineProperty(window.HTMLMediaElement.prototype,'srcObject',{get:function get(){return this.mozSrcObject;},set:function set(stream){this.mozSrcObject=stream;}});}}},shimPeerConnection:function shimPeerConnection(){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))!=='object'||!(window.RTCPeerConnection||window.mozRTCPeerConnection)){return;// probably media.peerconnection.enabled=false in about:config\n}// The RTCPeerConnection object.\nif(!window.RTCPeerConnection){window.RTCPeerConnection=function(pcConfig,pcConstraints){if(browserDetails.version<38){// .urls is not supported in FF < 38.\n// create RTCIceServers with a single url.\nif(pcConfig&&pcConfig.iceServers){var newIceServers=[];for(var i=0;i<pcConfig.iceServers.length;i++){var server=pcConfig.iceServers[i];if(server.hasOwnProperty('urls')){for(var j=0;j<server.urls.length;j++){var newServer={url:server.urls[j]};if(server.urls[j].indexOf('turn')===0){newServer.username=server.username;newServer.credential=server.credential;}newIceServers.push(newServer);}}else{newIceServers.push(pcConfig.iceServers[i]);}}pcConfig.iceServers=newIceServers;}}return new mozRTCPeerConnection(pcConfig,pcConstraints);};window.RTCPeerConnection.prototype=mozRTCPeerConnection.prototype;// wrap static methods. Currently just generateCertificate.\nif(mozRTCPeerConnection.generateCertificate){Object.defineProperty(window.RTCPeerConnection,'generateCertificate',{get:function get(){return mozRTCPeerConnection.generateCertificate;}});}window.RTCSessionDescription=mozRTCSessionDescription;window.RTCIceCandidate=mozRTCIceCandidate;}// shim away need for obsolete RTCIceCandidate/RTCSessionDescription.\n['setLocalDescription','setRemoteDescription','addIceCandidate'].forEach(function(method){var nativeMethod=RTCPeerConnection.prototype[method];RTCPeerConnection.prototype[method]=function(){arguments[0]=new(method==='addIceCandidate'?RTCIceCandidate:RTCSessionDescription)(arguments[0]);return nativeMethod.apply(this,arguments);};});// support for addIceCandidate(null or undefined)\nvar nativeAddIceCandidate=RTCPeerConnection.prototype.addIceCandidate;RTCPeerConnection.prototype.addIceCandidate=function(){if(!arguments[0]){if(arguments[1]){arguments[1].apply(null);}return Promise.resolve();}return nativeAddIceCandidate.apply(this,arguments);};if(browserDetails.version<48){// shim getStats with maplike support\nvar makeMapStats=function makeMapStats(stats){var map=new Map();Object.keys(stats).forEach(function(key){map.set(key,stats[key]);map[key]=stats[key];});return map;};var nativeGetStats=RTCPeerConnection.prototype.getStats;RTCPeerConnection.prototype.getStats=function(selector,onSucc,onErr){return nativeGetStats.apply(this,[selector||null]).then(function(stats){return makeMapStats(stats);}).then(onSucc,onErr);};}}};// Expose public methods.\nmodule.exports={shimOnTrack:firefoxShim.shimOnTrack,shimSourceObject:firefoxShim.shimSourceObject,shimPeerConnection:firefoxShim.shimPeerConnection,shimGetUserMedia:require('./getusermedia')};},{\"../utils\":12,\"./getusermedia\":10}],10:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var logging=require('../utils').log;var browserDetails=require('../utils').browserDetails;// Expose public methods.\nmodule.exports=function(){var shimError_=function shimError_(e){return{name:{SecurityError:'NotAllowedError',PermissionDeniedError:'NotAllowedError'}[e.name]||e.name,message:{'The operation is insecure.':'The request is not allowed by the '+'user agent or the platform in the current context.'}[e.message]||e.message,constraint:e.constraint,toString:function toString(){return this.name+(this.message&&': ')+this.message;}};};// getUserMedia constraints shim.\nvar getUserMedia_=function getUserMedia_(constraints,onSuccess,onError){var constraintsToFF37_=function constraintsToFF37_(c){if((typeof c===\"undefined\"?\"undefined\":_typeof(c))!=='object'||c.require){return c;}var require=[];Object.keys(c).forEach(function(key){if(key==='require'||key==='advanced'||key==='mediaSource'){return;}var r=c[key]=_typeof(c[key])==='object'?c[key]:{ideal:c[key]};if(r.min!==undefined||r.max!==undefined||r.exact!==undefined){require.push(key);}if(r.exact!==undefined){if(typeof r.exact==='number'){r.min=r.max=r.exact;}else{c[key]=r.exact;}delete r.exact;}if(r.ideal!==undefined){c.advanced=c.advanced||[];var oc={};if(typeof r.ideal==='number'){oc[key]={min:r.ideal,max:r.ideal};}else{oc[key]=r.ideal;}c.advanced.push(oc);delete r.ideal;if(!Object.keys(r).length){delete c[key];}}});if(require.length){c.require=require;}return c;};constraints=JSON.parse(JSON.stringify(constraints));if(browserDetails.version<38){logging('spec: '+JSON.stringify(constraints));if(constraints.audio){constraints.audio=constraintsToFF37_(constraints.audio);}if(constraints.video){constraints.video=constraintsToFF37_(constraints.video);}logging('ff37: '+JSON.stringify(constraints));}return navigator.mozGetUserMedia(constraints,onSuccess,function(e){onError(shimError_(e));});};// Returns the result of getUserMedia as a Promise.\nvar getUserMediaPromise_=function getUserMediaPromise_(constraints){return new Promise(function(resolve,reject){getUserMedia_(constraints,resolve,reject);});};// Shim for mediaDevices on older versions.\nif(!navigator.mediaDevices){navigator.mediaDevices={getUserMedia:getUserMediaPromise_,addEventListener:function addEventListener(){},removeEventListener:function removeEventListener(){}};}navigator.mediaDevices.enumerateDevices=navigator.mediaDevices.enumerateDevices||function(){return new Promise(function(resolve){var infos=[{kind:'audioinput',deviceId:'default',label:'',groupId:''},{kind:'videoinput',deviceId:'default',label:'',groupId:''}];resolve(infos);});};if(browserDetails.version<41){// Work around http://bugzil.la/1169665\nvar orgEnumerateDevices=navigator.mediaDevices.enumerateDevices.bind(navigator.mediaDevices);navigator.mediaDevices.enumerateDevices=function(){return orgEnumerateDevices().then(undefined,function(e){if(e.name==='NotFoundError'){return[];}throw e;});};}if(browserDetails.version<49){var origGetUserMedia=navigator.mediaDevices.getUserMedia.bind(navigator.mediaDevices);navigator.mediaDevices.getUserMedia=function(c){return origGetUserMedia(c).then(function(stream){// Work around https://bugzil.la/802326\nif(c.audio&&!stream.getAudioTracks().length||c.video&&!stream.getVideoTracks().length){stream.getTracks().forEach(function(track){track.stop();});throw new DOMException('The object can not be found here.','NotFoundError');}return stream;},function(e){return Promise.reject(shimError_(e));});};}navigator.getUserMedia=function(constraints,onSuccess,onError){if(browserDetails.version<44){return getUserMedia_(constraints,onSuccess,onError);}// Replace Firefox 44+'s deprecation warning with unprefixed version.\nconsole.warn('navigator.getUserMedia has been replaced by '+'navigator.mediaDevices.getUserMedia');navigator.mediaDevices.getUserMedia(constraints).then(onSuccess,onError);};};},{\"../utils\":12}],11:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n */'use strict';var safariShim={// TODO: DrAlex, should be here, double check against LayoutTests\n// shimOnTrack: function() { },\n// TODO: once the back-end for the mac port is done, add.\n// TODO: check for webkitGTK+\n// shimPeerConnection: function() { },\nshimGetUserMedia:function shimGetUserMedia(){navigator.getUserMedia=navigator.webkitGetUserMedia;}};// Expose public methods.\nmodule.exports={shimGetUserMedia:safariShim.shimGetUserMedia// TODO\n// shimOnTrack: safariShim.shimOnTrack,\n// shimPeerConnection: safariShim.shimPeerConnection\n};},{}],12:[function(require,module,exports){/*\n *  Copyright (c) 2016 The WebRTC project authors. All Rights Reserved.\n *\n *  Use of this source code is governed by a BSD-style license\n *  that can be found in the LICENSE file in the root of the source\n *  tree.\n *//* eslint-env node */'use strict';var logDisabled_=true;// Utility methods.\nvar utils={disableLog:function disableLog(bool){if(typeof bool!=='boolean'){return new Error('Argument type: '+(typeof bool===\"undefined\"?\"undefined\":_typeof(bool))+'. Please use a boolean.');}logDisabled_=bool;return bool?'adapter.js logging disabled':'adapter.js logging enabled';},log:function log(){if((typeof window===\"undefined\"?\"undefined\":_typeof(window))==='object'){if(logDisabled_){return;}if(typeof console!=='undefined'&&typeof console.log==='function'){console.log.apply(console,arguments);}}},/**\n             * Extract browser version out of the provided user agent string.\n             *\n             * @param {!string} uastring userAgent string.\n             * @param {!string} expr Regular expression used as match criteria.\n             * @param {!number} pos position in the version string to be returned.\n             * @return {!number} browser version.\n             */extractVersion:function extractVersion(uastring,expr,pos){var match=uastring.match(expr);return match&&match.length>=pos&&parseInt(match[pos],10);},/**\n             * Browser detector.\n             *\n             * @return {object} result containing browser and version\n             *     properties.\n             */detectBrowser:function detectBrowser(){// Returned result object.\nvar result={};result.browser=null;result.version=null;// Fail early if it's not a browser\nif(typeof window==='undefined'||!window.navigator){result.browser='Not a browser.';return result;}// Firefox.\nif(navigator.mozGetUserMedia){result.browser='firefox';result.version=this.extractVersion(navigator.userAgent,/Firefox\\/([0-9]+)\\./,1);// all webkit-based browsers\n}else if(navigator.webkitGetUserMedia){// Chrome, Chromium, Webview, Opera, all use the chrome shim for now\nif(window.webkitRTCPeerConnection){result.browser='chrome';result.version=this.extractVersion(navigator.userAgent,/Chrom(e|ium)\\/([0-9]+)\\./,2);// Safari or unknown webkit-based\n// for the time being Safari has support for MediaStreams but not webRTC\n}else{// Safari UA substrings of interest for reference:\n// - webkit version:           AppleWebKit/602.1.25 (also used in Op,Cr)\n// - safari UI version:        Version/9.0.3 (unique to Safari)\n// - safari UI webkit version: Safari/601.4.4 (also used in Op,Cr)\n//\n// if the webkit version and safari UI webkit versions are equals,\n// ... this is a stable version.\n//\n// only the internal webkit version is important today to know if\n// media streams are supported\n//\nif(navigator.userAgent.match(/Version\\/(\\d+).(\\d+)/)){result.browser='safari';result.version=this.extractVersion(navigator.userAgent,/AppleWebKit\\/([0-9]+)\\./,1);// unknown webkit-based browser\n}else{result.browser='Unsupported webkit-based browser '+'with GUM support but no WebRTC support.';return result;}}// Edge.\n}else if(navigator.mediaDevices&&navigator.userAgent.match(/Edge\\/(\\d+).(\\d+)$/)){result.browser='edge';result.version=this.extractVersion(navigator.userAgent,/Edge\\/(\\d+).(\\d+)$/,2);// Default fallthrough: not supported.\n}else{result.browser='Not a supported browser.';return result;}return result;}};// Export.\nmodule.exports={log:utils.log,disableLog:utils.disableLog,browserDetails:utils.detectBrowser(),extractVersion:utils.extractVersion};},{}],13:[function(require,module,exports){/**\n         * Expose `Backoff`.\n         */module.exports=Backoff;/**\n         * Initialize backoff timer with `opts`.\n         *\n         * - `min` initial timeout in milliseconds [100]\n         * - `max` max timeout [10000]\n         * - `jitter` [0]\n         * - `factor` [2]\n         *\n         * @param {Object} opts\n         * @api public\n         */function Backoff(opts){opts=opts||{};this.ms=opts.min||100;this.max=opts.max||10000;this.factor=opts.factor||2;this.jitter=opts.jitter>0&&opts.jitter<=1?opts.jitter:0;this.attempts=0;}/**\n         * Return the backoff duration.\n         *\n         * @return {Number}\n         * @api public\n         */Backoff.prototype.duration=function(){var ms=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var rand=Math.random();var deviation=Math.floor(rand*this.jitter*ms);ms=(Math.floor(rand*10)&1)==0?ms-deviation:ms+deviation;}return Math.min(ms,this.max)|0;};/**\n         * Reset the number of attempts.\n         *\n         * @api public\n         */Backoff.prototype.reset=function(){this.attempts=0;};/**\n         * Set the minimum duration\n         *\n         * @api public\n         */Backoff.prototype.setMin=function(min){this.ms=min;};/**\n         * Set the maximum duration\n         *\n         * @api public\n         */Backoff.prototype.setMax=function(max){this.max=max;};/**\n         * Set the jitter\n         *\n         * @api public\n         */Backoff.prototype.setJitter=function(jitter){this.jitter=jitter;};},{}],14:[function(require,module,exports){/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */(function(chars){\"use strict\";exports.encode=function(arraybuffer){var bytes=new Uint8Array(arraybuffer),i,len=bytes.length,base64=\"\";for(i=0;i<len;i+=3){base64+=chars[bytes[i]>>2];base64+=chars[(bytes[i]&3)<<4|bytes[i+1]>>4];base64+=chars[(bytes[i+1]&15)<<2|bytes[i+2]>>6];base64+=chars[bytes[i+2]&63];}if(len%3===2){base64=base64.substring(0,base64.length-1)+\"=\";}else if(len%3===1){base64=base64.substring(0,base64.length-2)+\"==\";}return base64;};exports.decode=function(base64){var bufferLength=base64.length*0.75,len=base64.length,i,p=0,encoded1,encoded2,encoded3,encoded4;if(base64[base64.length-1]===\"=\"){bufferLength--;if(base64[base64.length-2]===\"=\"){bufferLength--;}}var arraybuffer=new ArrayBuffer(bufferLength),bytes=new Uint8Array(arraybuffer);for(i=0;i<len;i+=4){encoded1=chars.indexOf(base64[i]);encoded2=chars.indexOf(base64[i+1]);encoded3=chars.indexOf(base64[i+2]);encoded4=chars.indexOf(base64[i+3]);bytes[p++]=encoded1<<2|encoded2>>4;bytes[p++]=(encoded2&15)<<4|encoded3>>2;bytes[p++]=(encoded3&3)<<6|encoded4&63;}return arraybuffer;};})(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\");},{}],15:[function(require,module,exports){(function(global){/**\n             * Create a blob builder even when vendor prefixes exist\n             */var BlobBuilder=global.BlobBuilder||global.WebKitBlobBuilder||global.MSBlobBuilder||global.MozBlobBuilder;/**\n             * Check if Blob constructor is supported\n             */var blobSupported=function(){try{var a=new Blob(['hi']);return a.size===2;}catch(e){return false;}}();/**\n             * Check if Blob constructor supports ArrayBufferViews\n             * Fails in Safari 6, so we need to map to ArrayBuffers there.\n             */var blobSupportsArrayBufferView=blobSupported&&function(){try{var b=new Blob([new Uint8Array([1,2])]);return b.size===2;}catch(e){return false;}}();/**\n             * Check if BlobBuilder is supported\n             */var blobBuilderSupported=BlobBuilder&&BlobBuilder.prototype.append&&BlobBuilder.prototype.getBlob;/**\n             * Helper function that maps ArrayBufferViews to ArrayBuffers\n             * Used by BlobBuilder constructor and old browsers that didn't\n             * support it in the Blob constructor.\n             */function mapArrayBufferViews(ary){for(var i=0;i<ary.length;i++){var chunk=ary[i];if(chunk.buffer instanceof ArrayBuffer){var buf=chunk.buffer;// if this is a subarray, make a copy so we only\n// include the subarray region from the underlying buffer\nif(chunk.byteLength!==buf.byteLength){var copy=new Uint8Array(chunk.byteLength);copy.set(new Uint8Array(buf,chunk.byteOffset,chunk.byteLength));buf=copy.buffer;}ary[i]=buf;}}}function BlobBuilderConstructor(ary,options){options=options||{};var bb=new BlobBuilder();mapArrayBufferViews(ary);for(var i=0;i<ary.length;i++){bb.append(ary[i]);}return options.type?bb.getBlob(options.type):bb.getBlob();};function BlobConstructor(ary,options){mapArrayBufferViews(ary);return new Blob(ary,options||{});};module.exports=function(){if(blobSupported){return blobSupportsArrayBufferView?global.Blob:BlobConstructor;}else if(blobBuilderSupported){return BlobBuilderConstructor;}else{return undefined;}}();}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{}],16:[function(require,module,exports){/**\n         * Slice reference.\n         */var slice=[].slice;/**\n         * Bind `obj` to `fn`.\n         *\n         * @param {Object} obj\n         * @param {Function|String} fn or string\n         * @return {Function}\n         * @api public\n         */module.exports=function(obj,fn){if('string'==typeof fn)fn=obj[fn];if('function'!=typeof fn)throw new Error('bind() requires a function');var args=slice.call(arguments,2);return function(){return fn.apply(obj,args.concat(slice.call(arguments)));};};},{}],17:[function(require,module,exports){/**\n         * Expose `Emitter`.\n         */module.exports=Emitter;/**\n         * Initialize a new `Emitter`.\n         *\n         * @api public\n         */function Emitter(obj){if(obj)return mixin(obj);};/**\n         * Mixin the emitter properties.\n         *\n         * @param {Object} obj\n         * @return {Object}\n         * @api private\n         */function mixin(obj){for(var key in Emitter.prototype){obj[key]=Emitter.prototype[key];}return obj;}/**\n         * Listen on the given `event` with `fn`.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */Emitter.prototype.on=Emitter.prototype.addEventListener=function(event,fn){this._callbacks=this._callbacks||{};(this._callbacks[event]=this._callbacks[event]||[]).push(fn);return this;};/**\n         * Adds an `event` listener that will be invoked a single\n         * time then automatically removed.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */Emitter.prototype.once=function(event,fn){var self=this;this._callbacks=this._callbacks||{};function on(){self.off(event,on);fn.apply(this,arguments);}on.fn=fn;this.on(event,on);return this;};/**\n         * Remove the given callback for `event` or all\n         * registered callbacks.\n         *\n         * @param {String} event\n         * @param {Function} fn\n         * @return {Emitter}\n         * @api public\n         */Emitter.prototype.off=Emitter.prototype.removeListener=Emitter.prototype.removeAllListeners=Emitter.prototype.removeEventListener=function(event,fn){this._callbacks=this._callbacks||{};// all\nif(0==arguments.length){this._callbacks={};return this;}// specific event\nvar callbacks=this._callbacks[event];if(!callbacks)return this;// remove all handlers\nif(1==arguments.length){delete this._callbacks[event];return this;}// remove specific handler\nvar cb;for(var i=0;i<callbacks.length;i++){cb=callbacks[i];if(cb===fn||cb.fn===fn){callbacks.splice(i,1);break;}}return this;};/**\n         * Emit `event` with the given args.\n         *\n         * @param {String} event\n         * @param {Mixed} ...\n         * @return {Emitter}\n         */Emitter.prototype.emit=function(event){this._callbacks=this._callbacks||{};var args=[].slice.call(arguments,1),callbacks=this._callbacks[event];if(callbacks){callbacks=callbacks.slice(0);for(var i=0,len=callbacks.length;i<len;++i){callbacks[i].apply(this,args);}}return this;};/**\n         * Return array of callbacks for `event`.\n         *\n         * @param {String} event\n         * @return {Array}\n         * @api public\n         */Emitter.prototype.listeners=function(event){this._callbacks=this._callbacks||{};return this._callbacks[event]||[];};/**\n         * Check if this emitter has `event` handlers.\n         *\n         * @param {String} event\n         * @return {Boolean}\n         * @api public\n         */Emitter.prototype.hasListeners=function(event){return!!this.listeners(event).length;};},{}],18:[function(require,module,exports){module.exports=function(a,b){var fn=function fn(){};fn.prototype=b.prototype;a.prototype=new fn();a.prototype.constructor=a;};},{}],19:[function(require,module,exports){/**\n         * Expose `debug()` as the module.\n         */module.exports=debug;/**\n         * Create a debugger with the given `name`.\n         *\n         * @param {String} name\n         * @return {Type}\n         * @api public\n         */function debug(name){if(!debug.enabled(name))return function(){};return function(fmt){fmt=coerce(fmt);var curr=new Date();var ms=curr-(debug[name]||curr);debug[name]=curr;fmt=name+' '+fmt+' +'+debug.humanize(ms);// This hackery is required for IE8\n// where `console.log` doesn't have 'apply'\nwindow.console&&console.log&&Function.prototype.apply.call(console.log,console,arguments);};}/**\n         * The currently active debug mode names.\n         */debug.names=[];debug.skips=[];/**\n         * Enables a debug mode by name. This can include modes\n         * separated by a colon and wildcards.\n         *\n         * @param {String} name\n         * @api public\n         */debug.enable=function(name){try{localStorage.debug=name;}catch(e){}var split=(name||'').split(/[\\s,]+/),len=split.length;for(var i=0;i<len;i++){name=split[i].replace('*','.*?');if(name[0]==='-'){debug.skips.push(new RegExp('^'+name.substr(1)+'$'));}else{debug.names.push(new RegExp('^'+name+'$'));}}};/**\n         * Disable debug output.\n         *\n         * @api public\n         */debug.disable=function(){debug.enable('');};/**\n         * Humanize the given `ms`.\n         *\n         * @param {Number} m\n         * @return {String}\n         * @api private\n         */debug.humanize=function(ms){var sec=1000,min=60*1000,hour=60*min;if(ms>=hour)return(ms/hour).toFixed(1)+'h';if(ms>=min)return(ms/min).toFixed(1)+'m';if(ms>=sec)return(ms/sec|0)+'s';return ms+'ms';};/**\n         * Returns true if the given mode name is enabled, false otherwise.\n         *\n         * @param {String} name\n         * @return {Boolean}\n         * @api public\n         */debug.enabled=function(name){for(var i=0,len=debug.skips.length;i<len;i++){if(debug.skips[i].test(name)){return false;}}for(var i=0,len=debug.names.length;i<len;i++){if(debug.names[i].test(name)){return true;}}return false;};/**\n         * Coerce `val`.\n         */function coerce(val){if(val instanceof Error)return val.stack||val.message;return val;}// persist\ntry{if(window.localStorage)debug.enable(localStorage.debug);}catch(e){}},{}],20:[function(require,module,exports){module.exports=require('./lib/');},{\"./lib/\":21}],21:[function(require,module,exports){module.exports=require('./socket');/**\n         * Exports parser\n         *\n         * @api public\n         *\n         */module.exports.parser=require('engine.io-parser');},{\"./socket\":22,\"engine.io-parser\":33}],22:[function(require,module,exports){(function(global){/**\n             * Module dependencies.\n             */var transports=require('./transports');var Emitter=require('component-emitter');var debug=require('debug')('engine.io-client:socket');var index=require('indexof');var parser=require('engine.io-parser');var parseuri=require('parseuri');var parsejson=require('parsejson');var parseqs=require('parseqs');/**\n             * Module exports.\n             */module.exports=Socket;/**\n             * Noop function.\n             *\n             * @api private\n             */function noop(){}/**\n             * Socket constructor.\n             *\n             * @param {String|Object} uri or options\n             * @param {Object} options\n             * @api public\n             */function Socket(uri,opts){if(!(this instanceof Socket))return new Socket(uri,opts);opts=opts||{};if(uri&&'object'==(typeof uri===\"undefined\"?\"undefined\":_typeof(uri))){opts=uri;uri=null;}if(uri){uri=parseuri(uri);opts.host=uri.host;opts.secure=uri.protocol=='https'||uri.protocol=='wss';opts.port=uri.port;if(uri.query)opts.query=uri.query;}this.secure=null!=opts.secure?opts.secure:global.location&&'https:'==location.protocol;if(opts.host){var pieces=opts.host.split(':');opts.hostname=pieces.shift();if(pieces.length){opts.port=pieces.pop();}else if(!opts.port){// if no port is specified manually, use the protocol default\nopts.port=this.secure?'443':'80';}}this.agent=opts.agent||false;this.hostname=opts.hostname||(global.location?location.hostname:'localhost');this.port=opts.port||(global.location&&location.port?location.port:this.secure?443:80);this.query=opts.query||{};if('string'==typeof this.query)this.query=parseqs.decode(this.query);this.upgrade=false!==opts.upgrade;this.path=(opts.path||'/engine.io').replace(/\\/$/,'')+'/';this.forceJSONP=!!opts.forceJSONP;this.jsonp=false!==opts.jsonp;this.forceBase64=!!opts.forceBase64;this.enablesXDR=!!opts.enablesXDR;this.timestampParam=opts.timestampParam||'t';this.timestampRequests=opts.timestampRequests;this.transports=opts.transports||['polling','websocket'];this.readyState='';this.writeBuffer=[];this.callbackBuffer=[];this.policyPort=opts.policyPort||843;this.rememberUpgrade=opts.rememberUpgrade||false;this.binaryType=null;this.onlyBinaryUpgrades=opts.onlyBinaryUpgrades;// SSL options for Node.js client\nthis.pfx=opts.pfx||null;this.key=opts.key||null;this.passphrase=opts.passphrase||null;this.cert=opts.cert||null;this.ca=opts.ca||null;this.ciphers=opts.ciphers||null;this.rejectUnauthorized=opts.rejectUnauthorized||null;this.open();}Socket.priorWebsocketSuccess=false;/**\n             * Mix in `Emitter`.\n             */Emitter(Socket.prototype);/**\n             * Protocol version.\n             *\n             * @api public\n             */Socket.protocol=parser.protocol;// this is an int\n/**\n             * Expose deps for legacy compatibility\n             * and standalone browser access.\n             */Socket.Socket=Socket;Socket.Transport=require('./transport');Socket.transports=require('./transports');Socket.parser=require('engine.io-parser');/**\n             * Creates transport of the given type.\n             *\n             * @param {String} transport name\n             * @return {Transport}\n             * @api private\n             */Socket.prototype.createTransport=function(name){debug('creating transport \"%s\"',name);var query=clone(this.query);// append engine.io protocol identifier\nquery.EIO=parser.protocol;// transport name\nquery.transport=name;// session id if we already have one\nif(this.id)query.sid=this.id;var transport=new transports[name]({agent:this.agent,hostname:this.hostname,port:this.port,secure:this.secure,path:this.path,query:query,forceJSONP:this.forceJSONP,jsonp:this.jsonp,forceBase64:this.forceBase64,enablesXDR:this.enablesXDR,timestampRequests:this.timestampRequests,timestampParam:this.timestampParam,policyPort:this.policyPort,socket:this,pfx:this.pfx,key:this.key,passphrase:this.passphrase,cert:this.cert,ca:this.ca,ciphers:this.ciphers,rejectUnauthorized:this.rejectUnauthorized});return transport;};function clone(obj){var o={};for(var i in obj){if(obj.hasOwnProperty(i)){o[i]=obj[i];}}return o;}/**\n             * Initializes transport to use and starts probe.\n             *\n             * @api private\n             */Socket.prototype.open=function(){var transport;if(this.rememberUpgrade&&Socket.priorWebsocketSuccess&&this.transports.indexOf('websocket')!=-1){transport='websocket';}else if(0==this.transports.length){// Emit error on next tick so it can be listened to\nvar self=this;setTimeout(function(){self.emit('error','No transports available');},0);return;}else{transport=this.transports[0];}this.readyState='opening';// Retry with the next transport if the transport is disabled (jsonp: false)\nvar transport;try{transport=this.createTransport(transport);}catch(e){this.transports.shift();this.open();return;}transport.open();this.setTransport(transport);};/**\n             * Sets the current transport. Disables the existing one (if any).\n             *\n             * @api private\n             */Socket.prototype.setTransport=function(transport){debug('setting transport %s',transport.name);var self=this;if(this.transport){debug('clearing existing transport %s',this.transport.name);this.transport.removeAllListeners();}// set up transport\nthis.transport=transport;// set up transport listeners\ntransport.on('drain',function(){self.onDrain();}).on('packet',function(packet){self.onPacket(packet);}).on('error',function(e){self.onError(e);}).on('close',function(){self.onClose('transport close');});};/**\n             * Probes a transport.\n             *\n             * @param {String} transport name\n             * @api private\n             */Socket.prototype.probe=function(name){debug('probing transport \"%s\"',name);var transport=this.createTransport(name,{probe:1}),failed=false,self=this;Socket.priorWebsocketSuccess=false;function onTransportOpen(){if(self.onlyBinaryUpgrades){var upgradeLosesBinary=!this.supportsBinary&&self.transport.supportsBinary;failed=failed||upgradeLosesBinary;}if(failed)return;debug('probe transport \"%s\" opened',name);transport.send([{type:'ping',data:'probe'}]);transport.once('packet',function(msg){if(failed)return;if('pong'==msg.type&&'probe'==msg.data){debug('probe transport \"%s\" pong',name);self.upgrading=true;self.emit('upgrading',transport);if(!transport)return;Socket.priorWebsocketSuccess='websocket'==transport.name;debug('pausing current transport \"%s\"',self.transport.name);self.transport.pause(function(){if(failed)return;if('closed'==self.readyState)return;debug('changing transport and sending upgrade packet');cleanup();self.setTransport(transport);transport.send([{type:'upgrade'}]);self.emit('upgrade',transport);transport=null;self.upgrading=false;self.flush();});}else{debug('probe transport \"%s\" failed',name);var err=new Error('probe error');err.transport=transport.name;self.emit('upgradeError',err);}});}function freezeTransport(){if(failed)return;// Any callback called by transport should be ignored since now\nfailed=true;cleanup();transport.close();transport=null;}//Handle any error that happens while probing\nfunction onerror(err){var error=new Error('probe error: '+err);error.transport=transport.name;freezeTransport();debug('probe transport \"%s\" failed because of error: %s',name,err);self.emit('upgradeError',error);}function onTransportClose(){onerror(\"transport closed\");}//When the socket is closed while we're probing\nfunction onclose(){onerror(\"socket closed\");}//When the socket is upgraded while we're probing\nfunction onupgrade(to){if(transport&&to.name!=transport.name){debug('\"%s\" works - aborting \"%s\"',to.name,transport.name);freezeTransport();}}//Remove all listeners on the transport and on self\nfunction cleanup(){transport.removeListener('open',onTransportOpen);transport.removeListener('error',onerror);transport.removeListener('close',onTransportClose);self.removeListener('close',onclose);self.removeListener('upgrading',onupgrade);}transport.once('open',onTransportOpen);transport.once('error',onerror);transport.once('close',onTransportClose);this.once('close',onclose);this.once('upgrading',onupgrade);transport.open();};/**\n             * Called when connection is deemed open.\n             *\n             * @api public\n             */Socket.prototype.onOpen=function(){debug('socket open');this.readyState='open';Socket.priorWebsocketSuccess='websocket'==this.transport.name;this.emit('open');this.flush();// we check for `readyState` in case an `open`\n// listener already closed the socket\nif('open'==this.readyState&&this.upgrade&&this.transport.pause){debug('starting upgrade probes');for(var i=0,l=this.upgrades.length;i<l;i++){this.probe(this.upgrades[i]);}}};/**\n             * Handles a packet.\n             *\n             * @api private\n             */Socket.prototype.onPacket=function(packet){if('opening'==this.readyState||'open'==this.readyState){debug('socket receive: type \"%s\", data \"%s\"',packet.type,packet.data);this.emit('packet',packet);// Socket is live - any packet counts\nthis.emit('heartbeat');switch(packet.type){case'open':this.onHandshake(parsejson(packet.data));break;case'pong':this.setPing();break;case'error':var err=new Error('server error');err.code=packet.data;this.emit('error',err);break;case'message':this.emit('data',packet.data);this.emit('message',packet.data);break;}}else{debug('packet received with socket readyState \"%s\"',this.readyState);}};/**\n             * Called upon handshake completion.\n             *\n             * @param {Object} handshake obj\n             * @api private\n             */Socket.prototype.onHandshake=function(data){this.emit('handshake',data);this.id=data.sid;this.transport.query.sid=data.sid;this.upgrades=this.filterUpgrades(data.upgrades);this.pingInterval=data.pingInterval;this.pingTimeout=data.pingTimeout;this.onOpen();// In case open handler closes socket\nif('closed'==this.readyState)return;this.setPing();// Prolong liveness of socket on heartbeat\nthis.removeListener('heartbeat',this.onHeartbeat);this.on('heartbeat',this.onHeartbeat);};/**\n             * Resets ping timeout.\n             *\n             * @api private\n             */Socket.prototype.onHeartbeat=function(timeout){clearTimeout(this.pingTimeoutTimer);var self=this;self.pingTimeoutTimer=setTimeout(function(){if('closed'==self.readyState)return;self.onClose('ping timeout');},timeout||self.pingInterval+self.pingTimeout);};/**\n             * Pings server every `this.pingInterval` and expects response\n             * within `this.pingTimeout` or closes connection.\n             *\n             * @api private\n             */Socket.prototype.setPing=function(){var self=this;clearTimeout(self.pingIntervalTimer);self.pingIntervalTimer=setTimeout(function(){debug('writing ping packet - expecting pong within %sms',self.pingTimeout);self.ping();self.onHeartbeat(self.pingTimeout);},self.pingInterval);};/**\n             * Sends a ping packet.\n             *\n             * @api public\n             */Socket.prototype.ping=function(){this.sendPacket('ping');};/**\n             * Called on `drain` event\n             *\n             * @api private\n             */Socket.prototype.onDrain=function(){for(var i=0;i<this.prevBufferLen;i++){if(this.callbackBuffer[i]){this.callbackBuffer[i]();}}this.writeBuffer.splice(0,this.prevBufferLen);this.callbackBuffer.splice(0,this.prevBufferLen);// setting prevBufferLen = 0 is very important\n// for example, when upgrading, upgrade packet is sent over,\n// and a nonzero prevBufferLen could cause problems on `drain`\nthis.prevBufferLen=0;if(this.writeBuffer.length==0){this.emit('drain');}else{this.flush();}};/**\n             * Flush write buffers.\n             *\n             * @api private\n             */Socket.prototype.flush=function(){if('closed'!=this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){debug('flushing %d packets in socket',this.writeBuffer.length);this.transport.send(this.writeBuffer);// keep track of current length of writeBuffer\n// splice writeBuffer and callbackBuffer on `drain`\nthis.prevBufferLen=this.writeBuffer.length;this.emit('flush');}};/**\n             * Sends a message.\n             *\n             * @param {String} message.\n             * @param {Function} callback function.\n             * @return {Socket} for chaining.\n             * @api public\n             */Socket.prototype.write=Socket.prototype.send=function(msg,fn){this.sendPacket('message',msg,fn);return this;};/**\n             * Sends a packet.\n             *\n             * @param {String} packet type.\n             * @param {String} data.\n             * @param {Function} callback function.\n             * @api private\n             */Socket.prototype.sendPacket=function(type,data,fn){if('closing'==this.readyState||'closed'==this.readyState){return;}var packet={type:type,data:data};this.emit('packetCreate',packet);this.writeBuffer.push(packet);this.callbackBuffer.push(fn);this.flush();};/**\n             * Closes the connection.\n             *\n             * @api private\n             */Socket.prototype.close=function(){if('opening'==this.readyState||'open'==this.readyState){var close=function close(){self.onClose('forced close');debug('socket closing - telling transport to close');self.transport.close();};var cleanupAndClose=function cleanupAndClose(){self.removeListener('upgrade',cleanupAndClose);self.removeListener('upgradeError',cleanupAndClose);close();};var waitForUpgrade=function waitForUpgrade(){// wait for upgrade to finish since we can't send packets while pausing a transport\nself.once('upgrade',cleanupAndClose);self.once('upgradeError',cleanupAndClose);};this.readyState='closing';var self=this;if(this.writeBuffer.length){this.once('drain',function(){if(this.upgrading){waitForUpgrade();}else{close();}});}else if(this.upgrading){waitForUpgrade();}else{close();}}return this;};/**\n             * Called upon transport error\n             *\n             * @api private\n             */Socket.prototype.onError=function(err){debug('socket error %j',err);Socket.priorWebsocketSuccess=false;this.emit('error',err);this.onClose('transport error',err);};/**\n             * Called upon transport close.\n             *\n             * @api private\n             */Socket.prototype.onClose=function(reason,desc){if('opening'==this.readyState||'open'==this.readyState||'closing'==this.readyState){debug('socket close with reason: \"%s\"',reason);var self=this;// clear timers\nclearTimeout(this.pingIntervalTimer);clearTimeout(this.pingTimeoutTimer);// clean buffers in next tick, so developers can still\n// grab the buffers on `close` event\nsetTimeout(function(){self.writeBuffer=[];self.callbackBuffer=[];self.prevBufferLen=0;},0);// stop event from firing again for transport\nthis.transport.removeAllListeners('close');// ensure transport won't stay open\nthis.transport.close();// ignore further transport communication\nthis.transport.removeAllListeners();// set ready state\nthis.readyState='closed';// clear session id\nthis.id=null;// emit close event\nthis.emit('close',reason,desc);}};/**\n             * Filters upgrades, returning only those matching client transports.\n             *\n             * @param {Array} server upgrades\n             * @api private\n             *\n             */Socket.prototype.filterUpgrades=function(upgrades){var filteredUpgrades=[];for(var i=0,j=upgrades.length;i<j;i++){if(~index(this.transports,upgrades[i]))filteredUpgrades.push(upgrades[i]);}return filteredUpgrades;};}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./transport\":23,\"./transports\":24,\"component-emitter\":17,\"debug\":30,\"engine.io-parser\":33,\"indexof\":41,\"parsejson\":49,\"parseqs\":50,\"parseuri\":32}],23:[function(require,module,exports){/**\n         * Module dependencies.\n         */var parser=require('engine.io-parser');var Emitter=require('component-emitter');/**\n         * Module exports.\n         */module.exports=Transport;/**\n         * Transport abstract constructor.\n         *\n         * @param {Object} options.\n         * @api private\n         */function Transport(opts){this.path=opts.path;this.hostname=opts.hostname;this.port=opts.port;this.secure=opts.secure;this.query=opts.query;this.timestampParam=opts.timestampParam;this.timestampRequests=opts.timestampRequests;this.readyState='';this.agent=opts.agent||false;this.socket=opts.socket;this.enablesXDR=opts.enablesXDR;// SSL options for Node.js client\nthis.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;}/**\n         * Mix in `Emitter`.\n         */Emitter(Transport.prototype);/**\n         * A counter used to prevent collisions in the timestamps used\n         * for cache busting.\n         */Transport.timestamps=0;/**\n         * Emits an error.\n         *\n         * @param {String} str\n         * @return {Transport} for chaining\n         * @api public\n         */Transport.prototype.onError=function(msg,desc){var err=new Error(msg);err.type='TransportError';err.description=desc;this.emit('error',err);return this;};/**\n         * Opens the transport.\n         *\n         * @api public\n         */Transport.prototype.open=function(){if('closed'==this.readyState||''==this.readyState){this.readyState='opening';this.doOpen();}return this;};/**\n         * Closes the transport.\n         *\n         * @api private\n         */Transport.prototype.close=function(){if('opening'==this.readyState||'open'==this.readyState){this.doClose();this.onClose();}return this;};/**\n         * Sends multiple packets.\n         *\n         * @param {Array} packets\n         * @api private\n         */Transport.prototype.send=function(packets){if('open'==this.readyState){this.write(packets);}else{throw new Error('Transport not open');}};/**\n         * Called upon open\n         *\n         * @api private\n         */Transport.prototype.onOpen=function(){this.readyState='open';this.writable=true;this.emit('open');};/**\n         * Called with data.\n         *\n         * @param {String} data\n         * @api private\n         */Transport.prototype.onData=function(data){var packet=parser.decodePacket(data,this.socket.binaryType);this.onPacket(packet);};/**\n         * Called with a decoded packet.\n         */Transport.prototype.onPacket=function(packet){this.emit('packet',packet);};/**\n         * Called upon close.\n         *\n         * @api private\n         */Transport.prototype.onClose=function(){this.readyState='closed';this.emit('close');};},{\"component-emitter\":17,\"engine.io-parser\":33}],24:[function(require,module,exports){(function(global){/**\n             * Module dependencies\n             */var XMLHttpRequest=require('xmlhttprequest');var XHR=require('./polling-xhr');var JSONP=require('./polling-jsonp');var websocket=require('./websocket');/**\n             * Export transports.\n             */exports.polling=polling;exports.websocket=websocket;/**\n             * Polling transport polymorphic constructor.\n             * Decides on xhr vs jsonp based on feature detection.\n             *\n             * @api private\n             */function polling(opts){var xhr;var xd=false;var xs=false;var jsonp=false!==opts.jsonp;if(global.location){var isSSL='https:'==location.protocol;var port=location.port;// some user agents have empty `location.port`\nif(!port){port=isSSL?443:80;}xd=opts.hostname!=location.hostname||port!=opts.port;xs=opts.secure!=isSSL;}opts.xdomain=xd;opts.xscheme=xs;xhr=new XMLHttpRequest(opts);if('open'in xhr&&!opts.forceJSONP){return new XHR(opts);}else{if(!jsonp)throw new Error('JSONP disabled');return new JSONP(opts);}}}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./polling-jsonp\":25,\"./polling-xhr\":26,\"./websocket\":28,\"xmlhttprequest\":29}],25:[function(require,module,exports){(function(global){/**\n             * Module requirements.\n             */var Polling=require('./polling');var inherit=require('component-inherit');/**\n             * Module exports.\n             */module.exports=JSONPPolling;/**\n             * Cached regular expressions.\n             */var rNewline=/\\n/g;var rEscapedNewline=/\\\\n/g;/**\n             * Global JSONP callbacks.\n             */var callbacks;/**\n             * Callbacks count.\n             */var index=0;/**\n             * Noop.\n             */function empty(){}/**\n             * JSONP Polling constructor.\n             *\n             * @param {Object} opts.\n             * @api public\n             */function JSONPPolling(opts){Polling.call(this,opts);this.query=this.query||{};// define global callbacks array if not present\n// we do this here (lazily) to avoid unneeded global pollution\nif(!callbacks){// we need to consider multiple engines in the same page\nif(!global.___eio)global.___eio=[];callbacks=global.___eio;}// callback identifier\nthis.index=callbacks.length;// add callback to jsonp global\nvar self=this;callbacks.push(function(msg){self.onData(msg);});// append to query string\nthis.query.j=this.index;// prevent spurious errors from being emitted when the window is unloaded\nif(global.document&&global.addEventListener){global.addEventListener('beforeunload',function(){if(self.script)self.script.onerror=empty;},false);}}/**\n             * Inherits from Polling.\n             */inherit(JSONPPolling,Polling);/*\n * JSONP only supports binary as base64 encoded strings\n */JSONPPolling.prototype.supportsBinary=false;/**\n             * Closes the socket.\n             *\n             * @api private\n             */JSONPPolling.prototype.doClose=function(){if(this.script){this.script.parentNode.removeChild(this.script);this.script=null;}if(this.form){this.form.parentNode.removeChild(this.form);this.form=null;this.iframe=null;}Polling.prototype.doClose.call(this);};/**\n             * Starts a poll cycle.\n             *\n             * @api private\n             */JSONPPolling.prototype.doPoll=function(){var self=this;var script=document.createElement('script');if(this.script){this.script.parentNode.removeChild(this.script);this.script=null;}script.async=true;script.src=this.uri();script.onerror=function(e){self.onError('jsonp poll error',e);};var insertAt=document.getElementsByTagName('script')[0];insertAt.parentNode.insertBefore(script,insertAt);this.script=script;var isUAgecko='undefined'!=typeof navigator&&/gecko/i.test(navigator.userAgent);if(isUAgecko){setTimeout(function(){var iframe=document.createElement('iframe');document.body.appendChild(iframe);document.body.removeChild(iframe);},100);}};/**\n             * Writes with a hidden iframe.\n             *\n             * @param {String} data to send\n             * @param {Function} called upon flush.\n             * @api private\n             */JSONPPolling.prototype.doWrite=function(data,fn){var self=this;if(!this.form){var form=document.createElement('form');var area=document.createElement('textarea');var id=this.iframeId='eio_iframe_'+this.index;var iframe;form.className='socketio';form.style.position='absolute';form.style.top='-1000px';form.style.left='-1000px';form.target=id;form.method='POST';form.setAttribute('accept-charset','utf-8');area.name='d';form.appendChild(area);document.body.appendChild(form);this.form=form;this.area=area;}this.form.action=this.uri();function complete(){initIframe();fn();}function initIframe(){if(self.iframe){try{self.form.removeChild(self.iframe);}catch(e){self.onError('jsonp polling iframe removal error',e);}}try{// ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\nvar html='<iframe src=\"javascript:0\" name=\"'+self.iframeId+'\">';iframe=document.createElement(html);}catch(e){iframe=document.createElement('iframe');iframe.name=self.iframeId;iframe.src='javascript:0';}iframe.id=self.iframeId;self.form.appendChild(iframe);self.iframe=iframe;}initIframe();// escape \\n to prevent it from being converted into \\r\\n by some UAs\n// double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side\ndata=data.replace(rEscapedNewline,'\\\\\\n');this.area.value=data.replace(rNewline,'\\\\n');try{this.form.submit();}catch(e){}if(this.iframe.attachEvent){this.iframe.onreadystatechange=function(){if(self.iframe.readyState=='complete'){complete();}};}else{this.iframe.onload=complete;}};}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./polling\":27,\"component-inherit\":18}],26:[function(require,module,exports){(function(global){/**\n             * Module requirements.\n             */var XMLHttpRequest=require('xmlhttprequest');var Polling=require('./polling');var Emitter=require('component-emitter');var inherit=require('component-inherit');var debug=require('debug')('engine.io-client:polling-xhr');/**\n             * Module exports.\n             */module.exports=XHR;module.exports.Request=Request;/**\n             * Empty function\n             */function empty(){}/**\n             * XHR Polling constructor.\n             *\n             * @param {Object} opts\n             * @api public\n             */function XHR(opts){Polling.call(this,opts);if(global.location){var isSSL='https:'==location.protocol;var port=location.port;// some user agents have empty `location.port`\nif(!port){port=isSSL?443:80;}this.xd=opts.hostname!=global.location.hostname||port!=opts.port;this.xs=opts.secure!=isSSL;}}/**\n             * Inherits from Polling.\n             */inherit(XHR,Polling);/**\n             * XHR supports binary\n             */XHR.prototype.supportsBinary=true;/**\n             * Creates a request.\n             *\n             * @param {String} method\n             * @api private\n             */XHR.prototype.request=function(opts){opts=opts||{};opts.uri=this.uri();opts.xd=this.xd;opts.xs=this.xs;opts.agent=this.agent||false;opts.supportsBinary=this.supportsBinary;opts.enablesXDR=this.enablesXDR;// SSL options for Node.js client\nopts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;return new Request(opts);};/**\n             * Sends data.\n             *\n             * @param {String} data to send.\n             * @param {Function} called upon flush.\n             * @api private\n             */XHR.prototype.doWrite=function(data,fn){var isBinary=typeof data!=='string'&&data!==undefined;var req=this.request({method:'POST',data:data,isBinary:isBinary});var self=this;req.on('success',fn);req.on('error',function(err){self.onError('xhr post error',err);});this.sendXhr=req;};/**\n             * Starts a poll cycle.\n             *\n             * @api private\n             */XHR.prototype.doPoll=function(){debug('xhr poll');var req=this.request();var self=this;req.on('data',function(data){self.onData(data);});req.on('error',function(err){self.onError('xhr poll error',err);});this.pollXhr=req;};/**\n             * Request constructor\n             *\n             * @param {Object} options\n             * @api public\n             */function Request(opts){this.method=opts.method||'GET';this.uri=opts.uri;this.xd=!!opts.xd;this.xs=!!opts.xs;this.async=false!==opts.async;this.data=undefined!=opts.data?opts.data:null;this.agent=opts.agent;this.isBinary=opts.isBinary;this.supportsBinary=opts.supportsBinary;this.enablesXDR=opts.enablesXDR;// SSL options for Node.js client\nthis.pfx=opts.pfx;this.key=opts.key;this.passphrase=opts.passphrase;this.cert=opts.cert;this.ca=opts.ca;this.ciphers=opts.ciphers;this.rejectUnauthorized=opts.rejectUnauthorized;this.create();}/**\n             * Mix in `Emitter`.\n             */Emitter(Request.prototype);/**\n             * Creates the XHR object and sends the request.\n             *\n             * @api private\n             */Request.prototype.create=function(){var opts={agent:this.agent,xdomain:this.xd,xscheme:this.xs,enablesXDR:this.enablesXDR};// SSL options for Node.js client\nopts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;var xhr=this.xhr=new XMLHttpRequest(opts);var self=this;try{debug('xhr open %s: %s',this.method,this.uri);xhr.open(this.method,this.uri,this.async);if(this.supportsBinary){// This has to be done after open because Firefox is stupid\n// http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension\nxhr.responseType='arraybuffer';}if('POST'==this.method){try{if(this.isBinary){xhr.setRequestHeader('Content-type','application/octet-stream');}else{xhr.setRequestHeader('Content-type','text/plain;charset=UTF-8');}}catch(e){}}// ie6 check\nif('withCredentials'in xhr){xhr.withCredentials=true;}if(this.hasXDR()){xhr.onload=function(){self.onLoad();};xhr.onerror=function(){self.onError(xhr.responseText);};}else{xhr.onreadystatechange=function(){if(4!=xhr.readyState)return;if(200==xhr.status||1223==xhr.status){self.onLoad();}else{// make sure the `error` event handler that's user-set\n// does not throw in the same tick and gets caught here\nsetTimeout(function(){self.onError(xhr.status);},0);}};}debug('xhr data %s',this.data);xhr.send(this.data);}catch(e){// Need to defer since .create() is called directly fhrom the constructor\n// and thus the 'error' event can only be only bound *after* this exception\n// occurs.  Therefore, also, we cannot throw here at all.\nsetTimeout(function(){self.onError(e);},0);return;}if(global.document){this.index=Request.requestsCount++;Request.requests[this.index]=this;}};/**\n             * Called upon successful response.\n             *\n             * @api private\n             */Request.prototype.onSuccess=function(){this.emit('success');this.cleanup();};/**\n             * Called if we have data.\n             *\n             * @api private\n             */Request.prototype.onData=function(data){this.emit('data',data);this.onSuccess();};/**\n             * Called upon error.\n             *\n             * @api private\n             */Request.prototype.onError=function(err){this.emit('error',err);this.cleanup(true);};/**\n             * Cleans up house.\n             *\n             * @api private\n             */Request.prototype.cleanup=function(fromError){if('undefined'==typeof this.xhr||null===this.xhr){return;}// xmlhttprequest\nif(this.hasXDR()){this.xhr.onload=this.xhr.onerror=empty;}else{this.xhr.onreadystatechange=empty;}if(fromError){try{this.xhr.abort();}catch(e){}}if(global.document){delete Request.requests[this.index];}this.xhr=null;};/**\n             * Called upon load.\n             *\n             * @api private\n             */Request.prototype.onLoad=function(){var data;try{var contentType;try{contentType=this.xhr.getResponseHeader('Content-Type').split(';')[0];}catch(e){}if(contentType==='application/octet-stream'){data=this.xhr.response;}else{if(!this.supportsBinary){data=this.xhr.responseText;}else{data='ok';}}}catch(e){this.onError(e);}if(null!=data){this.onData(data);}};/**\n             * Check if it has XDomainRequest.\n             *\n             * @api private\n             */Request.prototype.hasXDR=function(){return'undefined'!==typeof global.XDomainRequest&&!this.xs&&this.enablesXDR;};/**\n             * Aborts the request.\n             *\n             * @api public\n             */Request.prototype.abort=function(){this.cleanup();};/**\n             * Aborts pending requests when unloading the window. This is needed to prevent\n             * memory leaks (e.g. when using IE) and to ensure that no spurious error is\n             * emitted.\n             */if(global.document){Request.requestsCount=0;Request.requests={};if(global.attachEvent){global.attachEvent('onunload',unloadHandler);}else if(global.addEventListener){global.addEventListener('beforeunload',unloadHandler,false);}}function unloadHandler(){for(var i in Request.requests){if(Request.requests.hasOwnProperty(i)){Request.requests[i].abort();}}}}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./polling\":27,\"component-emitter\":17,\"component-inherit\":18,\"debug\":30,\"xmlhttprequest\":29}],27:[function(require,module,exports){/**\n         * Module dependencies.\n         */var Transport=require('../transport');var parseqs=require('parseqs');var parser=require('engine.io-parser');var inherit=require('component-inherit');var debug=require('debug')('engine.io-client:polling');/**\n         * Module exports.\n         */module.exports=Polling;/**\n         * Is XHR2 supported?\n         */var hasXHR2=function(){var XMLHttpRequest=require('xmlhttprequest');var xhr=new XMLHttpRequest({xdomain:false});return null!=xhr.responseType;}();/**\n         * Polling interface.\n         *\n         * @param {Object} opts\n         * @api private\n         */function Polling(opts){var forceBase64=opts&&opts.forceBase64;if(!hasXHR2||forceBase64){this.supportsBinary=false;}Transport.call(this,opts);}/**\n         * Inherits from Transport.\n         */inherit(Polling,Transport);/**\n         * Transport name.\n         */Polling.prototype.name='polling';/**\n         * Opens the socket (triggers polling). We write a PING message to determine\n         * when the transport is open.\n         *\n         * @api private\n         */Polling.prototype.doOpen=function(){this.poll();};/**\n         * Pauses polling.\n         *\n         * @param {Function} callback upon buffers are flushed and transport is paused\n         * @api private\n         */Polling.prototype.pause=function(onPause){var pending=0;var self=this;this.readyState='pausing';function pause(){debug('paused');self.readyState='paused';onPause();}if(this.polling||!this.writable){var total=0;if(this.polling){debug('we are currently polling - waiting to pause');total++;this.once('pollComplete',function(){debug('pre-pause polling complete');--total||pause();});}if(!this.writable){debug('we are currently writing - waiting to pause');total++;this.once('drain',function(){debug('pre-pause writing complete');--total||pause();});}}else{pause();}};/**\n         * Starts polling cycle.\n         *\n         * @api public\n         */Polling.prototype.poll=function(){debug('polling');this.polling=true;this.doPoll();this.emit('poll');};/**\n         * Overloads onData to detect payloads.\n         *\n         * @api private\n         */Polling.prototype.onData=function(data){var self=this;debug('polling got data %s',data);var callback=function callback(packet,index,total){// if its the first message we consider the transport open\nif('opening'==self.readyState){self.onOpen();}// if its a close packet, we close the ongoing requests\nif('close'==packet.type){self.onClose();return false;}// otherwise bypass onData and handle the message\nself.onPacket(packet);};// decode payload\nparser.decodePayload(data,this.socket.binaryType,callback);// if an event did not trigger closing\nif('closed'!=this.readyState){// if we got data we're not polling\nthis.polling=false;this.emit('pollComplete');if('open'==this.readyState){this.poll();}else{debug('ignoring poll - transport state \"%s\"',this.readyState);}}};/**\n         * For polling, send a close packet.\n         *\n         * @api private\n         */Polling.prototype.doClose=function(){var self=this;function close(){debug('writing close packet');self.write([{type:'close'}]);}if('open'==this.readyState){debug('transport open - closing');close();}else{// in case we're trying to close while\n// handshaking is in progress (GH-164)\ndebug('transport not open - deferring close');this.once('open',close);}};/**\n         * Writes a packets payload.\n         *\n         * @param {Array} data packets\n         * @param {Function} drain callback\n         * @api private\n         */Polling.prototype.write=function(packets){var self=this;this.writable=false;var callbackfn=function callbackfn(){self.writable=true;self.emit('drain');};var self=this;parser.encodePayload(packets,this.supportsBinary,function(data){self.doWrite(data,callbackfn);});};/**\n         * Generates uri for connection.\n         *\n         * @api private\n         */Polling.prototype.uri=function(){var query=this.query||{};var schema=this.secure?'https':'http';var port='';// cache busting is forced\nif(false!==this.timestampRequests){query[this.timestampParam]=+new Date()+'-'+Transport.timestamps++;}if(!this.supportsBinary&&!query.sid){query.b64=1;}query=parseqs.encode(query);// avoid port if default for schema\nif(this.port&&('https'==schema&&this.port!=443||'http'==schema&&this.port!=80)){port=':'+this.port;}// prepend ? to query\nif(query.length){query='?'+query;}return schema+'://'+this.hostname+port+this.path+query;};},{\"../transport\":23,\"component-inherit\":18,\"debug\":30,\"engine.io-parser\":33,\"parseqs\":50,\"xmlhttprequest\":29}],28:[function(require,module,exports){/**\n         * Module dependencies.\n         */var Transport=require('../transport');var parser=require('engine.io-parser');var parseqs=require('parseqs');var inherit=require('component-inherit');var debug=require('debug')('engine.io-client:websocket');/**\n         * `ws` exposes a WebSocket-compatible interface in\n         * Node, or the `WebSocket` or `MozWebSocket` globals\n         * in the browser.\n         */var WebSocket=require('ws');/**\n         * Module exports.\n         */module.exports=WS;/**\n         * WebSocket transport constructor.\n         *\n         * @api {Object} connection options\n         * @api public\n         */function WS(opts){var forceBase64=opts&&opts.forceBase64;if(forceBase64){this.supportsBinary=false;}Transport.call(this,opts);}/**\n         * Inherits from Transport.\n         */inherit(WS,Transport);/**\n         * Transport name.\n         *\n         * @api public\n         */WS.prototype.name='websocket';/*\n * WebSockets support binary\n */WS.prototype.supportsBinary=true;/**\n         * Opens socket.\n         *\n         * @api private\n         */WS.prototype.doOpen=function(){if(!this.check()){// let probe timeout\nreturn;}var self=this;var uri=this.uri();var protocols=void 0;var opts={agent:this.agent};// SSL options for Node.js client\nopts.pfx=this.pfx;opts.key=this.key;opts.passphrase=this.passphrase;opts.cert=this.cert;opts.ca=this.ca;opts.ciphers=this.ciphers;opts.rejectUnauthorized=this.rejectUnauthorized;this.ws=new WebSocket(uri,protocols,opts);if(this.ws.binaryType===undefined){this.supportsBinary=false;}this.ws.binaryType='arraybuffer';this.addEventListeners();};/**\n         * Adds event listeners to the socket\n         *\n         * @api private\n         */WS.prototype.addEventListeners=function(){var self=this;this.ws.onopen=function(){self.onOpen();};this.ws.onclose=function(){self.onClose();};this.ws.onmessage=function(ev){self.onData(ev.data);};this.ws.onerror=function(e){self.onError('websocket error',e);};};/**\n         * Override `onData` to use a timer on iOS.\n         * See: https://gist.github.com/mloughran/2052006\n         *\n         * @api private\n         */if('undefined'!=typeof navigator&&/iPad|iPhone|iPod/i.test(navigator.userAgent)){WS.prototype.onData=function(data){var self=this;setTimeout(function(){Transport.prototype.onData.call(self,data);},0);};}/**\n         * Writes data to socket.\n         *\n         * @param {Array} array of packets.\n         * @api private\n         */WS.prototype.write=function(packets){var self=this;this.writable=false;// encodePacket efficient as it uses WS framing\n// no need for encodePayload\nfor(var i=0,l=packets.length;i<l;i++){parser.encodePacket(packets[i],this.supportsBinary,function(data){//Sometimes the websocket has already been closed but the browser didn't\n//have a chance of informing us about it yet, in that case send will\n//throw an error\ntry{self.ws.send(data);}catch(e){debug('websocket closed before onclose event');}});}function ondrain(){self.writable=true;self.emit('drain');}// fake drain\n// defer to next tick to allow Socket to clear writeBuffer\nsetTimeout(ondrain,0);};/**\n         * Called upon close\n         *\n         * @api private\n         */WS.prototype.onClose=function(){Transport.prototype.onClose.call(this);};/**\n         * Closes socket.\n         *\n         * @api private\n         */WS.prototype.doClose=function(){if(typeof this.ws!=='undefined'){this.ws.close();}};/**\n         * Generates uri for connection.\n         *\n         * @api private\n         */WS.prototype.uri=function(){var query=this.query||{};var schema=this.secure?'wss':'ws';var port='';// avoid port if default for schema\nif(this.port&&('wss'==schema&&this.port!=443||'ws'==schema&&this.port!=80)){port=':'+this.port;}// append timestamp to URI\nif(this.timestampRequests){query[this.timestampParam]=+new Date();}// communicate binary support capabilities\nif(!this.supportsBinary){query.b64=1;}query=parseqs.encode(query);// prepend ? to query\nif(query.length){query='?'+query;}return schema+'://'+this.hostname+port+this.path+query;};/**\n         * Feature detection for WebSocket.\n         *\n         * @return {Boolean} whether this transport is available.\n         * @api public\n         */WS.prototype.check=function(){return!!WebSocket&&!('__initialize'in WebSocket&&this.name===WS.prototype.name);};},{\"../transport\":23,\"component-inherit\":18,\"debug\":30,\"engine.io-parser\":33,\"parseqs\":50,\"ws\":76}],29:[function(require,module,exports){// browser shim for xmlhttprequest module\nvar hasCORS=require('has-cors');module.exports=function(opts){var xdomain=opts.xdomain;// scheme must be same when usign XDomainRequest\n// http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\nvar xscheme=opts.xscheme;// XDomainRequest has a flow of not sending cookie, therefore it should be disabled as a default.\n// https://github.com/Automattic/engine.io-client/pull/217\nvar enablesXDR=opts.enablesXDR;// XMLHttpRequest can be disabled on IE\ntry{if('undefined'!=typeof XMLHttpRequest&&(!xdomain||hasCORS)){return new XMLHttpRequest();}}catch(e){}// Use XDomainRequest for IE8 if enablesXDR is true\n// because loading bar keeps flashing when using jsonp-polling\n// https://github.com/yujiosaka/socke.io-ie8-loading-example\ntry{if('undefined'!=typeof XDomainRequest&&!xscheme&&enablesXDR){return new XDomainRequest();}}catch(e){}if(!xdomain){try{return new ActiveXObject('Microsoft.XMLHTTP');}catch(e){}}};},{\"has-cors\":40}],30:[function(require,module,exports){/**\n         * This is the web browser implementation of `debug()`.\n         *\n         * Expose `debug()` as the module.\n         */exports=module.exports=require('./debug');exports.log=log;exports.formatArgs=formatArgs;exports.save=save;exports.load=load;exports.useColors=useColors;/**\n         * Colors.\n         */exports.colors=['lightseagreen','forestgreen','goldenrod','dodgerblue','darkorchid','crimson'];/**\n         * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n         * and the Firebug extension (any Firefox version) are known\n         * to support \"%c\" CSS customizations.\n         *\n         * TODO: add a `localStorage` variable to explicitly enable/disable colors\n         */function useColors(){// is webkit? http://stackoverflow.com/a/16459606/376773\nreturn'WebkitAppearance'in document.documentElement.style||// is firebug? http://stackoverflow.com/a/398120/376773\nwindow.console&&(console.firebug||console.exception&&console.table)||// is firefox >= v31?\n// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\nnavigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/)&&parseInt(RegExp.$1,10)>=31;}/**\n         * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n         */exports.formatters.j=function(v){return JSON.stringify(v);};/**\n         * Colorize log arguments if enabled.\n         *\n         * @api public\n         */function formatArgs(){var args=arguments;var useColors=this.useColors;args[0]=(useColors?'%c':'')+this.namespace+(useColors?' %c':' ')+args[0]+(useColors?'%c ':' ')+'+'+exports.humanize(this.diff);if(!useColors)return args;var c='color: '+this.color;args=[args[0],c,'color: inherit'].concat(Array.prototype.slice.call(args,1));// the final \"%c\" is somewhat tricky, because there could be other\n// arguments passed either before or after the %c, so we need to\n// figure out the correct index to insert the CSS into\nvar index=0;var lastC=0;args[0].replace(/%[a-z%]/g,function(match){if('%%'===match)return;index++;if('%c'===match){// we only are interested in the *last* %c\n// (the user may have provided their own)\nlastC=index;}});args.splice(lastC,0,c);return args;}/**\n         * Invokes `console.log()` when available.\n         * No-op when `console.log` is not a \"function\".\n         *\n         * @api public\n         */function log(){// This hackery is required for IE8,\n// where the `console.log` function doesn't have 'apply'\nreturn'object'==(typeof console===\"undefined\"?\"undefined\":_typeof(console))&&'function'==typeof console.log&&Function.prototype.apply.call(console.log,console,arguments);}/**\n         * Save `namespaces`.\n         *\n         * @param {String} namespaces\n         * @api private\n         */function save(namespaces){try{if(null==namespaces){localStorage.removeItem('debug');}else{localStorage.debug=namespaces;}}catch(e){}}/**\n         * Load `namespaces`.\n         *\n         * @return {String} returns the previously persisted debug modes\n         * @api private\n         */function load(){var r;try{r=localStorage.debug;}catch(e){}return r;}/**\n         * Enable namespaces listed in `localStorage.debug` initially.\n         */exports.enable(load());},{\"./debug\":31}],31:[function(require,module,exports){/**\n         * This is the common logic for both the Node.js and web browser\n         * implementations of `debug()`.\n         *\n         * Expose `debug()` as the module.\n         */exports=module.exports=debug;exports.coerce=coerce;exports.disable=disable;exports.enable=enable;exports.enabled=enabled;exports.humanize=require('ms');/**\n         * The currently active debug mode names, and names to skip.\n         */exports.names=[];exports.skips=[];/**\n         * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n         *\n         * Valid key names are a single, lowercased letter, i.e. \"n\".\n         */exports.formatters={};/**\n         * Previously assigned color.\n         */var prevColor=0;/**\n         * Previous log timestamp.\n         */var prevTime;/**\n         * Select a color.\n         *\n         * @return {Number}\n         * @api private\n         */function selectColor(){return exports.colors[prevColor++%exports.colors.length];}/**\n         * Create a debugger with the given `namespace`.\n         *\n         * @param {String} namespace\n         * @return {Function}\n         * @api public\n         */function debug(namespace){// define the `disabled` version\nfunction disabled(){}disabled.enabled=false;// define the `enabled` version\nfunction enabled(){var self=enabled;// set `diff` timestamp\nvar curr=+new Date();var ms=curr-(prevTime||curr);self.diff=ms;self.prev=prevTime;self.curr=curr;prevTime=curr;// add the `color` if not set\nif(null==self.useColors)self.useColors=exports.useColors();if(null==self.color&&self.useColors)self.color=selectColor();var args=Array.prototype.slice.call(arguments);args[0]=exports.coerce(args[0]);if('string'!==typeof args[0]){// anything else let's inspect with %o\nargs=['%o'].concat(args);}// apply any `formatters` transformations\nvar index=0;args[0]=args[0].replace(/%([a-z%])/g,function(match,format){// if we encounter an escaped % then don't increase the array index\nif(match==='%%')return match;index++;var formatter=exports.formatters[format];if('function'===typeof formatter){var val=args[index];match=formatter.call(self,val);// now we need to remove `args[index]` since it's inlined in the `format`\nargs.splice(index,1);index--;}return match;});if('function'===typeof exports.formatArgs){args=exports.formatArgs.apply(self,args);}var logFn=enabled.log||exports.log||console.log.bind(console);logFn.apply(self,args);}enabled.enabled=true;var fn=exports.enabled(namespace)?enabled:disabled;fn.namespace=namespace;return fn;}/**\n         * Enables a debug mode by namespaces. This can include modes\n         * separated by a colon and wildcards.\n         *\n         * @param {String} namespaces\n         * @api public\n         */function enable(namespaces){exports.save(namespaces);var split=(namespaces||'').split(/[\\s,]+/);var len=split.length;for(var i=0;i<len;i++){if(!split[i])continue;// ignore empty strings\nnamespaces=split[i].replace(/\\*/g,'.*?');if(namespaces[0]==='-'){exports.skips.push(new RegExp('^'+namespaces.substr(1)+'$'));}else{exports.names.push(new RegExp('^'+namespaces+'$'));}}}/**\n         * Disable debug output.\n         *\n         * @api public\n         */function disable(){exports.enable('');}/**\n         * Returns true if the given mode name is enabled, false otherwise.\n         *\n         * @param {String} name\n         * @return {Boolean}\n         * @api public\n         */function enabled(name){var i,len;for(i=0,len=exports.skips.length;i<len;i++){if(exports.skips[i].test(name)){return false;}}for(i=0,len=exports.names.length;i<len;i++){if(exports.names[i].test(name)){return true;}}return false;}/**\n         * Coerce `val`.\n         *\n         * @param {Mixed} val\n         * @return {Mixed}\n         * @api private\n         */function coerce(val){if(val instanceof Error)return val.stack||val.message;return val;}},{\"ms\":47}],32:[function(require,module,exports){/**\n         * Parses an URI\n         *\n         * @author Steven Levithan <stevenlevithan.com> (MIT license)\n         * @api private\n         */var re=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;var parts=['source','protocol','authority','userInfo','user','password','host','port','relative','path','directory','file','query','anchor'];module.exports=function parseuri(str){var src=str,b=str.indexOf('['),e=str.indexOf(']');if(b!=-1&&e!=-1){str=str.substring(0,b)+str.substring(b,e).replace(/:/g,';')+str.substring(e,str.length);}var m=re.exec(str||''),uri={},i=14;while(i--){uri[parts[i]]=m[i]||'';}if(b!=-1&&e!=-1){uri.source=src;uri.host=uri.host.substring(1,uri.host.length-1).replace(/;/g,':');uri.authority=uri.authority.replace('[','').replace(']','').replace(/;/g,':');uri.ipv6uri=true;}return uri;};},{}],33:[function(require,module,exports){(function(global){/**\n             * Module dependencies.\n             */var keys=require('./keys');var hasBinary=require('has-binary');var sliceBuffer=require('arraybuffer.slice');var base64encoder=require('base64-arraybuffer');var after=require('after');var utf8=require('utf8');/**\n             * Check if we are running an android browser. That requires us to use\n             * ArrayBuffer with polling transports...\n             *\n             * http://ghinda.net/jpeg-blob-ajax-android/\n             */var isAndroid=navigator.userAgent.match(/Android/i);/**\n             * Check if we are running in PhantomJS.\n             * Uploading a Blob with PhantomJS does not work correctly, as reported here:\n             * https://github.com/ariya/phantomjs/issues/11395\n             * @type boolean\n             */var isPhantomJS=/PhantomJS/i.test(navigator.userAgent);/**\n             * When true, avoids using Blobs to encode payloads.\n             * @type boolean\n             */var dontSendBlobs=isAndroid||isPhantomJS;/**\n             * Current protocol version.\n             */exports.protocol=3;/**\n             * Packet types.\n             */var packets=exports.packets={open:0// non-ws\n,close:1// non-ws\n,ping:2,pong:3,message:4,upgrade:5,noop:6};var packetslist=keys(packets);/**\n             * Premade error packet.\n             */var err={type:'error',data:'parser error'};/**\n             * Create a blob api even for blob builder when vendor prefixes exist\n             */var Blob=require('blob');/**\n             * Encodes a packet.\n             *\n             *     <packet type id> [ <data> ]\n             *\n             * Example:\n             *\n             *     5hello world\n             *     3\n             *     4\n             *\n             * Binary is encoded in an identical principle\n             *\n             * @api private\n             */exports.encodePacket=function(packet,supportsBinary,utf8encode,callback){if('function'==typeof supportsBinary){callback=supportsBinary;supportsBinary=false;}if('function'==typeof utf8encode){callback=utf8encode;utf8encode=null;}var data=packet.data===undefined?undefined:packet.data.buffer||packet.data;if(global.ArrayBuffer&&data instanceof ArrayBuffer){return encodeArrayBuffer(packet,supportsBinary,callback);}else if(Blob&&data instanceof global.Blob){return encodeBlob(packet,supportsBinary,callback);}// might be an object with { base64: true, data: dataAsBase64String }\nif(data&&data.base64){return encodeBase64Object(packet,callback);}// Sending data as a utf-8 string\nvar encoded=packets[packet.type];// data fragment is optional\nif(undefined!==packet.data){encoded+=utf8encode?utf8.encode(String(packet.data)):String(packet.data);}return callback(''+encoded);};function encodeBase64Object(packet,callback){// packet data is an object { base64: true, data: dataAsBase64String }\nvar message='b'+exports.packets[packet.type]+packet.data.data;return callback(message);}/**\n             * Encode packet helpers for binary types\n             */function encodeArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback);}var data=packet.data;var contentArray=new Uint8Array(data);var resultBuffer=new Uint8Array(1+data.byteLength);resultBuffer[0]=packets[packet.type];for(var i=0;i<contentArray.length;i++){resultBuffer[i+1]=contentArray[i];}return callback(resultBuffer.buffer);}function encodeBlobAsArrayBuffer(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback);}var fr=new FileReader();fr.onload=function(){packet.data=fr.result;exports.encodePacket(packet,supportsBinary,true,callback);};return fr.readAsArrayBuffer(packet.data);}function encodeBlob(packet,supportsBinary,callback){if(!supportsBinary){return exports.encodeBase64Packet(packet,callback);}if(dontSendBlobs){return encodeBlobAsArrayBuffer(packet,supportsBinary,callback);}var length=new Uint8Array(1);length[0]=packets[packet.type];var blob=new Blob([length.buffer,packet.data]);return callback(blob);}/**\n             * Encodes a packet with binary data in a base64 string\n             *\n             * @param {Object} packet, has `type` and `data`\n             * @return {String} base64 encoded message\n             */exports.encodeBase64Packet=function(packet,callback){var message='b'+exports.packets[packet.type];if(Blob&&packet.data instanceof Blob){var fr=new FileReader();fr.onload=function(){var b64=fr.result.split(',')[1];callback(message+b64);};return fr.readAsDataURL(packet.data);}var b64data;try{b64data=String.fromCharCode.apply(null,new Uint8Array(packet.data));}catch(e){// iPhone Safari doesn't let you apply with typed arrays\nvar typed=new Uint8Array(packet.data);var basic=new Array(typed.length);for(var i=0;i<typed.length;i++){basic[i]=typed[i];}b64data=String.fromCharCode.apply(null,basic);}message+=global.btoa(b64data);return callback(message);};/**\n             * Decodes a packet. Changes format to Blob if requested.\n             *\n             * @return {Object} with `type` and `data` (if any)\n             * @api private\n             */exports.decodePacket=function(data,binaryType,utf8decode){// String data\nif(typeof data=='string'||data===undefined){if(data.charAt(0)=='b'){return exports.decodeBase64Packet(data.substr(1),binaryType);}if(utf8decode){try{data=utf8.decode(data);}catch(e){return err;}}var type=data.charAt(0);if(Number(type)!=type||!packetslist[type]){return err;}if(data.length>1){return{type:packetslist[type],data:data.substring(1)};}else{return{type:packetslist[type]};}}var asArray=new Uint8Array(data);var type=asArray[0];var rest=sliceBuffer(data,1);if(Blob&&binaryType==='blob'){rest=new Blob([rest]);}return{type:packetslist[type],data:rest};};/**\n             * Decodes a packet encoded in a base64 string\n             *\n             * @param {String} base64 encoded message\n             * @return {Object} with `type` and `data` (if any)\n             */exports.decodeBase64Packet=function(msg,binaryType){var type=packetslist[msg.charAt(0)];if(!global.ArrayBuffer){return{type:type,data:{base64:true,data:msg.substr(1)}};}var data=base64encoder.decode(msg.substr(1));if(binaryType==='blob'&&Blob){data=new Blob([data]);}return{type:type,data:data};};/**\n             * Encodes multiple messages (payload).\n             *\n             *     <length>:data\n             *\n             * Example:\n             *\n             *     11:hello world2:hi\n             *\n             * If any contents are binary, they will be encoded as base64 strings. Base64\n             * encoded strings are marked with a b before the length specifier\n             *\n             * @param {Array} packets\n             * @api private\n             */exports.encodePayload=function(packets,supportsBinary,callback){if(typeof supportsBinary=='function'){callback=supportsBinary;supportsBinary=null;}var isBinary=hasBinary(packets);if(supportsBinary&&isBinary){if(Blob&&!dontSendBlobs){return exports.encodePayloadAsBlob(packets,callback);}return exports.encodePayloadAsArrayBuffer(packets,callback);}if(!packets.length){return callback('0:');}function setLengthHeader(message){return message.length+':'+message;}function encodeOne(packet,doneCallback){exports.encodePacket(packet,!isBinary?false:supportsBinary,true,function(message){doneCallback(null,setLengthHeader(message));});}map(packets,encodeOne,function(err,results){return callback(results.join(''));});};/**\n             * Async array map using after\n             */function map(ary,each,done){var result=new Array(ary.length);var next=after(ary.length,done);var eachWithIndex=function eachWithIndex(i,el,cb){each(el,function(error,msg){result[i]=msg;cb(error,result);});};for(var i=0;i<ary.length;i++){eachWithIndex(i,ary[i],next);}}/*\n * Decodes data when a payload is maybe expected. Possible binary contents are\n * decoded from their base64 representation\n *\n * @param {String} data, callback method\n * @api public\n */exports.decodePayload=function(data,binaryType,callback){if(typeof data!='string'){return exports.decodePayloadAsBinary(data,binaryType,callback);}if(typeof binaryType==='function'){callback=binaryType;binaryType=null;}var packet;if(data==''){// parser error - ignoring payload\nreturn callback(err,0,1);}var length='',n,msg;for(var i=0,l=data.length;i<l;i++){var chr=data.charAt(i);if(':'!=chr){length+=chr;}else{if(''==length||length!=(n=Number(length))){// parser error - ignoring payload\nreturn callback(err,0,1);}msg=data.substr(i+1,n);if(length!=msg.length){// parser error - ignoring payload\nreturn callback(err,0,1);}if(msg.length){packet=exports.decodePacket(msg,binaryType,true);if(err.type==packet.type&&err.data==packet.data){// parser error in individual packet - ignoring payload\nreturn callback(err,0,1);}var ret=callback(packet,i+n,l);if(false===ret)return;}// advance cursor\ni+=n;length='';}}if(length!=''){// parser error - ignoring payload\nreturn callback(err,0,1);}};/**\n             * Encodes multiple messages (payload) as binary.\n             *\n             * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number\n             * 255><data>\n             *\n             * Example:\n             * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers\n             *\n             * @param {Array} packets\n             * @return {ArrayBuffer} encoded payload\n             * @api private\n             */exports.encodePayloadAsArrayBuffer=function(packets,callback){if(!packets.length){return callback(new ArrayBuffer(0));}function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(data){return doneCallback(null,data);});}map(packets,encodeOne,function(err,encodedPackets){var totalLength=encodedPackets.reduce(function(acc,p){var len;if(typeof p==='string'){len=p.length;}else{len=p.byteLength;}return acc+len.toString().length+len+2;// string/binary identifier + separator = 2\n},0);var resultArray=new Uint8Array(totalLength);var bufferIndex=0;encodedPackets.forEach(function(p){var isString=typeof p==='string';var ab=p;if(isString){var view=new Uint8Array(p.length);for(var i=0;i<p.length;i++){view[i]=p.charCodeAt(i);}ab=view.buffer;}if(isString){// not true binary\nresultArray[bufferIndex++]=0;}else{// true binary\nresultArray[bufferIndex++]=1;}var lenStr=ab.byteLength.toString();for(var i=0;i<lenStr.length;i++){resultArray[bufferIndex++]=parseInt(lenStr[i]);}resultArray[bufferIndex++]=255;var view=new Uint8Array(ab);for(var i=0;i<view.length;i++){resultArray[bufferIndex++]=view[i];}});return callback(resultArray.buffer);});};/**\n             * Encode as Blob\n             */exports.encodePayloadAsBlob=function(packets,callback){function encodeOne(packet,doneCallback){exports.encodePacket(packet,true,true,function(encoded){var binaryIdentifier=new Uint8Array(1);binaryIdentifier[0]=1;if(typeof encoded==='string'){var view=new Uint8Array(encoded.length);for(var i=0;i<encoded.length;i++){view[i]=encoded.charCodeAt(i);}encoded=view.buffer;binaryIdentifier[0]=0;}var len=encoded instanceof ArrayBuffer?encoded.byteLength:encoded.size;var lenStr=len.toString();var lengthAry=new Uint8Array(lenStr.length+1);for(var i=0;i<lenStr.length;i++){lengthAry[i]=parseInt(lenStr[i]);}lengthAry[lenStr.length]=255;if(Blob){var blob=new Blob([binaryIdentifier.buffer,lengthAry.buffer,encoded]);doneCallback(null,blob);}});}map(packets,encodeOne,function(err,results){return callback(new Blob(results));});};/*\n * Decodes data when a payload is maybe expected. Strings are decoded by\n * interpreting each byte as a key code for entries marked to start with 0. See\n * description of encodePayloadAsBinary\n *\n * @param {ArrayBuffer} data, callback method\n * @api public\n */exports.decodePayloadAsBinary=function(data,binaryType,callback){if(typeof binaryType==='function'){callback=binaryType;binaryType=null;}var bufferTail=data;var buffers=[];var numberTooLong=false;while(bufferTail.byteLength>0){var tailArray=new Uint8Array(bufferTail);var isString=tailArray[0]===0;var msgLength='';for(var i=1;;i++){if(tailArray[i]==255)break;if(msgLength.length>310){numberTooLong=true;break;}msgLength+=tailArray[i];}if(numberTooLong)return callback(err,0,1);bufferTail=sliceBuffer(bufferTail,2+msgLength.length);msgLength=parseInt(msgLength);var msg=sliceBuffer(bufferTail,0,msgLength);if(isString){try{msg=String.fromCharCode.apply(null,new Uint8Array(msg));}catch(e){// iPhone Safari doesn't let you apply to typed arrays\nvar typed=new Uint8Array(msg);msg='';for(var i=0;i<typed.length;i++){msg+=String.fromCharCode(typed[i]);}}}buffers.push(msg);bufferTail=sliceBuffer(bufferTail,msgLength);}var total=buffers.length;buffers.forEach(function(buffer,i){callback(exports.decodePacket(buffer,binaryType,true),i,total);});};}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./keys\":34,\"after\":1,\"arraybuffer.slice\":2,\"base64-arraybuffer\":14,\"blob\":15,\"has-binary\":39,\"utf8\":70}],34:[function(require,module,exports){/**\n         * Gets the keys for an object.\n         *\n         * @return {Array} keys\n         * @api private\n         */module.exports=Object.keys||function keys(obj){var arr=[];var has=Object.prototype.hasOwnProperty;for(var i in obj){if(has.call(obj,i)){arr.push(i);}}return arr;};},{}],35:[function(require,module,exports){var WildEmitter=require('wildemitter');var util=require('util');function Sender(opts){WildEmitter.call(this);var options=opts||{};this.config={chunksize:16384,pacing:0};// set our config from options\nvar item;for(item in options){this.config[item]=options[item];}this.file=null;this.channel=null;}util.inherits(Sender,WildEmitter);Sender.prototype.send=function(file,channel){var self=this;this.file=file;this.channel=channel;var usePoll=typeof channel.bufferedAmountLowThreshold!=='number';var offset=0;var sliceFile=function sliceFile(){var reader=new window.FileReader();reader.onload=function(){return function(e){self.channel.send(e.target.result);self.emit('progress',offset,file.size,e.target.result);if(file.size>offset+e.target.result.byteLength){if(usePoll){window.setTimeout(sliceFile,self.config.pacing);}else if(channel.bufferedAmount<=channel.bufferedAmountLowThreshold){window.setTimeout(sliceFile,0);}else{// wait for bufferedAmountLow to fire\n}}else{self.emit('progress',file.size,file.size,null);self.emit('sentFile');}offset=offset+self.config.chunksize;};}(file);var slice=file.slice(offset,offset+self.config.chunksize);reader.readAsArrayBuffer(slice);};if(!usePoll){channel.bufferedAmountLowThreshold=8*this.config.chunksize;channel.addEventListener('bufferedamountlow',sliceFile);}window.setTimeout(sliceFile,0);};function Receiver(){WildEmitter.call(this);this.receiveBuffer=[];this.received=0;this.metadata={};this.channel=null;}util.inherits(Receiver,WildEmitter);Receiver.prototype.receive=function(metadata,channel){var self=this;if(metadata){this.metadata=metadata;}this.channel=channel;// chrome only supports arraybuffers and those make it easier to calc the hash\nchannel.binaryType='arraybuffer';this.channel.onmessage=function(event){var len=event.data.byteLength;self.received+=len;self.receiveBuffer.push(event.data);self.emit('progress',self.received,self.metadata.size,event.data);if(self.received===self.metadata.size){self.emit('receivedFile',new window.Blob(self.receiveBuffer),self.metadata);self.receiveBuffer=[];// discard receivebuffer\n}else if(self.received>self.metadata.size){// FIXME\nconsole.error('received more than expected, discarding...');self.receiveBuffer=[];// just discard...\n}};};module.exports={};module.exports.support=typeof window!=='undefined'&&window&&window.File&&window.FileReader&&window.Blob;module.exports.Sender=Sender;module.exports.Receiver=Receiver;},{\"util\":73,\"wildemitter\":75}],36:[function(require,module,exports){// cache for constraints and callback\nvar cache={};module.exports=function(constraints,cb){var hasConstraints=arguments.length===2;var callback=hasConstraints?cb:constraints;var error;if(typeof window==='undefined'||window.location.protocol==='http:'){error=new Error('NavigatorUserMediaError');error.name='HTTPS_REQUIRED';return callback(error);}if(window.navigator.userAgent.match('Chrome')){var chromever=parseInt(window.navigator.userAgent.match(/Chrome\\/(.*) /)[1],10);var maxver=33;var isCef=!window.chrome.webstore;// \"known\" crash in chrome 34 and 35 on linux\nif(window.navigator.userAgent.match('Linux'))maxver=35;// check that the extension is installed by looking for a\n// sessionStorage variable that contains the extension id\n// this has to be set after installation unless the contest\n// script does that\nif(sessionStorage.getScreenMediaJSExtensionId){chrome.runtime.sendMessage(sessionStorage.getScreenMediaJSExtensionId,{type:'getScreen',id:1},null,function(data){if(!data||data.sourceId===''){// user canceled\nvar error=new Error('NavigatorUserMediaError');error.name='NotAllowedError';callback(error);}else{constraints=hasConstraints&&constraints||{audio:false,video:{mandatory:{chromeMediaSource:'desktop',maxWidth:window.screen.width,maxHeight:window.screen.height,maxFrameRate:3}}};constraints.video.mandatory.chromeMediaSourceId=data.sourceId;window.navigator.mediaDevices.getUserMedia(constraints).then(function(stream){callback(null,stream);}).catch(function(err){callback(err);});}});}else if(window.cefGetScreenMedia){//window.cefGetScreenMedia is experimental - may be removed without notice\nwindow.cefGetScreenMedia(function(sourceId){if(!sourceId){var error=new Error('cefGetScreenMediaError');error.name='CEF_GETSCREENMEDIA_CANCELED';callback(error);}else{constraints=hasConstraints&&constraints||{audio:false,video:{mandatory:{chromeMediaSource:'desktop',maxWidth:window.screen.width,maxHeight:window.screen.height,maxFrameRate:3},optional:[{googLeakyBucket:true},{googTemporalLayeredScreencast:true}]}};constraints.video.mandatory.chromeMediaSourceId=sourceId;window.navigator.mediaDevices.getUserMedia(constraints).then(function(stream){callback(null,stream);}).catch(function(err){callback(err);});}});}else if(isCef||chromever>=26&&chromever<=maxver){// chrome 26 - chrome 33 way to do it -- requires bad chrome://flags\n// note: this is basically in maintenance mode and will go away soon\nconstraints=hasConstraints&&constraints||{video:{mandatory:{googLeakyBucket:true,maxWidth:window.screen.width,maxHeight:window.screen.height,maxFrameRate:3,chromeMediaSource:'screen'}}};window.navigator.mediaDevices.getUserMedia(constraints).then(function(stream){callback(null,stream);}).catch(function(err){callback(err);});}else{// chrome 34+ way requiring an extension\nvar pending=window.setTimeout(function(){error=new Error('NavigatorUserMediaError');error.name='EXTENSION_UNAVAILABLE';return callback(error);},1000);cache[pending]=[callback,hasConstraints?constraints:null];window.postMessage({type:'getScreen',id:pending},'*');}}else if(window.navigator.userAgent.match('Firefox')){var ffver=parseInt(window.navigator.userAgent.match(/Firefox\\/(.*)/)[1],10);if(ffver>=33){constraints=hasConstraints&&constraints||{video:{mozMediaSource:'window',mediaSource:'window'}};window.navigator.mediaDevices.getUserMedia(constraints).then(function(stream){callback(null,stream);var lastTime=stream.currentTime;var polly=window.setInterval(function(){if(!stream)window.clearInterval(polly);if(stream.currentTime==lastTime){window.clearInterval(polly);if(stream.onended){stream.onended();}}lastTime=stream.currentTime;},500);}).catch(function(err){callback(err);});}else{error=new Error('NavigatorUserMediaError');error.name='EXTENSION_UNAVAILABLE';// does not make much sense but...\n}}};typeof window!=='undefined'&&window.addEventListener('message',function(event){if(event.origin!=window.location.origin){return;}if(event.data.type=='gotScreen'&&cache[event.data.id]){var data=cache[event.data.id];var constraints=data[1];var callback=data[0];delete cache[event.data.id];if(event.data.sourceId===''){// user canceled\nvar error=new Error('NavigatorUserMediaError');error.name='NotAllowedError';callback(error);}else{constraints=constraints||{audio:false,video:{mandatory:{chromeMediaSource:'desktop',maxWidth:window.screen.width,maxHeight:window.screen.height,maxFrameRate:3},optional:[{googLeakyBucket:true},{googTemporalLayeredScreencast:true}]}};constraints.video.mandatory.chromeMediaSourceId=event.data.sourceId;window.navigator.mediaDevices.getUserMedia(constraints).then(function(stream){callback(null,stream);}).catch(function(err){callback(err);});}}else if(event.data.type=='getScreenPending'){window.clearTimeout(event.data.id);}});},{}],37:[function(require,module,exports){/**\n         * Returns `this`. Execute this without a \"context\" (i.e. without it being\n         * attached to an object of the left-hand side), and `this` points to the\n         * \"global\" scope of the current JS execution.\n         */module.exports=function(){return this;}();},{}],38:[function(require,module,exports){var WildEmitter=require('wildemitter');function getMaxVolume(analyser,fftBins){var maxVolume=-Infinity;analyser.getFloatFrequencyData(fftBins);for(var i=4,ii=fftBins.length;i<ii;i++){if(fftBins[i]>maxVolume&&fftBins[i]<0){maxVolume=fftBins[i];}};return maxVolume;}var audioContextType;if(typeof window!=='undefined'){audioContextType=window.AudioContext||window.webkitAudioContext;}// use a single audio context due to hardware limits\nvar audioContext=null;module.exports=function(stream,options){var harker=new WildEmitter();// make it not break in non-supported browsers\nif(!audioContextType)return harker;//Config\nvar options=options||{},smoothing=options.smoothing||0.1,interval=options.interval||50,threshold=options.threshold,play=options.play,history=options.history||10,running=true;//Setup Audio Context\nif(!audioContext){audioContext=new audioContextType();}var sourceNode,fftBins,analyser;analyser=audioContext.createAnalyser();analyser.fftSize=512;analyser.smoothingTimeConstant=smoothing;fftBins=new Float32Array(analyser.frequencyBinCount);if(stream.jquery)stream=stream[0];if(stream instanceof HTMLAudioElement||stream instanceof HTMLVideoElement){//Audio Tag\nsourceNode=audioContext.createMediaElementSource(stream);if(typeof play==='undefined')play=true;threshold=threshold||-50;}else{//WebRTC Stream\nsourceNode=audioContext.createMediaStreamSource(stream);threshold=threshold||-50;}sourceNode.connect(analyser);if(play)analyser.connect(audioContext.destination);harker.speaking=false;harker.setThreshold=function(t){threshold=t;};harker.setInterval=function(i){interval=i;};harker.stop=function(){running=false;harker.emit('volume_change',-100,threshold);if(harker.speaking){harker.speaking=false;harker.emit('stopped_speaking');}analyser.disconnect();sourceNode.disconnect();};harker.speakingHistory=[];for(var i=0;i<history;i++){harker.speakingHistory.push(0);}// Poll the analyser node to determine if speaking\n// and emit events if changed\nvar looper=function looper(){setTimeout(function(){//check if stop has been called\nif(!running){return;}var currentVolume=getMaxVolume(analyser,fftBins);harker.emit('volume_change',currentVolume,threshold);var history=0;if(currentVolume>threshold&&!harker.speaking){// trigger quickly, short history\nfor(var i=harker.speakingHistory.length-3;i<harker.speakingHistory.length;i++){history+=harker.speakingHistory[i];}if(history>=2){harker.speaking=true;harker.emit('speaking');}}else if(currentVolume<threshold&&harker.speaking){for(var i=0;i<harker.speakingHistory.length;i++){history+=harker.speakingHistory[i];}if(history==0){harker.speaking=false;harker.emit('stopped_speaking');}}harker.speakingHistory.shift();harker.speakingHistory.push(0+(currentVolume>threshold));looper();},interval);};looper();return harker;};},{\"wildemitter\":75}],39:[function(require,module,exports){(function(global){/*\n * Module requirements.\n */var isArray=require('isarray');/**\n             * Module exports.\n             */module.exports=hasBinary;/**\n             * Checks for binary data.\n             *\n             * Right now only Buffer and ArrayBuffer are supported..\n             *\n             * @param {Object} anything\n             * @api public\n             */function hasBinary(data){function _hasBinary(obj){if(!obj)return false;if(global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer||global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){return true;}if(isArray(obj)){for(var i=0;i<obj.length;i++){if(_hasBinary(obj[i])){return true;}}}else if(obj&&'object'==(typeof obj===\"undefined\"?\"undefined\":_typeof(obj))){if(obj.toJSON){obj=obj.toJSON();}for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)&&_hasBinary(obj[key])){return true;}}}return false;}return _hasBinary(data);}}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"isarray\":42}],40:[function(require,module,exports){/**\n         * Module dependencies.\n         */var global=require('global');/**\n         * Module exports.\n         *\n         * Logic borrowed from Modernizr:\n         *\n         *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js\n         */try{module.exports='XMLHttpRequest'in global&&'withCredentials'in new global.XMLHttpRequest();}catch(err){// if XMLHttp support is disabled in IE then it will throw\n// when trying to create\nmodule.exports=false;}},{\"global\":37}],41:[function(require,module,exports){var indexOf=[].indexOf;module.exports=function(arr,obj){if(indexOf)return arr.indexOf(obj);for(var i=0;i<arr.length;++i){if(arr[i]===obj)return i;}return-1;};},{}],42:[function(require,module,exports){module.exports=Array.isArray||function(arr){return Object.prototype.toString.call(arr)=='[object Array]';};},{}],43:[function(require,module,exports){/*! JSON v3.2.6 | http://bestiejs.github.io/json3 | Copyright 2012-2013, Kit Cambridge | http://kit.mit-license.org */;(function(window){// Convenience aliases.\nvar getClass={}.toString,_isProperty,_forEach,undef;// Detect the `define` function exposed by asynchronous module loaders. The\n// strict `define` check is necessary for compatibility with `r.js`.\nvar isLoader=typeof define===\"function\"&&define.amd;// Detect native implementations.\nvar nativeJSON=(typeof JSON===\"undefined\"?\"undefined\":_typeof(JSON))==\"object\"&&JSON;// Set up the JSON 3 namespace, preferring the CommonJS `exports` object if\n// available.\nvar JSON3=(typeof exports===\"undefined\"?\"undefined\":_typeof(exports))==\"object\"&&exports&&!exports.nodeType&&exports;if(JSON3&&nativeJSON){// Explicitly delegate to the native `stringify` and `parse`\n// implementations in CommonJS environments.\nJSON3.stringify=nativeJSON.stringify;JSON3.parse=nativeJSON.parse;}else{// Export for web browsers, JavaScript engines, and asynchronous module\n// loaders, using the global `JSON` object if available.\nJSON3=window.JSON=nativeJSON||{};}// Test the `Date#getUTC*` methods. Based on work by @Yaffle.\nvar isExtended=new Date(-3509827334573292);try{// The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical\n// results for certain dates in Opera >= 10.53.\nisExtended=isExtended.getUTCFullYear()==-109252&&isExtended.getUTCMonth()===0&&isExtended.getUTCDate()===1&&// Safari < 2.0.2 stores the internal millisecond time value correctly,\n// but clips the values returned by the date methods to the range of\n// signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).\nisExtended.getUTCHours()==10&&isExtended.getUTCMinutes()==37&&isExtended.getUTCSeconds()==6&&isExtended.getUTCMilliseconds()==708;}catch(exception){}// Internal: Determines whether the native `JSON.stringify` and `parse`\n// implementations are spec-compliant. Based on work by Ken Snyder.\nfunction has(name){if(has[name]!==undef){// Return cached feature test result.\nreturn has[name];}var isSupported;if(name==\"bug-string-char-index\"){// IE <= 7 doesn't support accessing string characters using square\n// bracket notation. IE 8 only supports this for primitives.\nisSupported=\"a\"[0]!=\"a\";}else if(name==\"json\"){// Indicates whether both `JSON.stringify` and `JSON.parse` are\n// supported.\nisSupported=has(\"json-stringify\")&&has(\"json-parse\");}else{var value,serialized=\"{\\\"a\\\":[1,true,false,null,\\\"\\\\u0000\\\\b\\\\n\\\\f\\\\r\\\\t\\\"]}\";// Test `JSON.stringify`.\nif(name==\"json-stringify\"){var stringify=JSON3.stringify,stringifySupported=typeof stringify==\"function\"&&isExtended;if(stringifySupported){// A test function object with a custom `toJSON` method.\n(value=function value(){return 1;}).toJSON=value;try{stringifySupported=// Firefox 3.1b1 and b2 serialize string, number, and boolean\n// primitives as object literals.\nstringify(0)===\"0\"&&// FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object\n// literals.\nstringify(new Number())===\"0\"&&stringify(new String())=='\"\"'&&// FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or\n// does not define a canonical JSON representation (this applies to\n// objects with `toJSON` properties as well, *unless* they are nested\n// within an object or array).\nstringify(getClass)===undef&&// IE 8 serializes `undefined` as `\"undefined\"`. Safari <= 5.1.7 and\n// FF 3.1b3 pass this test.\nstringify(undef)===undef&&// Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,\n// respectively, if the value is omitted entirely.\nstringify()===undef&&// FF 3.1b1, 2 throw an error if the given value is not a number,\n// string, array, object, Boolean, or `null` literal. This applies to\n// objects with custom `toJSON` methods as well, unless they are nested\n// inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`\n// methods entirely.\nstringify(value)===\"1\"&&stringify([value])==\"[1]\"&&// Prototype <= 1.6.1 serializes `[undefined]` as `\"[]\"` instead of\n// `\"[null]\"`.\nstringify([undef])==\"[null]\"&&// YUI 3.0.0b1 fails to serialize `null` literals.\nstringify(null)==\"null\"&&// FF 3.1b1, 2 halts serialization if an array contains a function:\n// `[1, true, getClass, 1]` serializes as \"[1,true,],\". FF 3.1b3\n// elides non-JSON values from objects and arrays, unless they\n// define custom `toJSON` methods.\nstringify([undef,getClass,null])==\"[null,null,null]\"&&// Simple serialization test. FF 3.1b1 uses Unicode escape sequences\n// where character escape codes are expected (e.g., `\\b` => `\\u0008`).\nstringify({\"a\":[value,true,false,null,\"\\x00\\b\\n\\f\\r\\t\"]})==serialized&&// FF 3.1b1 and b2 ignore the `filter` and `width` arguments.\nstringify(null,value)===\"1\"&&stringify([1,2],null,1)==\"[\\n 1,\\n 2\\n]\"&&// JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly\n// serialize extended years.\nstringify(new Date(-8.64e15))=='\"-271821-04-20T00:00:00.000Z\"'&&// The milliseconds are optional in ES 5, but required in 5.1.\nstringify(new Date(8.64e15))=='\"+275760-09-13T00:00:00.000Z\"'&&// Firefox <= 11.0 incorrectly serializes years prior to 0 as negative\n// four-digit years instead of six-digit years. Credits: @Yaffle.\nstringify(new Date(-621987552e5))=='\"-000001-01-01T00:00:00.000Z\"'&&// Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond\n// values less than 1000. Credits: @Yaffle.\nstringify(new Date(-1))=='\"1969-12-31T23:59:59.999Z\"';}catch(exception){stringifySupported=false;}}isSupported=stringifySupported;}// Test `JSON.parse`.\nif(name==\"json-parse\"){var parse=JSON3.parse;if(typeof parse==\"function\"){try{// FF 3.1b1, b2 will throw an exception if a bare literal is provided.\n// Conforming implementations should also coerce the initial argument to\n// a string prior to parsing.\nif(parse(\"0\")===0&&!parse(false)){// Simple parsing test.\nvalue=parse(serialized);var parseSupported=value[\"a\"].length==5&&value[\"a\"][0]===1;if(parseSupported){try{// Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.\nparseSupported=!parse('\"\\t\"');}catch(exception){}if(parseSupported){try{// FF 4.0 and 4.0.1 allow leading `+` signs and leading\n// decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow\n// certain octal literals.\nparseSupported=parse(\"01\")!==1;}catch(exception){}}if(parseSupported){try{// FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal\n// points. These environments, along with FF 3.1b1 and 2,\n// also allow trailing commas in JSON objects and arrays.\nparseSupported=parse(\"1.\")!==1;}catch(exception){}}}}}catch(exception){parseSupported=false;}}isSupported=parseSupported;}}return has[name]=!!isSupported;}if(!has(\"json\")){// Common `[[Class]]` name aliases.\nvar functionClass=\"[object Function]\";var dateClass=\"[object Date]\";var numberClass=\"[object Number]\";var stringClass=\"[object String]\";var arrayClass=\"[object Array]\";var booleanClass=\"[object Boolean]\";// Detect incomplete support for accessing string characters by index.\nvar charIndexBuggy=has(\"bug-string-char-index\");// Define additional utility methods if the `Date` methods are buggy.\nif(!isExtended){var floor=Math.floor;// A mapping between the months of the year and the number of days between\n// January 1st and the first of the respective month.\nvar Months=[0,31,59,90,120,151,181,212,243,273,304,334];// Internal: Calculates the number of days between the Unix epoch and the\n// first day of the given month.\nvar getDay=function getDay(year,month){return Months[month]+365*(year-1970)+floor((year-1969+(month=+(month>1)))/4)-floor((year-1901+month)/100)+floor((year-1601+month)/400);};}// Internal: Determines if a property is a direct property of the given\n// object. Delegates to the native `Object#hasOwnProperty` method.\nif(!(_isProperty={}.hasOwnProperty)){_isProperty=function isProperty(property){var members={},constructor;if((members.__proto__=null,members.__proto__={// The *proto* property cannot be set multiple times in recent\n// versions of Firefox and SeaMonkey.\n\"toString\":1},members).toString!=getClass){// Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but\n// supports the mutable *proto* property.\n_isProperty=function isProperty(property){// Capture and break the object's prototype chain (see section 8.6.2\n// of the ES 5.1 spec). The parenthesized expression prevents an\n// unsafe transformation by the Closure Compiler.\nvar original=this.__proto__,result=property in(this.__proto__=null,this);// Restore the original prototype chain.\nthis.__proto__=original;return result;};}else{// Capture a reference to the top-level `Object` constructor.\nconstructor=members.constructor;// Use the `constructor` property to simulate `Object#hasOwnProperty` in\n// other environments.\n_isProperty=function isProperty(property){var parent=(this.constructor||constructor).prototype;return property in this&&!(property in parent&&this[property]===parent[property]);};}members=null;return _isProperty.call(this,property);};}// Internal: A set of primitive types used by `isHostType`.\nvar PrimitiveTypes={'boolean':1,'number':1,'string':1,'undefined':1};// Internal: Determines if the given object `property` value is a\n// non-primitive.\nvar isHostType=function isHostType(object,property){var type=_typeof(object[property]);return type=='object'?!!object[property]:!PrimitiveTypes[type];};// Internal: Normalizes the `for...in` iteration algorithm across\n// environments. Each enumerated key is yielded to a `callback` function.\n_forEach=function forEach(object,callback){var size=0,Properties,members,property;// Tests for bugs in the current environment's `for...in` algorithm. The\n// `valueOf` property inherits the non-enumerable flag from\n// `Object.prototype` in older versions of IE, Netscape, and Mozilla.\n(Properties=function Properties(){this.valueOf=0;}).prototype.valueOf=0;// Iterate over a new instance of the `Properties` class.\nmembers=new Properties();for(property in members){// Ignore all properties inherited from `Object.prototype`.\nif(_isProperty.call(members,property)){size++;}}Properties=members=null;// Normalize the iteration algorithm.\nif(!size){// A list of non-enumerable properties inherited from `Object.prototype`.\nmembers=[\"valueOf\",\"toString\",\"toLocaleString\",\"propertyIsEnumerable\",\"isPrototypeOf\",\"hasOwnProperty\",\"constructor\"];// IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable\n// properties.\n_forEach=function forEach(object,callback){var isFunction=getClass.call(object)==functionClass,property,length;var hasProperty=!isFunction&&typeof object.constructor!='function'&&isHostType(object,'hasOwnProperty')?object.hasOwnProperty:_isProperty;for(property in object){// Gecko <= 1.0 enumerates the `prototype` property of functions under\n// certain conditions; IE does not.\nif(!(isFunction&&property==\"prototype\")&&hasProperty.call(object,property)){callback(property);}}// Manually invoke the callback for each non-enumerable property.\nfor(length=members.length;property=members[--length];hasProperty.call(object,property)&&callback(property)){}};}else if(size==2){// Safari <= 2.0.4 enumerates shadowed properties twice.\n_forEach=function forEach(object,callback){// Create a set of iterated properties.\nvar members={},isFunction=getClass.call(object)==functionClass,property;for(property in object){// Store each property name to prevent double enumeration. The\n// `prototype` property of functions is not enumerated due to cross-\n// environment inconsistencies.\nif(!(isFunction&&property==\"prototype\")&&!_isProperty.call(members,property)&&(members[property]=1)&&_isProperty.call(object,property)){callback(property);}}};}else{// No bugs detected; use the standard `for...in` algorithm.\n_forEach=function forEach(object,callback){var isFunction=getClass.call(object)==functionClass,property,isConstructor;for(property in object){if(!(isFunction&&property==\"prototype\")&&_isProperty.call(object,property)&&!(isConstructor=property===\"constructor\")){callback(property);}}// Manually invoke the callback for the `constructor` property due to\n// cross-environment inconsistencies.\nif(isConstructor||_isProperty.call(object,property=\"constructor\")){callback(property);}};}return _forEach(object,callback);};// Public: Serializes a JavaScript `value` as a JSON string. The optional\n// `filter` argument may specify either a function that alters how object and\n// array members are serialized, or an array of strings and numbers that\n// indicates which properties should be serialized. The optional `width`\n// argument may be either a string or number that specifies the indentation\n// level of the output.\nif(!has(\"json-stringify\")){// Internal: A map of control characters and their escaped equivalents.\nvar Escapes={92:\"\\\\\\\\\",34:'\\\\\"',8:\"\\\\b\",12:\"\\\\f\",10:\"\\\\n\",13:\"\\\\r\",9:\"\\\\t\"};// Internal: Converts `value` into a zero-padded string such that its\n// length is at least equal to `width`. The `width` must be <= 6.\nvar leadingZeroes=\"000000\";var toPaddedString=function toPaddedString(width,value){// The `|| 0` expression is necessary to work around a bug in\n// Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== \"0\"`.\nreturn(leadingZeroes+(value||0)).slice(-width);};// Internal: Double-quotes a string `value`, replacing all ASCII control\n// characters (characters with code unit values between 0 and 31) with\n// their escaped equivalents. This is an implementation of the\n// `Quote(value)` operation defined in ES 5.1 section 15.12.3.\nvar unicodePrefix=\"\\\\u00\";var quote=function quote(value){var result='\"',index=0,length=value.length,isLarge=length>10&&charIndexBuggy,symbols;if(isLarge){symbols=value.split(\"\");}for(;index<length;index++){var charCode=value.charCodeAt(index);// If the character is a control character, append its Unicode or\n// shorthand escape sequence; otherwise, append the character as-is.\nswitch(charCode){case 8:case 9:case 10:case 12:case 13:case 34:case 92:result+=Escapes[charCode];break;default:if(charCode<32){result+=unicodePrefix+toPaddedString(2,charCode.toString(16));break;}result+=isLarge?symbols[index]:charIndexBuggy?value.charAt(index):value[index];}}return result+'\"';};// Internal: Recursively serializes an object. Implements the\n// `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.\nvar serialize=function serialize(property,object,callback,properties,whitespace,indentation,stack){var value,className,year,month,date,time,hours,minutes,seconds,milliseconds,results,element,index,length,prefix,result;try{// Necessary for host object support.\nvalue=object[property];}catch(exception){}if((typeof value===\"undefined\"?\"undefined\":_typeof(value))==\"object\"&&value){className=getClass.call(value);if(className==dateClass&&!_isProperty.call(value,\"toJSON\")){if(value>-1/0&&value<1/0){// Dates are serialized according to the `Date#toJSON` method\n// specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15\n// for the ISO 8601 date time string format.\nif(getDay){// Manually compute the year, month, date, hours, minutes,\n// seconds, and milliseconds if the `getUTC*` methods are\n// buggy. Adapted from @Yaffle's `date-shim` project.\ndate=floor(value/864e5);for(year=floor(date/365.2425)+1970-1;getDay(year+1,0)<=date;year++){}for(month=floor((date-getDay(year,0))/30.42);getDay(year,month+1)<=date;month++){}date=1+date-getDay(year,month);// The `time` value specifies the time within the day (see ES\n// 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used\n// to compute `A modulo B`, as the `%` operator does not\n// correspond to the `modulo` operation for negative numbers.\ntime=(value%864e5+864e5)%864e5;// The hours, minutes, seconds, and milliseconds are obtained by\n// decomposing the time within the day. See section 15.9.1.10.\nhours=floor(time/36e5)%24;minutes=floor(time/6e4)%60;seconds=floor(time/1e3)%60;milliseconds=time%1e3;}else{year=value.getUTCFullYear();month=value.getUTCMonth();date=value.getUTCDate();hours=value.getUTCHours();minutes=value.getUTCMinutes();seconds=value.getUTCSeconds();milliseconds=value.getUTCMilliseconds();}// Serialize extended years correctly.\nvalue=(year<=0||year>=1e4?(year<0?\"-\":\"+\")+toPaddedString(6,year<0?-year:year):toPaddedString(4,year))+\"-\"+toPaddedString(2,month+1)+\"-\"+toPaddedString(2,date)+// Months, dates, hours, minutes, and seconds should have two\n// digits; milliseconds should have three.\n\"T\"+toPaddedString(2,hours)+\":\"+toPaddedString(2,minutes)+\":\"+toPaddedString(2,seconds)+// Milliseconds are optional in ES 5.0, but required in 5.1.\n\".\"+toPaddedString(3,milliseconds)+\"Z\";}else{value=null;}}else if(typeof value.toJSON==\"function\"&&(className!=numberClass&&className!=stringClass&&className!=arrayClass||_isProperty.call(value,\"toJSON\"))){// Prototype <= 1.6.1 adds non-standard `toJSON` methods to the\n// `Number`, `String`, `Date`, and `Array` prototypes. JSON 3\n// ignores all `toJSON` methods on these objects unless they are\n// defined directly on an instance.\nvalue=value.toJSON(property);}}if(callback){// If a replacement function was provided, call it to obtain the value\n// for serialization.\nvalue=callback.call(object,property,value);}if(value===null){return\"null\";}className=getClass.call(value);if(className==booleanClass){// Booleans are represented literally.\nreturn\"\"+value;}else if(className==numberClass){// JSON numbers must be finite. `Infinity` and `NaN` are serialized as\n// `\"null\"`.\nreturn value>-1/0&&value<1/0?\"\"+value:\"null\";}else if(className==stringClass){// Strings are double-quoted and escaped.\nreturn quote(\"\"+value);}// Recursively serialize objects and arrays.\nif((typeof value===\"undefined\"?\"undefined\":_typeof(value))==\"object\"){// Check for cyclic structures. This is a linear search; performance\n// is inversely proportional to the number of unique nested objects.\nfor(length=stack.length;length--;){if(stack[length]===value){// Cyclic structures cannot be serialized by `JSON.stringify`.\nthrow TypeError();}}// Add the object to the stack of traversed objects.\nstack.push(value);results=[];// Save the current indentation level and indent one additional level.\nprefix=indentation;indentation+=whitespace;if(className==arrayClass){// Recursively serialize array elements.\nfor(index=0,length=value.length;index<length;index++){element=serialize(index,value,callback,properties,whitespace,indentation,stack);results.push(element===undef?\"null\":element);}result=results.length?whitespace?\"[\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"]\":\"[\"+results.join(\",\")+\"]\":\"[]\";}else{// Recursively serialize object members. Members are selected from\n// either a user-specified list of property names, or the object\n// itself.\n_forEach(properties||value,function(property){var element=serialize(property,value,callback,properties,whitespace,indentation,stack);if(element!==undef){// According to ES 5.1 section 15.12.3: \"If `gap` {whitespace}\n// is not the empty string, let `member` {quote(property) + \":\"}\n// be the concatenation of `member` and the `space` character.\"\n// The \"`space` character\" refers to the literal space\n// character, not the `space` {width} argument provided to\n// `JSON.stringify`.\nresults.push(quote(property)+\":\"+(whitespace?\" \":\"\")+element);}});result=results.length?whitespace?\"{\\n\"+indentation+results.join(\",\\n\"+indentation)+\"\\n\"+prefix+\"}\":\"{\"+results.join(\",\")+\"}\":\"{}\";}// Remove the object from the traversed object stack.\nstack.pop();return result;}};// Public: `JSON.stringify`. See ES 5.1 section 15.12.3.\nJSON3.stringify=function(source,filter,width){var whitespace,callback,properties,className;if(typeof filter==\"function\"||(typeof filter===\"undefined\"?\"undefined\":_typeof(filter))==\"object\"&&filter){if((className=getClass.call(filter))==functionClass){callback=filter;}else if(className==arrayClass){// Convert the property names array into a makeshift set.\nproperties={};for(var index=0,length=filter.length,value;index<length;value=filter[index++],(className=getClass.call(value),className==stringClass||className==numberClass)&&(properties[value]=1)){}}}if(width){if((className=getClass.call(width))==numberClass){// Convert the `width` to an integer and create a string containing\n// `width` number of space characters.\nif((width-=width%1)>0){for(whitespace=\"\",width>10&&(width=10);whitespace.length<width;whitespace+=\" \"){}}}else if(className==stringClass){whitespace=width.length<=10?width:width.slice(0,10);}}// Opera <= 7.54u2 discards the values associated with empty string keys\n// (`\"\"`) only if they are used directly within an object member list\n// (e.g., `!(\"\" in { \"\": 1})`).\nreturn serialize(\"\",(value={},value[\"\"]=source,value),callback,properties,whitespace,\"\",[]);};}// Public: Parses a JSON source string.\nif(!has(\"json-parse\")){var fromCharCode=String.fromCharCode;// Internal: A map of escaped control characters and their unescaped\n// equivalents.\nvar Unescapes={92:\"\\\\\",34:'\"',47:\"/\",98:\"\\b\",116:\"\\t\",110:\"\\n\",102:\"\\f\",114:\"\\r\"};// Internal: Stores the parser state.\nvar Index,Source;// Internal: Resets the parser state and throws a `SyntaxError`.\nvar abort=function abort(){Index=Source=null;throw SyntaxError();};// Internal: Returns the next token, or `\"$\"` if the parser has reached\n// the end of the source string. A token may be a string, number, `null`\n// literal, or Boolean literal.\nvar lex=function lex(){var source=Source,length=source.length,value,begin,position,isSigned,charCode;while(Index<length){charCode=source.charCodeAt(Index);switch(charCode){case 9:case 10:case 13:case 32:// Skip whitespace tokens, including tabs, carriage returns, line\n// feeds, and space characters.\nIndex++;break;case 123:case 125:case 91:case 93:case 58:case 44:// Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at\n// the current position.\nvalue=charIndexBuggy?source.charAt(Index):source[Index];Index++;return value;case 34:// `\"` delimits a JSON string; advance to the next character and\n// begin parsing the string. String tokens are prefixed with the\n// sentinel `@` character to distinguish them from punctuators and\n// end-of-string tokens.\nfor(value=\"@\",Index++;Index<length;){charCode=source.charCodeAt(Index);if(charCode<32){// Unescaped ASCII control characters (those with a code unit\n// less than the space character) are not permitted.\nabort();}else if(charCode==92){// A reverse solidus (`\\`) marks the beginning of an escaped\n// control character (including `\"`, `\\`, and `/`) or Unicode\n// escape sequence.\ncharCode=source.charCodeAt(++Index);switch(charCode){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:// Revive escaped control characters.\nvalue+=Unescapes[charCode];Index++;break;case 117:// `\\u` marks the beginning of a Unicode escape sequence.\n// Advance to the first character and validate the\n// four-digit code point.\nbegin=++Index;for(position=Index+4;Index<position;Index++){charCode=source.charCodeAt(Index);// A valid sequence comprises four hexdigits (case-\n// insensitive) that form a single hexadecimal value.\nif(!(charCode>=48&&charCode<=57||charCode>=97&&charCode<=102||charCode>=65&&charCode<=70)){// Invalid Unicode escape sequence.\nabort();}}// Revive the escaped character.\nvalue+=fromCharCode(\"0x\"+source.slice(begin,Index));break;default:// Invalid escape sequence.\nabort();}}else{if(charCode==34){// An unescaped double-quote character marks the end of the\n// string.\nbreak;}charCode=source.charCodeAt(Index);begin=Index;// Optimize for the common case where a string is valid.\nwhile(charCode>=32&&charCode!=92&&charCode!=34){charCode=source.charCodeAt(++Index);}// Append the string as-is.\nvalue+=source.slice(begin,Index);}}if(source.charCodeAt(Index)==34){// Advance to the next character and return the revived string.\nIndex++;return value;}// Unterminated string.\nabort();default:// Parse numbers and literals.\nbegin=Index;// Advance past the negative sign, if one is specified.\nif(charCode==45){isSigned=true;charCode=source.charCodeAt(++Index);}// Parse an integer or floating-point value.\nif(charCode>=48&&charCode<=57){// Leading zeroes are interpreted as octal literals.\nif(charCode==48&&(charCode=source.charCodeAt(Index+1),charCode>=48&&charCode<=57)){// Illegal octal literal.\nabort();}isSigned=false;// Parse the integer component.\nfor(;Index<length&&(charCode=source.charCodeAt(Index),charCode>=48&&charCode<=57);Index++){}// Floats cannot contain a leading decimal point; however, this\n// case is already accounted for by the parser.\nif(source.charCodeAt(Index)==46){position=++Index;// Parse the decimal component.\nfor(;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++){}if(position==Index){// Illegal trailing decimal.\nabort();}Index=position;}// Parse exponents. The `e` denoting the exponent is\n// case-insensitive.\ncharCode=source.charCodeAt(Index);if(charCode==101||charCode==69){charCode=source.charCodeAt(++Index);// Skip past the sign following the exponent, if one is\n// specified.\nif(charCode==43||charCode==45){Index++;}// Parse the exponential component.\nfor(position=Index;position<length&&(charCode=source.charCodeAt(position),charCode>=48&&charCode<=57);position++){}if(position==Index){// Illegal empty exponent.\nabort();}Index=position;}// Coerce the parsed value to a JavaScript number.\nreturn+source.slice(begin,Index);}// A negative sign may only precede numbers.\nif(isSigned){abort();}// `true`, `false`, and `null` literals.\nif(source.slice(Index,Index+4)==\"true\"){Index+=4;return true;}else if(source.slice(Index,Index+5)==\"false\"){Index+=5;return false;}else if(source.slice(Index,Index+4)==\"null\"){Index+=4;return null;}// Unrecognized token.\nabort();}}// Return the sentinel `$` character if the parser has reached the end\n// of the source string.\nreturn\"$\";};// Internal: Parses a JSON `value` token.\nvar get=function get(value){var results,hasMembers;if(value==\"$\"){// Unexpected end of input.\nabort();}if(typeof value==\"string\"){if((charIndexBuggy?value.charAt(0):value[0])==\"@\"){// Remove the sentinel `@` character.\nreturn value.slice(1);}// Parse object and array literals.\nif(value==\"[\"){// Parses a JSON array, returning a new JavaScript array.\nresults=[];for(;;hasMembers||(hasMembers=true)){value=lex();// A closing square bracket marks the end of the array literal.\nif(value==\"]\"){break;}// If the array literal contains elements, the current token\n// should be a comma separating the previous element from the\n// next.\nif(hasMembers){if(value==\",\"){value=lex();if(value==\"]\"){// Unexpected trailing `,` in array literal.\nabort();}}else{// A `,` must separate each array element.\nabort();}}// Elisions and leading commas are not permitted.\nif(value==\",\"){abort();}results.push(get(value));}return results;}else if(value==\"{\"){// Parses a JSON object, returning a new JavaScript object.\nresults={};for(;;hasMembers||(hasMembers=true)){value=lex();// A closing curly brace marks the end of the object literal.\nif(value==\"}\"){break;}// If the object literal contains members, the current token\n// should be a comma separator.\nif(hasMembers){if(value==\",\"){value=lex();if(value==\"}\"){// Unexpected trailing `,` in object literal.\nabort();}}else{// A `,` must separate each object member.\nabort();}}// Leading commas are not permitted, object property names must be\n// double-quoted strings, and a `:` must separate each property\n// name and value.\nif(value==\",\"||typeof value!=\"string\"||(charIndexBuggy?value.charAt(0):value[0])!=\"@\"||lex()!=\":\"){abort();}results[value.slice(1)]=get(lex());}return results;}// Unexpected token encountered.\nabort();}return value;};// Internal: Updates a traversed object member.\nvar update=function update(source,property,callback){var element=walk(source,property,callback);if(element===undef){delete source[property];}else{source[property]=element;}};// Internal: Recursively traverses a parsed JSON object, invoking the\n// `callback` function for each value. This is an implementation of the\n// `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.\nvar walk=function walk(source,property,callback){var value=source[property],length;if((typeof value===\"undefined\"?\"undefined\":_typeof(value))==\"object\"&&value){// `forEach` can't be used to traverse an array in Opera <= 8.54\n// because its `Object#hasOwnProperty` implementation returns `false`\n// for array indices (e.g., `![1, 2, 3].hasOwnProperty(\"0\")`).\nif(getClass.call(value)==arrayClass){for(length=value.length;length--;){update(value,length,callback);}}else{_forEach(value,function(property){update(value,property,callback);});}}return callback.call(source,property,value);};// Public: `JSON.parse`. See ES 5.1 section 15.12.2.\nJSON3.parse=function(source,callback){var result,value;Index=0;Source=\"\"+source;result=get(lex());// If a JSON string contains multiple tokens, it is invalid.\nif(lex()!=\"$\"){abort();}// Reset the parser state.\nIndex=Source=null;return callback&&getClass.call(callback)==functionClass?walk((value={},value[\"\"]=result,value),\"\",callback):result;};}}// Export for asynchronous module loaders.\nif(isLoader){define(function(){return JSON3;});}})(this);},{}],44:[function(require,module,exports){var util=require('util');var hark=require('hark');var getScreenMedia=require('getscreenmedia');var WildEmitter=require('wildemitter');var mockconsole=require('mockconsole');function isAllTracksEnded(stream){var isAllTracksEnded=true;stream.getTracks().forEach(function(t){isAllTracksEnded=t.readyState==='ended'&&isAllTracksEnded;});return isAllTracksEnded;}function shouldWorkAroundFirefoxStopStream(){if(typeof window==='undefined'){return false;}if(!window.navigator.mozGetUserMedia){return false;}var match=window.navigator.userAgent.match(/Firefox\\/(\\d+)\\./);var version=match&&match.length>=1&&parseInt(match[1],10);return version<50;}function LocalMedia(opts){WildEmitter.call(this);var config=this.config={detectSpeakingEvents:false,audioFallback:false,media:{audio:true,video:true},harkOptions:null,logger:mockconsole};var item;for(item in opts){if(opts.hasOwnProperty(item)){this.config[item]=opts[item];}}this.logger=config.logger;this._log=this.logger.log.bind(this.logger,'LocalMedia:');this._logerror=this.logger.error.bind(this.logger,'LocalMedia:');this.localStreams=[];this.localScreens=[];if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){this._logerror('Your browser does not support local media capture.');}this._audioMonitors=[];this.on('localStreamStopped',this._stopAudioMonitor.bind(this));this.on('localScreenStopped',this._stopAudioMonitor.bind(this));}util.inherits(LocalMedia,WildEmitter);LocalMedia.prototype.start=function(mediaConstraints,cb){var self=this;var constraints=mediaConstraints||this.config.media;this.emit('localStreamRequested',constraints);navigator.mediaDevices.getUserMedia(constraints).then(function(stream){if(constraints.audio&&self.config.detectSpeakingEvents){self._setupAudioMonitor(stream,self.config.harkOptions);}self.localStreams.push(stream);stream.getTracks().forEach(function(track){track.addEventListener('ended',function(){if(isAllTracksEnded(stream)){self._removeStream(stream);}});});self.emit('localStream',stream);if(cb){return cb(null,stream);}}).catch(function(err){// Fallback for users without a camera\nif(self.config.audioFallback&&err.name==='DevicesNotFoundError'&&constraints.video!==false){constraints.video=false;self.start(constraints,cb);return;}self.emit('localStreamRequestFailed',constraints);if(cb){return cb(err,null);}});};LocalMedia.prototype.stop=function(stream){this.stopStream(stream);this.stopScreenShare(stream);};LocalMedia.prototype.stopStream=function(stream){var self=this;if(stream){var idx=this.localStreams.indexOf(stream);if(idx>-1){stream.getTracks().forEach(function(track){track.stop();});//Half-working fix for Firefox, see: https://bugzilla.mozilla.org/show_bug.cgi?id=1208373\nif(shouldWorkAroundFirefoxStopStream()){this._removeStream(stream);}}}else{this.localStreams.forEach(function(stream){stream.getTracks().forEach(function(track){track.stop();});//Half-working fix for Firefox, see: https://bugzilla.mozilla.org/show_bug.cgi?id=1208373\nif(shouldWorkAroundFirefoxStopStream()){self._removeStream(stream);}});}};LocalMedia.prototype.startScreenShare=function(constraints,cb){var self=this;this.emit('localScreenRequested');if(typeof constraints==='function'&&!cb){cb=constraints;constraints=null;}getScreenMedia(constraints,function(err,stream){if(!err){self.localScreens.push(stream);stream.getTracks().forEach(function(track){track.addEventListener('ended',function(){var isAllTracksEnded=true;stream.getTracks().forEach(function(t){isAllTracksEnded=t.readyState==='ended'&&isAllTracksEnded;});if(isAllTracksEnded){self._removeStream(stream);}});});self.emit('localScreen',stream);}else{self.emit('localScreenRequestFailed');}// enable the callback\nif(cb){return cb(err,stream);}});};LocalMedia.prototype.stopScreenShare=function(stream){var self=this;if(stream){var idx=this.localScreens.indexOf(stream);if(idx>-1){stream.getTracks().forEach(function(track){track.stop();});//Half-working fix for Firefox, see: https://bugzilla.mozilla.org/show_bug.cgi?id=1208373\nif(shouldWorkAroundFirefoxStopStream()){this._removeStream(stream);}}}else{this.localScreens.forEach(function(stream){stream.getTracks().forEach(function(track){track.stop();});//Half-working fix for Firefox, see: https://bugzilla.mozilla.org/show_bug.cgi?id=1208373\nif(shouldWorkAroundFirefoxStopStream()){self._removeStream(stream);}});}};// Audio controls\nLocalMedia.prototype.mute=function(){this._audioEnabled(false);this.emit('audioOff');};LocalMedia.prototype.unmute=function(){this._audioEnabled(true);this.emit('audioOn');};// Video controls\nLocalMedia.prototype.pauseVideo=function(){this._videoEnabled(false);this.emit('videoOff');};LocalMedia.prototype.resumeVideo=function(){this._videoEnabled(true);this.emit('videoOn');};// Combined controls\nLocalMedia.prototype.pause=function(){this.mute();this.pauseVideo();};LocalMedia.prototype.resume=function(){this.unmute();this.resumeVideo();};// Internal methods for enabling/disabling audio/video\nLocalMedia.prototype._audioEnabled=function(bool){this.localStreams.forEach(function(stream){stream.getAudioTracks().forEach(function(track){track.enabled=!!bool;});});};LocalMedia.prototype._videoEnabled=function(bool){this.localStreams.forEach(function(stream){stream.getVideoTracks().forEach(function(track){track.enabled=!!bool;});});};// check if all audio streams are enabled\nLocalMedia.prototype.isAudioEnabled=function(){var enabled=true;this.localStreams.forEach(function(stream){stream.getAudioTracks().forEach(function(track){enabled=enabled&&track.enabled;});});return enabled;};// check if all video streams are enabled\nLocalMedia.prototype.isVideoEnabled=function(){var enabled=true;this.localStreams.forEach(function(stream){stream.getVideoTracks().forEach(function(track){enabled=enabled&&track.enabled;});});return enabled;};LocalMedia.prototype._removeStream=function(stream){var idx=this.localStreams.indexOf(stream);if(idx>-1){this.localStreams.splice(idx,1);this.emit('localStreamStopped',stream);}else{idx=this.localScreens.indexOf(stream);if(idx>-1){this.localScreens.splice(idx,1);this.emit('localScreenStopped',stream);}}};LocalMedia.prototype._setupAudioMonitor=function(stream,harkOptions){this._log('Setup audio');var audio=hark(stream,harkOptions);var self=this;var timeout;audio.on('speaking',function(){self.emit('speaking');});audio.on('stopped_speaking',function(){if(timeout){clearTimeout(timeout);}timeout=setTimeout(function(){self.emit('stoppedSpeaking');},1000);});audio.on('volume_change',function(volume,threshold){self.emit('volumeChange',volume,threshold);});this._audioMonitors.push({audio:audio,stream:stream});};LocalMedia.prototype._stopAudioMonitor=function(stream){var idx=-1;this._audioMonitors.forEach(function(monitors,i){if(monitors.stream===stream){idx=i;}});if(idx>-1){this._audioMonitors[idx].audio.stop();this._audioMonitors.splice(idx,1);}};module.exports=LocalMedia;},{\"getscreenmedia\":36,\"hark\":38,\"mockconsole\":46,\"util\":73,\"wildemitter\":75}],45:[function(require,module,exports){(function(global){/**\n             * lodash (Custom Build) <https://lodash.com/>\n             * Build: `lodash modularize exports=\"npm\" -o ./`\n             * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n             * Released under MIT license <https://lodash.com/license>\n             * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n             * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n             *//** Used as the size to enable large array optimizations. */var LARGE_ARRAY_SIZE=200;/** Used to stand-in for `undefined` hash values. */var HASH_UNDEFINED='__lodash_hash_undefined__';/** Used as references for various `Number` constants. */var MAX_SAFE_INTEGER=9007199254740991;/** `Object#toString` result references. */var argsTag='[object Arguments]',arrayTag='[object Array]',boolTag='[object Boolean]',dateTag='[object Date]',errorTag='[object Error]',funcTag='[object Function]',genTag='[object GeneratorFunction]',mapTag='[object Map]',numberTag='[object Number]',objectTag='[object Object]',promiseTag='[object Promise]',regexpTag='[object RegExp]',setTag='[object Set]',stringTag='[object String]',symbolTag='[object Symbol]',weakMapTag='[object WeakMap]';var arrayBufferTag='[object ArrayBuffer]',dataViewTag='[object DataView]',float32Tag='[object Float32Array]',float64Tag='[object Float64Array]',int8Tag='[object Int8Array]',int16Tag='[object Int16Array]',int32Tag='[object Int32Array]',uint8Tag='[object Uint8Array]',uint8ClampedTag='[object Uint8ClampedArray]',uint16Tag='[object Uint16Array]',uint32Tag='[object Uint32Array]';/**\n             * Used to match `RegExp`\n             * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n             */var reRegExpChar=/[\\\\^$.*+?()[\\]{}|]/g;/** Used to match `RegExp` flags from their coerced string values. */var reFlags=/\\w*$/;/** Used to detect host constructors (Safari). */var reIsHostCtor=/^\\[object .+?Constructor\\]$/;/** Used to detect unsigned integer values. */var reIsUint=/^(?:0|[1-9]\\d*)$/;/** Used to identify `toStringTag` values supported by `_.clone`. */var cloneableTags={};cloneableTags[argsTag]=cloneableTags[arrayTag]=cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=cloneableTags[boolTag]=cloneableTags[dateTag]=cloneableTags[float32Tag]=cloneableTags[float64Tag]=cloneableTags[int8Tag]=cloneableTags[int16Tag]=cloneableTags[int32Tag]=cloneableTags[mapTag]=cloneableTags[numberTag]=cloneableTags[objectTag]=cloneableTags[regexpTag]=cloneableTags[setTag]=cloneableTags[stringTag]=cloneableTags[symbolTag]=cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;cloneableTags[errorTag]=cloneableTags[funcTag]=cloneableTags[weakMapTag]=false;/** Detect free variable `global` from Node.js. */var freeGlobal=(typeof global===\"undefined\"?\"undefined\":_typeof(global))=='object'&&global&&global.Object===Object&&global;/** Detect free variable `self`. */var freeSelf=(typeof self===\"undefined\"?\"undefined\":_typeof(self))=='object'&&self&&self.Object===Object&&self;/** Used as a reference to the global object. */var root=freeGlobal||freeSelf||Function('return this')();/** Detect free variable `exports`. */var freeExports=(typeof exports===\"undefined\"?\"undefined\":_typeof(exports))=='object'&&exports&&!exports.nodeType&&exports;/** Detect free variable `module`. */var freeModule=freeExports&&(typeof module===\"undefined\"?\"undefined\":_typeof(module))=='object'&&module&&!module.nodeType&&module;/** Detect the popular CommonJS extension `module.exports`. */var moduleExports=freeModule&&freeModule.exports===freeExports;/**\n             * Adds the key-value `pair` to `map`.\n             *\n             * @private\n             * @param {Object} map The map to modify.\n             * @param {Array} pair The key-value pair to add.\n             * @returns {Object} Returns `map`.\n             */function addMapEntry(map,pair){// Don't return `map.set` because it's not chainable in IE 11.\nmap.set(pair[0],pair[1]);return map;}/**\n             * Adds `value` to `set`.\n             *\n             * @private\n             * @param {Object} set The set to modify.\n             * @param {*} value The value to add.\n             * @returns {Object} Returns `set`.\n             */function addSetEntry(set,value){// Don't return `set.add` because it's not chainable in IE 11.\nset.add(value);return set;}/**\n             * A specialized version of `_.forEach` for arrays without support for\n             * iteratee shorthands.\n             *\n             * @private\n             * @param {Array} [array] The array to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Array} Returns `array`.\n             */function arrayEach(array,iteratee){var index=-1,length=array?array.length:0;while(++index<length){if(iteratee(array[index],index,array)===false){break;}}return array;}/**\n             * Appends the elements of `values` to `array`.\n             *\n             * @private\n             * @param {Array} array The array to modify.\n             * @param {Array} values The values to append.\n             * @returns {Array} Returns `array`.\n             */function arrayPush(array,values){var index=-1,length=values.length,offset=array.length;while(++index<length){array[offset+index]=values[index];}return array;}/**\n             * A specialized version of `_.reduce` for arrays without support for\n             * iteratee shorthands.\n             *\n             * @private\n             * @param {Array} [array] The array to iterate over.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @param {*} [accumulator] The initial value.\n             * @param {boolean} [initAccum] Specify using the first element of `array` as\n             *  the initial value.\n             * @returns {*} Returns the accumulated value.\n             */function arrayReduce(array,iteratee,accumulator,initAccum){var index=-1,length=array?array.length:0;if(initAccum&&length){accumulator=array[++index];}while(++index<length){accumulator=iteratee(accumulator,array[index],index,array);}return accumulator;}/**\n             * The base implementation of `_.times` without support for iteratee shorthands\n             * or max array length checks.\n             *\n             * @private\n             * @param {number} n The number of times to invoke `iteratee`.\n             * @param {Function} iteratee The function invoked per iteration.\n             * @returns {Array} Returns the array of results.\n             */function baseTimes(n,iteratee){var index=-1,result=Array(n);while(++index<n){result[index]=iteratee(index);}return result;}/**\n             * Gets the value at `key` of `object`.\n             *\n             * @private\n             * @param {Object} [object] The object to query.\n             * @param {string} key The key of the property to get.\n             * @returns {*} Returns the property value.\n             */function getValue(object,key){return object==null?undefined:object[key];}/**\n             * Checks if `value` is a host object in IE < 9.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n             */function isHostObject(value){// Many host objects are `Object` objects that can coerce to strings\n// despite having improperly defined `toString` methods.\nvar result=false;if(value!=null&&typeof value.toString!='function'){try{result=!!(value+'');}catch(e){}}return result;}/**\n             * Converts `map` to its key-value pairs.\n             *\n             * @private\n             * @param {Object} map The map to convert.\n             * @returns {Array} Returns the key-value pairs.\n             */function mapToArray(map){var index=-1,result=Array(map.size);map.forEach(function(value,key){result[++index]=[key,value];});return result;}/**\n             * Creates a unary function that invokes `func` with its argument transformed.\n             *\n             * @private\n             * @param {Function} func The function to wrap.\n             * @param {Function} transform The argument transform.\n             * @returns {Function} Returns the new function.\n             */function overArg(func,transform){return function(arg){return func(transform(arg));};}/**\n             * Converts `set` to an array of its values.\n             *\n             * @private\n             * @param {Object} set The set to convert.\n             * @returns {Array} Returns the values.\n             */function setToArray(set){var index=-1,result=Array(set.size);set.forEach(function(value){result[++index]=value;});return result;}/** Used for built-in method references. */var arrayProto=Array.prototype,funcProto=Function.prototype,objectProto=Object.prototype;/** Used to detect overreaching core-js shims. */var coreJsData=root['__core-js_shared__'];/** Used to detect methods masquerading as native. */var maskSrcKey=function(){var uid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');return uid?'Symbol(src)_1.'+uid:'';}();/** Used to resolve the decompiled source of functions. */var funcToString=funcProto.toString;/** Used to check objects for own properties. */var hasOwnProperty=objectProto.hasOwnProperty;/**\n             * Used to resolve the\n             * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n             * of values.\n             */var objectToString=objectProto.toString;/** Used to detect if a method is native. */var reIsNative=RegExp('^'+funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g,'$1.*?')+'$');/** Built-in value references. */var Buffer=moduleExports?root.Buffer:undefined,_Symbol=root.Symbol,Uint8Array=root.Uint8Array,getPrototype=overArg(Object.getPrototypeOf,Object),objectCreate=Object.create,propertyIsEnumerable=objectProto.propertyIsEnumerable,splice=arrayProto.splice;/* Built-in method references for those with the same name as other `lodash` methods. */var nativeGetSymbols=Object.getOwnPropertySymbols,nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,nativeKeys=overArg(Object.keys,Object);/* Built-in method references that are verified to be native. */var DataView=getNative(root,'DataView'),Map=getNative(root,'Map'),Promise=getNative(root,'Promise'),Set=getNative(root,'Set'),WeakMap=getNative(root,'WeakMap'),nativeCreate=getNative(Object,'create');/** Used to detect maps, sets, and weakmaps. */var dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap);/** Used to convert symbols to primitives and strings. */var symbolProto=_Symbol?_Symbol.prototype:undefined,symbolValueOf=symbolProto?symbolProto.valueOf:undefined;/**\n             * Creates a hash object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */function Hash(entries){var index=-1,length=entries?entries.length:0;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**\n             * Removes all key-value entries from the hash.\n             *\n             * @private\n             * @name clear\n             * @memberOf Hash\n             */function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{};}/**\n             * Removes `key` and its value from the hash.\n             *\n             * @private\n             * @name delete\n             * @memberOf Hash\n             * @param {Object} hash The hash to modify.\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */function hashDelete(key){return this.has(key)&&delete this.__data__[key];}/**\n             * Gets the hash value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf Hash\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */function hashGet(key){var data=this.__data__;if(nativeCreate){var result=data[key];return result===HASH_UNDEFINED?undefined:result;}return hasOwnProperty.call(data,key)?data[key]:undefined;}/**\n             * Checks if a hash value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf Hash\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */function hashHas(key){var data=this.__data__;return nativeCreate?data[key]!==undefined:hasOwnProperty.call(data,key);}/**\n             * Sets the hash `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf Hash\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the hash instance.\n             */function hashSet(key,value){var data=this.__data__;data[key]=nativeCreate&&value===undefined?HASH_UNDEFINED:value;return this;}// Add methods to `Hash`.\nHash.prototype.clear=hashClear;Hash.prototype['delete']=hashDelete;Hash.prototype.get=hashGet;Hash.prototype.has=hashHas;Hash.prototype.set=hashSet;/**\n             * Creates an list cache object.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */function ListCache(entries){var index=-1,length=entries?entries.length:0;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**\n             * Removes all key-value entries from the list cache.\n             *\n             * @private\n             * @name clear\n             * @memberOf ListCache\n             */function listCacheClear(){this.__data__=[];}/**\n             * Removes `key` and its value from the list cache.\n             *\n             * @private\n             * @name delete\n             * @memberOf ListCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */function listCacheDelete(key){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){return false;}var lastIndex=data.length-1;if(index==lastIndex){data.pop();}else{splice.call(data,index,1);}return true;}/**\n             * Gets the list cache value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf ListCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */function listCacheGet(key){var data=this.__data__,index=assocIndexOf(data,key);return index<0?undefined:data[index][1];}/**\n             * Checks if a list cache value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf ListCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */function listCacheHas(key){return assocIndexOf(this.__data__,key)>-1;}/**\n             * Sets the list cache `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf ListCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the list cache instance.\n             */function listCacheSet(key,value){var data=this.__data__,index=assocIndexOf(data,key);if(index<0){data.push([key,value]);}else{data[index][1]=value;}return this;}// Add methods to `ListCache`.\nListCache.prototype.clear=listCacheClear;ListCache.prototype['delete']=listCacheDelete;ListCache.prototype.get=listCacheGet;ListCache.prototype.has=listCacheHas;ListCache.prototype.set=listCacheSet;/**\n             * Creates a map cache object to store key-value pairs.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */function MapCache(entries){var index=-1,length=entries?entries.length:0;this.clear();while(++index<length){var entry=entries[index];this.set(entry[0],entry[1]);}}/**\n             * Removes all key-value entries from the map.\n             *\n             * @private\n             * @name clear\n             * @memberOf MapCache\n             */function mapCacheClear(){this.__data__={'hash':new Hash(),'map':new(Map||ListCache)(),'string':new Hash()};}/**\n             * Removes `key` and its value from the map.\n             *\n             * @private\n             * @name delete\n             * @memberOf MapCache\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */function mapCacheDelete(key){return getMapData(this,key)['delete'](key);}/**\n             * Gets the map value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf MapCache\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */function mapCacheGet(key){return getMapData(this,key).get(key);}/**\n             * Checks if a map value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf MapCache\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */function mapCacheHas(key){return getMapData(this,key).has(key);}/**\n             * Sets the map `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf MapCache\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the map cache instance.\n             */function mapCacheSet(key,value){getMapData(this,key).set(key,value);return this;}// Add methods to `MapCache`.\nMapCache.prototype.clear=mapCacheClear;MapCache.prototype['delete']=mapCacheDelete;MapCache.prototype.get=mapCacheGet;MapCache.prototype.has=mapCacheHas;MapCache.prototype.set=mapCacheSet;/**\n             * Creates a stack cache object to store key-value pairs.\n             *\n             * @private\n             * @constructor\n             * @param {Array} [entries] The key-value pairs to cache.\n             */function Stack(entries){this.__data__=new ListCache(entries);}/**\n             * Removes all key-value entries from the stack.\n             *\n             * @private\n             * @name clear\n             * @memberOf Stack\n             */function stackClear(){this.__data__=new ListCache();}/**\n             * Removes `key` and its value from the stack.\n             *\n             * @private\n             * @name delete\n             * @memberOf Stack\n             * @param {string} key The key of the value to remove.\n             * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n             */function stackDelete(key){return this.__data__['delete'](key);}/**\n             * Gets the stack value for `key`.\n             *\n             * @private\n             * @name get\n             * @memberOf Stack\n             * @param {string} key The key of the value to get.\n             * @returns {*} Returns the entry value.\n             */function stackGet(key){return this.__data__.get(key);}/**\n             * Checks if a stack value for `key` exists.\n             *\n             * @private\n             * @name has\n             * @memberOf Stack\n             * @param {string} key The key of the entry to check.\n             * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n             */function stackHas(key){return this.__data__.has(key);}/**\n             * Sets the stack `key` to `value`.\n             *\n             * @private\n             * @name set\n             * @memberOf Stack\n             * @param {string} key The key of the value to set.\n             * @param {*} value The value to set.\n             * @returns {Object} Returns the stack cache instance.\n             */function stackSet(key,value){var cache=this.__data__;if(cache instanceof ListCache){var pairs=cache.__data__;if(!Map||pairs.length<LARGE_ARRAY_SIZE-1){pairs.push([key,value]);return this;}cache=this.__data__=new MapCache(pairs);}cache.set(key,value);return this;}// Add methods to `Stack`.\nStack.prototype.clear=stackClear;Stack.prototype['delete']=stackDelete;Stack.prototype.get=stackGet;Stack.prototype.has=stackHas;Stack.prototype.set=stackSet;/**\n             * Creates an array of the enumerable property names of the array-like `value`.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @param {boolean} inherited Specify returning inherited property names.\n             * @returns {Array} Returns the array of property names.\n             */function arrayLikeKeys(value,inherited){// Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n// Safari 9 makes `arguments.length` enumerable in strict mode.\nvar result=isArray(value)||isArguments(value)?baseTimes(value.length,String):[];var length=result.length,skipIndexes=!!length;for(var key in value){if((inherited||hasOwnProperty.call(value,key))&&!(skipIndexes&&(key=='length'||isIndex(key,length)))){result.push(key);}}return result;}/**\n             * Assigns `value` to `key` of `object` if the existing value is not equivalent\n             * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n             * for equality comparisons.\n             *\n             * @private\n             * @param {Object} object The object to modify.\n             * @param {string} key The key of the property to assign.\n             * @param {*} value The value to assign.\n             */function assignValue(object,key,value){var objValue=object[key];if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||value===undefined&&!(key in object)){object[key]=value;}}/**\n             * Gets the index at which the `key` is found in `array` of key-value pairs.\n             *\n             * @private\n             * @param {Array} array The array to inspect.\n             * @param {*} key The key to search for.\n             * @returns {number} Returns the index of the matched value, else `-1`.\n             */function assocIndexOf(array,key){var length=array.length;while(length--){if(eq(array[length][0],key)){return length;}}return-1;}/**\n             * The base implementation of `_.assign` without support for multiple sources\n             * or `customizer` functions.\n             *\n             * @private\n             * @param {Object} object The destination object.\n             * @param {Object} source The source object.\n             * @returns {Object} Returns `object`.\n             */function baseAssign(object,source){return object&&copyObject(source,keys(source),object);}/**\n             * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n             * traversed objects.\n             *\n             * @private\n             * @param {*} value The value to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @param {boolean} [isFull] Specify a clone including symbols.\n             * @param {Function} [customizer] The function to customize cloning.\n             * @param {string} [key] The key of `value`.\n             * @param {Object} [object] The parent object of `value`.\n             * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n             * @returns {*} Returns the cloned value.\n             */function baseClone(value,isDeep,isFull,customizer,key,object,stack){var result;if(customizer){result=object?customizer(value,key,object,stack):customizer(value);}if(result!==undefined){return result;}if(!isObject(value)){return value;}var isArr=isArray(value);if(isArr){result=initCloneArray(value);if(!isDeep){return copyArray(value,result);}}else{var tag=getTag(value),isFunc=tag==funcTag||tag==genTag;if(isBuffer(value)){return cloneBuffer(value,isDeep);}if(tag==objectTag||tag==argsTag||isFunc&&!object){if(isHostObject(value)){return object?value:{};}result=initCloneObject(isFunc?{}:value);if(!isDeep){return copySymbols(value,baseAssign(result,value));}}else{if(!cloneableTags[tag]){return object?value:{};}result=initCloneByTag(value,tag,baseClone,isDeep);}}// Check for circular references and return its corresponding clone.\nstack||(stack=new Stack());var stacked=stack.get(value);if(stacked){return stacked;}stack.set(value,result);if(!isArr){var props=isFull?getAllKeys(value):keys(value);}arrayEach(props||value,function(subValue,key){if(props){key=subValue;subValue=value[key];}// Recursively populate clone (susceptible to call stack limits).\nassignValue(result,key,baseClone(subValue,isDeep,isFull,customizer,key,value,stack));});return result;}/**\n             * The base implementation of `_.create` without support for assigning\n             * properties to the created object.\n             *\n             * @private\n             * @param {Object} prototype The object to inherit from.\n             * @returns {Object} Returns the new object.\n             */function baseCreate(proto){return isObject(proto)?objectCreate(proto):{};}/**\n             * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n             * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n             * symbols of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @param {Function} keysFunc The function to get the keys of `object`.\n             * @param {Function} symbolsFunc The function to get the symbols of `object`.\n             * @returns {Array} Returns the array of property names and symbols.\n             */function baseGetAllKeys(object,keysFunc,symbolsFunc){var result=keysFunc(object);return isArray(object)?result:arrayPush(result,symbolsFunc(object));}/**\n             * The base implementation of `getTag`.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @returns {string} Returns the `toStringTag`.\n             */function baseGetTag(value){return objectToString.call(value);}/**\n             * The base implementation of `_.isNative` without bad shim checks.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a native function,\n             *  else `false`.\n             */function baseIsNative(value){if(!isObject(value)||isMasked(value)){return false;}var pattern=isFunction(value)||isHostObject(value)?reIsNative:reIsHostCtor;return pattern.test(toSource(value));}/**\n             * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names.\n             */function baseKeys(object){if(!isPrototype(object)){return nativeKeys(object);}var result=[];for(var key in Object(object)){if(hasOwnProperty.call(object,key)&&key!='constructor'){result.push(key);}}return result;}/**\n             * Creates a clone of  `buffer`.\n             *\n             * @private\n             * @param {Buffer} buffer The buffer to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Buffer} Returns the cloned buffer.\n             */function cloneBuffer(buffer,isDeep){if(isDeep){return buffer.slice();}var result=new buffer.constructor(buffer.length);buffer.copy(result);return result;}/**\n             * Creates a clone of `arrayBuffer`.\n             *\n             * @private\n             * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n             * @returns {ArrayBuffer} Returns the cloned array buffer.\n             */function cloneArrayBuffer(arrayBuffer){var result=new arrayBuffer.constructor(arrayBuffer.byteLength);new Uint8Array(result).set(new Uint8Array(arrayBuffer));return result;}/**\n             * Creates a clone of `dataView`.\n             *\n             * @private\n             * @param {Object} dataView The data view to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned data view.\n             */function cloneDataView(dataView,isDeep){var buffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;return new dataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);}/**\n             * Creates a clone of `map`.\n             *\n             * @private\n             * @param {Object} map The map to clone.\n             * @param {Function} cloneFunc The function to clone values.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned map.\n             */function cloneMap(map,isDeep,cloneFunc){var array=isDeep?cloneFunc(mapToArray(map),true):mapToArray(map);return arrayReduce(array,addMapEntry,new map.constructor());}/**\n             * Creates a clone of `regexp`.\n             *\n             * @private\n             * @param {Object} regexp The regexp to clone.\n             * @returns {Object} Returns the cloned regexp.\n             */function cloneRegExp(regexp){var result=new regexp.constructor(regexp.source,reFlags.exec(regexp));result.lastIndex=regexp.lastIndex;return result;}/**\n             * Creates a clone of `set`.\n             *\n             * @private\n             * @param {Object} set The set to clone.\n             * @param {Function} cloneFunc The function to clone values.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned set.\n             */function cloneSet(set,isDeep,cloneFunc){var array=isDeep?cloneFunc(setToArray(set),true):setToArray(set);return arrayReduce(array,addSetEntry,new set.constructor());}/**\n             * Creates a clone of the `symbol` object.\n             *\n             * @private\n             * @param {Object} symbol The symbol object to clone.\n             * @returns {Object} Returns the cloned symbol object.\n             */function cloneSymbol(symbol){return symbolValueOf?Object(symbolValueOf.call(symbol)):{};}/**\n             * Creates a clone of `typedArray`.\n             *\n             * @private\n             * @param {Object} typedArray The typed array to clone.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the cloned typed array.\n             */function cloneTypedArray(typedArray,isDeep){var buffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;return new typedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);}/**\n             * Copies the values of `source` to `array`.\n             *\n             * @private\n             * @param {Array} source The array to copy values from.\n             * @param {Array} [array=[]] The array to copy values to.\n             * @returns {Array} Returns `array`.\n             */function copyArray(source,array){var index=-1,length=source.length;array||(array=Array(length));while(++index<length){array[index]=source[index];}return array;}/**\n             * Copies properties of `source` to `object`.\n             *\n             * @private\n             * @param {Object} source The object to copy properties from.\n             * @param {Array} props The property identifiers to copy.\n             * @param {Object} [object={}] The object to copy properties to.\n             * @param {Function} [customizer] The function to customize copied values.\n             * @returns {Object} Returns `object`.\n             */function copyObject(source,props,object,customizer){object||(object={});var index=-1,length=props.length;while(++index<length){var key=props[index];var newValue=customizer?customizer(object[key],source[key],key,object,source):undefined;assignValue(object,key,newValue===undefined?source[key]:newValue);}return object;}/**\n             * Copies own symbol properties of `source` to `object`.\n             *\n             * @private\n             * @param {Object} source The object to copy symbols from.\n             * @param {Object} [object={}] The object to copy symbols to.\n             * @returns {Object} Returns `object`.\n             */function copySymbols(source,object){return copyObject(source,getSymbols(source),object);}/**\n             * Creates an array of own enumerable property names and symbols of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names and symbols.\n             */function getAllKeys(object){return baseGetAllKeys(object,keys,getSymbols);}/**\n             * Gets the data for `map`.\n             *\n             * @private\n             * @param {Object} map The map to query.\n             * @param {string} key The reference key.\n             * @returns {*} Returns the map data.\n             */function getMapData(map,key){var data=map.__data__;return isKeyable(key)?data[typeof key=='string'?'string':'hash']:data.map;}/**\n             * Gets the native function at `key` of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @param {string} key The key of the method to get.\n             * @returns {*} Returns the function if it's native, else `undefined`.\n             */function getNative(object,key){var value=getValue(object,key);return baseIsNative(value)?value:undefined;}/**\n             * Creates an array of the own enumerable symbol properties of `object`.\n             *\n             * @private\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of symbols.\n             */var getSymbols=nativeGetSymbols?overArg(nativeGetSymbols,Object):stubArray;/**\n             * Gets the `toStringTag` of `value`.\n             *\n             * @private\n             * @param {*} value The value to query.\n             * @returns {string} Returns the `toStringTag`.\n             */var getTag=baseGetTag;// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag||Map&&getTag(new Map())!=mapTag||Promise&&getTag(Promise.resolve())!=promiseTag||Set&&getTag(new Set())!=setTag||WeakMap&&getTag(new WeakMap())!=weakMapTag){getTag=function getTag(value){var result=objectToString.call(value),Ctor=result==objectTag?value.constructor:undefined,ctorString=Ctor?toSource(Ctor):undefined;if(ctorString){switch(ctorString){case dataViewCtorString:return dataViewTag;case mapCtorString:return mapTag;case promiseCtorString:return promiseTag;case setCtorString:return setTag;case weakMapCtorString:return weakMapTag;}}return result;};}/**\n             * Initializes an array clone.\n             *\n             * @private\n             * @param {Array} array The array to clone.\n             * @returns {Array} Returns the initialized clone.\n             */function initCloneArray(array){var length=array.length,result=array.constructor(length);// Add properties assigned by `RegExp#exec`.\nif(length&&typeof array[0]=='string'&&hasOwnProperty.call(array,'index')){result.index=array.index;result.input=array.input;}return result;}/**\n             * Initializes an object clone.\n             *\n             * @private\n             * @param {Object} object The object to clone.\n             * @returns {Object} Returns the initialized clone.\n             */function initCloneObject(object){return typeof object.constructor=='function'&&!isPrototype(object)?baseCreate(getPrototype(object)):{};}/**\n             * Initializes an object clone based on its `toStringTag`.\n             *\n             * **Note:** This function only supports cloning values with tags of\n             * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n             *\n             * @private\n             * @param {Object} object The object to clone.\n             * @param {string} tag The `toStringTag` of the object to clone.\n             * @param {Function} cloneFunc The function to clone values.\n             * @param {boolean} [isDeep] Specify a deep clone.\n             * @returns {Object} Returns the initialized clone.\n             */function initCloneByTag(object,tag,cloneFunc,isDeep){var Ctor=object.constructor;switch(tag){case arrayBufferTag:return cloneArrayBuffer(object);case boolTag:case dateTag:return new Ctor(+object);case dataViewTag:return cloneDataView(object,isDeep);case float32Tag:case float64Tag:case int8Tag:case int16Tag:case int32Tag:case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:return cloneTypedArray(object,isDeep);case mapTag:return cloneMap(object,isDeep,cloneFunc);case numberTag:case stringTag:return new Ctor(object);case regexpTag:return cloneRegExp(object);case setTag:return cloneSet(object,isDeep,cloneFunc);case symbolTag:return cloneSymbol(object);}}/**\n             * Checks if `value` is a valid array-like index.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n             * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n             */function isIndex(value,length){length=length==null?MAX_SAFE_INTEGER:length;return!!length&&(typeof value=='number'||reIsUint.test(value))&&value>-1&&value%1==0&&value<length;}/**\n             * Checks if `value` is suitable for use as unique object key.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n             */function isKeyable(value){var type=typeof value===\"undefined\"?\"undefined\":_typeof(value);return type=='string'||type=='number'||type=='symbol'||type=='boolean'?value!=='__proto__':value===null;}/**\n             * Checks if `func` has its source masked.\n             *\n             * @private\n             * @param {Function} func The function to check.\n             * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n             */function isMasked(func){return!!maskSrcKey&&maskSrcKey in func;}/**\n             * Checks if `value` is likely a prototype object.\n             *\n             * @private\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n             */function isPrototype(value){var Ctor=value&&value.constructor,proto=typeof Ctor=='function'&&Ctor.prototype||objectProto;return value===proto;}/**\n             * Converts `func` to its source code.\n             *\n             * @private\n             * @param {Function} func The function to process.\n             * @returns {string} Returns the source code.\n             */function toSource(func){if(func!=null){try{return funcToString.call(func);}catch(e){}try{return func+'';}catch(e){}}return'';}/**\n             * This method is like `_.clone` except that it recursively clones `value`.\n             *\n             * @static\n             * @memberOf _\n             * @since 1.0.0\n             * @category Lang\n             * @param {*} value The value to recursively clone.\n             * @returns {*} Returns the deep cloned value.\n             * @see _.clone\n             * @example\n             *\n             * var objects = [{ 'a': 1 }, { 'b': 2 }];\n             *\n             * var deep = _.cloneDeep(objects);\n             * console.log(deep[0] === objects[0]);\n             * // => false\n             */function cloneDeep(value){return baseClone(value,true,true);}/**\n             * Performs a\n             * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n             * comparison between two values to determine if they are equivalent.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to compare.\n             * @param {*} other The other value to compare.\n             * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n             * @example\n             *\n             * var object = { 'a': 1 };\n             * var other = { 'a': 1 };\n             *\n             * _.eq(object, object);\n             * // => true\n             *\n             * _.eq(object, other);\n             * // => false\n             *\n             * _.eq('a', 'a');\n             * // => true\n             *\n             * _.eq('a', Object('a'));\n             * // => false\n             *\n             * _.eq(NaN, NaN);\n             * // => true\n             */function eq(value,other){return value===other||value!==value&&other!==other;}/**\n             * Checks if `value` is likely an `arguments` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n             *  else `false`.\n             * @example\n             *\n             * _.isArguments(function() { return arguments; }());\n             * // => true\n             *\n             * _.isArguments([1, 2, 3]);\n             * // => false\n             */function isArguments(value){// Safari 8.1 makes `arguments.callee` enumerable in strict mode.\nreturn isArrayLikeObject(value)&&hasOwnProperty.call(value,'callee')&&(!propertyIsEnumerable.call(value,'callee')||objectToString.call(value)==argsTag);}/**\n             * Checks if `value` is classified as an `Array` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n             * @example\n             *\n             * _.isArray([1, 2, 3]);\n             * // => true\n             *\n             * _.isArray(document.body.children);\n             * // => false\n             *\n             * _.isArray('abc');\n             * // => false\n             *\n             * _.isArray(_.noop);\n             * // => false\n             */var isArray=Array.isArray;/**\n             * Checks if `value` is array-like. A value is considered array-like if it's\n             * not a function and has a `value.length` that's an integer greater than or\n             * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n             * @example\n             *\n             * _.isArrayLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isArrayLike(document.body.children);\n             * // => true\n             *\n             * _.isArrayLike('abc');\n             * // => true\n             *\n             * _.isArrayLike(_.noop);\n             * // => false\n             */function isArrayLike(value){return value!=null&&isLength(value.length)&&!isFunction(value);}/**\n             * This method is like `_.isArrayLike` except that it also checks if `value`\n             * is an object.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an array-like object,\n             *  else `false`.\n             * @example\n             *\n             * _.isArrayLikeObject([1, 2, 3]);\n             * // => true\n             *\n             * _.isArrayLikeObject(document.body.children);\n             * // => true\n             *\n             * _.isArrayLikeObject('abc');\n             * // => false\n             *\n             * _.isArrayLikeObject(_.noop);\n             * // => false\n             */function isArrayLikeObject(value){return isObjectLike(value)&&isArrayLike(value);}/**\n             * Checks if `value` is a buffer.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.3.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n             * @example\n             *\n             * _.isBuffer(new Buffer(2));\n             * // => true\n             *\n             * _.isBuffer(new Uint8Array(2));\n             * // => false\n             */var isBuffer=nativeIsBuffer||stubFalse;/**\n             * Checks if `value` is classified as a `Function` object.\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n             * @example\n             *\n             * _.isFunction(_);\n             * // => true\n             *\n             * _.isFunction(/abc/);\n             * // => false\n             */function isFunction(value){// The use of `Object#toString` avoids issues with the `typeof` operator\n// in Safari 8-9 which returns 'object' for typed array and other constructors.\nvar tag=isObject(value)?objectToString.call(value):'';return tag==funcTag||tag==genTag;}/**\n             * Checks if `value` is a valid array-like length.\n             *\n             * **Note:** This method is loosely based on\n             * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n             * @example\n             *\n             * _.isLength(3);\n             * // => true\n             *\n             * _.isLength(Number.MIN_VALUE);\n             * // => false\n             *\n             * _.isLength(Infinity);\n             * // => false\n             *\n             * _.isLength('3');\n             * // => false\n             */function isLength(value){return typeof value=='number'&&value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;}/**\n             * Checks if `value` is the\n             * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n             * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n             *\n             * @static\n             * @memberOf _\n             * @since 0.1.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n             * @example\n             *\n             * _.isObject({});\n             * // => true\n             *\n             * _.isObject([1, 2, 3]);\n             * // => true\n             *\n             * _.isObject(_.noop);\n             * // => true\n             *\n             * _.isObject(null);\n             * // => false\n             */function isObject(value){var type=typeof value===\"undefined\"?\"undefined\":_typeof(value);return!!value&&(type=='object'||type=='function');}/**\n             * Checks if `value` is object-like. A value is object-like if it's not `null`\n             * and has a `typeof` result of \"object\".\n             *\n             * @static\n             * @memberOf _\n             * @since 4.0.0\n             * @category Lang\n             * @param {*} value The value to check.\n             * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n             * @example\n             *\n             * _.isObjectLike({});\n             * // => true\n             *\n             * _.isObjectLike([1, 2, 3]);\n             * // => true\n             *\n             * _.isObjectLike(_.noop);\n             * // => false\n             *\n             * _.isObjectLike(null);\n             * // => false\n             */function isObjectLike(value){return!!value&&(typeof value===\"undefined\"?\"undefined\":_typeof(value))=='object';}/**\n             * Creates an array of the own enumerable property names of `object`.\n             *\n             * **Note:** Non-object values are coerced to objects. See the\n             * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n             * for more details.\n             *\n             * @static\n             * @since 0.1.0\n             * @memberOf _\n             * @category Object\n             * @param {Object} object The object to query.\n             * @returns {Array} Returns the array of property names.\n             * @example\n             *\n             * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n             *\n             * Foo.prototype.c = 3;\n             *\n             * _.keys(new Foo);\n             * // => ['a', 'b'] (iteration order is not guaranteed)\n             *\n             * _.keys('hi');\n             * // => ['0', '1']\n             */function keys(object){return isArrayLike(object)?arrayLikeKeys(object):baseKeys(object);}/**\n             * This method returns a new empty array.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.13.0\n             * @category Util\n             * @returns {Array} Returns the new empty array.\n             * @example\n             *\n             * var arrays = _.times(2, _.stubArray);\n             *\n             * console.log(arrays);\n             * // => [[], []]\n             *\n             * console.log(arrays[0] === arrays[1]);\n             * // => false\n             */function stubArray(){return[];}/**\n             * This method returns `false`.\n             *\n             * @static\n             * @memberOf _\n             * @since 4.13.0\n             * @category Util\n             * @returns {boolean} Returns `false`.\n             * @example\n             *\n             * _.times(2, _.stubFalse);\n             * // => [false, false]\n             */function stubFalse(){return false;}module.exports=cloneDeep;}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{}],46:[function(require,module,exports){var methods=\"assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn\".split(\",\");var l=methods.length;var fn=function fn(){};var mockconsole={};while(l--){mockconsole[methods[l]]=fn;}module.exports=mockconsole;},{}],47:[function(require,module,exports){/**\n         * Helpers.\n         */var s=1000;var m=s*60;var h=m*60;var d=h*24;var y=d*365.25;/**\n         * Parse or format the given `val`.\n         *\n         * Options:\n         *\n         *  - `long` verbose formatting [false]\n         *\n         * @param {String|Number} val\n         * @param {Object} options\n         * @return {String|Number}\n         * @api public\n         */module.exports=function(val,options){options=options||{};if('string'==typeof val)return parse(val);return options.long?long(val):short(val);};/**\n         * Parse the given `str` and return milliseconds.\n         *\n         * @param {String} str\n         * @return {Number}\n         * @api private\n         */function parse(str){var match=/^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);if(!match)return;var n=parseFloat(match[1]);var type=(match[2]||'ms').toLowerCase();switch(type){case'years':case'year':case'y':return n*y;case'days':case'day':case'd':return n*d;case'hours':case'hour':case'h':return n*h;case'minutes':case'minute':case'm':return n*m;case'seconds':case'second':case's':return n*s;case'ms':return n;}}/**\n         * Short format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */function short(ms){if(ms>=d)return Math.round(ms/d)+'d';if(ms>=h)return Math.round(ms/h)+'h';if(ms>=m)return Math.round(ms/m)+'m';if(ms>=s)return Math.round(ms/s)+'s';return ms+'ms';}/**\n         * Long format for `ms`.\n         *\n         * @param {Number} ms\n         * @return {String}\n         * @api private\n         */function long(ms){return plural(ms,d,'day')||plural(ms,h,'hour')||plural(ms,m,'minute')||plural(ms,s,'second')||ms+' ms';}/**\n         * Pluralization helper.\n         */function plural(ms,n,name){if(ms<n)return;if(ms<n*1.5)return Math.floor(ms/n)+' '+name;return Math.ceil(ms/n)+' '+name+'s';}},{}],48:[function(require,module,exports){/**\n         * HOP ref.\n         */var has=Object.prototype.hasOwnProperty;/**\n         * Return own keys in `obj`.\n         *\n         * @param {Object} obj\n         * @return {Array}\n         * @api public\n         */exports.keys=Object.keys||function(obj){var keys=[];for(var key in obj){if(has.call(obj,key)){keys.push(key);}}return keys;};/**\n         * Return own values in `obj`.\n         *\n         * @param {Object} obj\n         * @return {Array}\n         * @api public\n         */exports.values=function(obj){var vals=[];for(var key in obj){if(has.call(obj,key)){vals.push(obj[key]);}}return vals;};/**\n         * Merge `b` into `a`.\n         *\n         * @param {Object} a\n         * @param {Object} b\n         * @return {Object} a\n         * @api public\n         */exports.merge=function(a,b){for(var key in b){if(has.call(b,key)){a[key]=b[key];}}return a;};/**\n         * Return length of `obj`.\n         *\n         * @param {Object} obj\n         * @return {Number}\n         * @api public\n         */exports.length=function(obj){return exports.keys(obj).length;};/**\n         * Check if `obj` is empty.\n         *\n         * @param {Object} obj\n         * @return {Boolean}\n         * @api public\n         */exports.isEmpty=function(obj){return 0==exports.length(obj);};},{}],49:[function(require,module,exports){(function(global){/**\n             * JSON parse.\n             *\n             * @see Based on jQuery#parseJSON (MIT) and JSON2\n             * @api private\n             */var rvalidchars=/^[\\],:{}\\s]*$/;var rvalidescape=/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g;var rvalidtokens=/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;var rvalidbraces=/(?:^|:|,)(?:\\s*\\[)+/g;var rtrimLeft=/^\\s+/;var rtrimRight=/\\s+$/;module.exports=function parsejson(data){if('string'!=typeof data||!data){return null;}data=data.replace(rtrimLeft,'').replace(rtrimRight,'');// Attempt to parse using the native JSON parser first\nif(global.JSON&&JSON.parse){return JSON.parse(data);}if(rvalidchars.test(data.replace(rvalidescape,'@').replace(rvalidtokens,']').replace(rvalidbraces,''))){return new Function('return '+data)();}};}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{}],50:[function(require,module,exports){/**\n         * Compiles a querystring\n         * Returns string representation of the object\n         *\n         * @param {Object}\n         * @api private\n         */exports.encode=function(obj){var str='';for(var i in obj){if(obj.hasOwnProperty(i)){if(str.length)str+='&';str+=encodeURIComponent(i)+'='+encodeURIComponent(obj[i]);}}return str;};/**\n         * Parses a simple querystring into an object\n         *\n         * @param {String} qs\n         * @api private\n         */exports.decode=function(qs){var qry={};var pairs=qs.split('&');for(var i=0,l=pairs.length;i<l;i++){var pair=pairs[i].split('=');qry[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]);}return qry;};},{}],51:[function(require,module,exports){/**\n         * Parses an URI\n         *\n         * @author Steven Levithan <stevenlevithan.com> (MIT license)\n         * @api private\n         */var re=/^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;var parts=['source','protocol','authority','userInfo','user','password','host','port','relative','path','directory','file','query','anchor'];module.exports=function parseuri(str){var m=re.exec(str||''),uri={},i=14;while(i--){uri[parts[i]]=m[i]||'';}return uri;};},{}],52:[function(require,module,exports){// shim for using process in browser\nvar process=module.exports={};// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\nvar cachedSetTimeout;var cachedClearTimeout;function defaultSetTimout(){throw new Error('setTimeout has not been defined');}function defaultClearTimeout(){throw new Error('clearTimeout has not been defined');}(function(){try{if(typeof setTimeout==='function'){cachedSetTimeout=setTimeout;}else{cachedSetTimeout=defaultSetTimout;}}catch(e){cachedSetTimeout=defaultSetTimout;}try{if(typeof clearTimeout==='function'){cachedClearTimeout=clearTimeout;}else{cachedClearTimeout=defaultClearTimeout;}}catch(e){cachedClearTimeout=defaultClearTimeout;}})();function runTimeout(fun){if(cachedSetTimeout===setTimeout){//normal enviroments in sane situations\nreturn setTimeout(fun,0);}// if setTimeout wasn't available but was latter defined\nif((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout){cachedSetTimeout=setTimeout;return setTimeout(fun,0);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedSetTimeout(fun,0);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\nreturn cachedSetTimeout.call(null,fun,0);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\nreturn cachedSetTimeout.call(this,fun,0);}}}function runClearTimeout(marker){if(cachedClearTimeout===clearTimeout){//normal enviroments in sane situations\nreturn clearTimeout(marker);}// if clearTimeout wasn't available but was latter defined\nif((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout){cachedClearTimeout=clearTimeout;return clearTimeout(marker);}try{// when when somebody has screwed with setTimeout but no I.E. maddness\nreturn cachedClearTimeout(marker);}catch(e){try{// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\nreturn cachedClearTimeout.call(null,marker);}catch(e){// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n// Some versions of I.E. have different rules for clearTimeout vs setTimeout\nreturn cachedClearTimeout.call(this,marker);}}}var queue=[];var draining=false;var currentQueue;var queueIndex=-1;function cleanUpNextTick(){if(!draining||!currentQueue){return;}draining=false;if(currentQueue.length){queue=currentQueue.concat(queue);}else{queueIndex=-1;}if(queue.length){drainQueue();}}function drainQueue(){if(draining){return;}var timeout=runTimeout(cleanUpNextTick);draining=true;var len=queue.length;while(len){currentQueue=queue;queue=[];while(++queueIndex<len){if(currentQueue){currentQueue[queueIndex].run();}}queueIndex=-1;len=queue.length;}currentQueue=null;draining=false;runClearTimeout(timeout);}process.nextTick=function(fun){var args=new Array(arguments.length-1);if(arguments.length>1){for(var i=1;i<arguments.length;i++){args[i-1]=arguments[i];}}queue.push(new Item(fun,args));if(queue.length===1&&!draining){runTimeout(drainQueue);}};// v8 likes predictible objects\nfunction Item(fun,array){this.fun=fun;this.array=array;}Item.prototype.run=function(){this.fun.apply(null,this.array);};process.title='browser';process.browser=true;process.env={};process.argv=[];process.version='';// empty string to avoid regexp issues\nprocess.versions={};function noop(){}process.on=noop;process.addListener=noop;process.once=noop;process.off=noop;process.removeListener=noop;process.removeAllListeners=noop;process.emit=noop;process.prependListener=noop;process.prependOnceListener=noop;process.listeners=function(name){return[];};process.binding=function(name){throw new Error('process.binding is not supported');};process.cwd=function(){return'/';};process.chdir=function(dir){throw new Error('process.chdir is not supported');};process.umask=function(){return 0;};},{}],53:[function(require,module,exports){var util=require('util');var SJJ=require('sdp-jingle-json');var WildEmitter=require('wildemitter');var cloneDeep=require('lodash.clonedeep');function PeerConnection(config,constraints,params){var self=this;var item;WildEmitter.call(this);config=config||{};config.iceServers=config.iceServers||[];// make sure this only gets enabled in Google Chrome\n// EXPERIMENTAL FLAG, might get removed without notice\nthis.enableChromeNativeSimulcast=false;if(constraints&&constraints.optional&&window.chrome&&navigator.appVersion.match(/Chromium\\//)===null){constraints.optional.forEach(function(constraint){if(constraint.enableChromeNativeSimulcast){self.enableChromeNativeSimulcast=true;}});}// EXPERIMENTAL FLAG, might get removed without notice\nthis.enableMultiStreamHacks=false;if(constraints&&constraints.optional&&window.chrome){constraints.optional.forEach(function(constraint){if(constraint.enableMultiStreamHacks){self.enableMultiStreamHacks=true;}});}// EXPERIMENTAL FLAG, might get removed without notice\nthis.restrictBandwidth=0;if(constraints&&constraints.optional){constraints.optional.forEach(function(constraint){if(constraint.andyetRestrictBandwidth){self.restrictBandwidth=constraint.andyetRestrictBandwidth;}});}// EXPERIMENTAL FLAG, might get removed without notice\n// bundle up ice candidates, only works for jingle mode\n// number > 0 is the delay to wait for additional candidates\n// ~20ms seems good\nthis.batchIceCandidates=0;if(constraints&&constraints.optional){constraints.optional.forEach(function(constraint){if(constraint.andyetBatchIce){self.batchIceCandidates=constraint.andyetBatchIce;}});}this.batchedIceCandidates=[];// EXPERIMENTAL FLAG, might get removed without notice\n// this attemps to strip out candidates with an already known foundation\n// and type -- i.e. those which are gathered via the same TURN server\n// but different transports (TURN udp, tcp and tls respectively)\nif(constraints&&constraints.optional&&window.chrome){constraints.optional.forEach(function(constraint){if(constraint.andyetFasterICE){self.eliminateDuplicateCandidates=constraint.andyetFasterICE;}});}// EXPERIMENTAL FLAG, might get removed without notice\n// when using a server such as the jitsi videobridge we don't need to signal\n// our candidates\nif(constraints&&constraints.optional){constraints.optional.forEach(function(constraint){if(constraint.andyetDontSignalCandidates){self.dontSignalCandidates=constraint.andyetDontSignalCandidates;}});}// EXPERIMENTAL FLAG, might get removed without notice\nthis.assumeSetLocalSuccess=false;if(constraints&&constraints.optional){constraints.optional.forEach(function(constraint){if(constraint.andyetAssumeSetLocalSuccess){self.assumeSetLocalSuccess=constraint.andyetAssumeSetLocalSuccess;}});}// EXPERIMENTAL FLAG, might get removed without notice\n// working around https://bugzilla.mozilla.org/show_bug.cgi?id=1087551\n// pass in a timeout for this\nif(window.navigator.mozGetUserMedia){if(constraints&&constraints.optional){this.wtFirefox=0;constraints.optional.forEach(function(constraint){if(constraint.andyetFirefoxMakesMeSad){self.wtFirefox=constraint.andyetFirefoxMakesMeSad;if(self.wtFirefox>0){self.firefoxcandidatebuffer=[];}}});}}this.pc=new RTCPeerConnection(config,constraints);///MLUpdate///\nthis.vidEncoder=params.vidEncoder;this.vidBitrate=params.vidBitrate;this.audEncode=params.audEncoder;this.audBitrate=params.audBitrate;///MLUpdate///\nif(typeof this.pc.getLocalStreams==='function'){this.getLocalStreams=this.pc.getLocalStreams.bind(this.pc);}else{this.getLocalStreams=function(){return[];};}this.getRemoteStreams=this.pc.getRemoteStreams.bind(this.pc);this.addStream=this.pc.addStream.bind(this.pc);this.removeStream=function(stream){if(typeof self.pc.removeStream==='function'){self.pc.removeStream.apply(self.pc,arguments);}else if(typeof self.pc.removeTrack==='function'){stream.getTracks().forEach(function(track){self.pc.removeTrack(track);});}};if(typeof this.pc.removeTrack==='function'){this.removeTrack=this.pc.removeTrack.bind(this.pc);}// proxy some events directly\nthis.pc.onremovestream=this.emit.bind(this,'removeStream');this.pc.onremovetrack=this.emit.bind(this,'removeTrack');this.pc.onaddstream=this.emit.bind(this,'addStream');this.pc.onnegotiationneeded=this.emit.bind(this,'negotiationNeeded');this.pc.oniceconnectionstatechange=this.emit.bind(this,'iceConnectionStateChange');this.pc.onsignalingstatechange=this.emit.bind(this,'signalingStateChange');// handle ice candidate and data channel events\nthis.pc.onicecandidate=this._onIce.bind(this);this.pc.ondatachannel=this._onDataChannel.bind(this);this.localDescription={contents:[]};this.remoteDescription={contents:[]};this.config={debug:false,sid:'',isInitiator:true,sdpSessionID:Date.now(),useJingle:false};this.iceCredentials={local:{},remote:{}};// apply our config\nfor(item in config){this.config[item]=config[item];}if(this.config.debug){this.on('*',function(){var logger=config.logger||console;logger.log('PeerConnection event:',arguments);});}this.hadLocalStunCandidate=false;this.hadRemoteStunCandidate=false;this.hadLocalRelayCandidate=false;this.hadRemoteRelayCandidate=false;this.hadLocalIPv6Candidate=false;this.hadRemoteIPv6Candidate=false;// keeping references for all our data channels\n// so they dont get garbage collected\n// can be removed once the following bugs have been fixed\n// https://crbug.com/405545\n// https://bugzilla.mozilla.org/show_bug.cgi?id=964092\n// to be filed for opera\nthis._remoteDataChannels=[];this._localDataChannels=[];this._candidateBuffer=[];}util.inherits(PeerConnection,WildEmitter);Object.defineProperty(PeerConnection.prototype,'signalingState',{get:function get(){return this.pc.signalingState;}});Object.defineProperty(PeerConnection.prototype,'iceConnectionState',{get:function get(){return this.pc.iceConnectionState;}});PeerConnection.prototype._role=function(){return this.isInitiator?'initiator':'responder';};// Add a stream to the peer connection object\nPeerConnection.prototype.addStream=function(stream){this.localStream=stream;this.pc.addStream(stream);};// helper function to check if a remote candidate is a stun/relay\n// candidate or an ipv6 candidate\nPeerConnection.prototype._checkLocalCandidate=function(candidate){var cand=SJJ.toCandidateJSON(candidate);if(cand.type=='srflx'){this.hadLocalStunCandidate=true;}else if(cand.type=='relay'){this.hadLocalRelayCandidate=true;}if(cand.ip.indexOf(':')!=-1){this.hadLocalIPv6Candidate=true;}};// helper function to check if a remote candidate is a stun/relay\n// candidate or an ipv6 candidate\nPeerConnection.prototype._checkRemoteCandidate=function(candidate){var cand=SJJ.toCandidateJSON(candidate);if(cand.type=='srflx'){this.hadRemoteStunCandidate=true;}else if(cand.type=='relay'){this.hadRemoteRelayCandidate=true;}if(cand.ip.indexOf(':')!=-1){this.hadRemoteIPv6Candidate=true;}};// Init and add ice candidate object with correct constructor\nPeerConnection.prototype.processIce=function(update,cb){cb=cb||function(){};var self=this;// ignore any added ice candidates to avoid errors. why does the\n// spec not do this?\nif(this.pc.signalingState==='closed')return cb();if(update.contents||update.jingle&&update.jingle.contents){var contentNames=this.remoteDescription.contents.map(function(c){return c.name;});var contents=update.contents||update.jingle.contents;contents.forEach(function(content){var transport=content.transport||{};var candidates=transport.candidates||[];var mline=contentNames.indexOf(content.name);var mid=content.name;var remoteContent=self.remoteDescription.contents.find(function(c){return c.name===content.name;});// process candidates as a callback, in case we need to\n// update ufrag and pwd with offer/answer\nvar processCandidates=function processCandidates(){candidates.forEach(function(candidate){var iceCandidate=SJJ.toCandidateSDP(candidate);self.pc.addIceCandidate(new RTCIceCandidate({candidate:iceCandidate,sdpMLineIndex:mline,sdpMid:mid}),function(){// well, this success callback is pretty meaningless\n},function(err){self.emit('error',err);});self._checkRemoteCandidate(iceCandidate);});cb();};if(self.iceCredentials.remote[content.name]&&transport.ufrag&&self.iceCredentials.remote[content.name].ufrag!==transport.ufrag){if(remoteContent){remoteContent.transport.ufrag=transport.ufrag;remoteContent.transport.pwd=transport.pwd;var offer={type:'offer',jingle:self.remoteDescription};offer.sdp=SJJ.toSessionSDP(offer.jingle,{sid:self.config.sdpSessionID,role:self._role(),direction:'incoming'});self.pc.setRemoteDescription(new RTCSessionDescription(offer),function(){processCandidates();},function(err){self.emit('error',err);});}else{self.emit('error','ice restart failed to find matching content');}}else{processCandidates();}});}else{// working around https://code.google.com/p/webrtc/issues/detail?id=3669\nif(update.candidate&&update.candidate.candidate.indexOf('a=')!==0){update.candidate.candidate='a='+update.candidate.candidate;}if(this.wtFirefox&&this.firefoxcandidatebuffer!==null){// we cant add this yet due to https://bugzilla.mozilla.org/show_bug.cgi?id=1087551\nif(this.pc.localDescription&&this.pc.localDescription.type==='offer'){this.firefoxcandidatebuffer.push(update.candidate);return cb();}}self.pc.addIceCandidate(new RTCIceCandidate(update.candidate),function(){},function(err){self.emit('error',err);});self._checkRemoteCandidate(update.candidate.candidate);cb();}};// Generate and emit an offer with the given constraints\nPeerConnection.prototype.offer=function(constraints,cb){var self=this;var hasConstraints=arguments.length===2;var mediaConstraints=hasConstraints&&constraints?constraints:{offerToReceiveAudio:1,offerToReceiveVideo:1};cb=hasConstraints?cb:constraints;cb=cb||function(){};if(this.pc.signalingState==='closed')return cb('Already closed');///MLUpdate\n//RTCOfferOptions doesn'y work in Safari. Using transceivers instead\nvar ua=navigator.userAgent.toLowerCase();if(ua.indexOf('safari')!=-1){if(ua.indexOf('chrome')>-1){}else{this.pc.addTransceiver('audio');this.pc.addTransceiver('video');}}///MLUpdate\n// Actually generate the offer\nthis.pc.createOffer(function(offer){// does not work for jingle, but jingle.js doesn't need\n// this hack...\nvar expandedOffer={type:'offer',sdp:offer.sdp};if(self.assumeSetLocalSuccess){self.emit('offer',expandedOffer);cb(null,expandedOffer);}self._candidateBuffer=[];self.pc.setLocalDescription(offer,function(){var jingle;if(self.config.useJingle){jingle=SJJ.toSessionJSON(offer.sdp,{role:self._role(),direction:'outgoing'});jingle.sid=self.config.sid;self.localDescription=jingle;// Save ICE credentials\njingle.contents.forEach(function(content){var transport=content.transport||{};if(transport.ufrag){self.iceCredentials.local[content.name]={ufrag:transport.ufrag,pwd:transport.pwd};}});expandedOffer.jingle=jingle;}expandedOffer.sdp.split('\\r\\n').forEach(function(line){if(line.indexOf('a=candidate:')===0){self._checkLocalCandidate(line);}});if(!self.assumeSetLocalSuccess){//Trickle encoders\nif(self.vidEncoder&&self.vidEncoder.toUpperCase()!='VP8'){//Find codec id\nvar strCodecId='';var nFound=-1;var nFound=expandedOffer.sdp.indexOf(self.vidEncoder.toUpperCase());if(nFound==-1)nFound=expandedOffer.sdp.indexOf(self.vidEncoder.toLowerCase());if(nFound!=-1){var strCodecId=expandedOffer.sdp.substr(nFound-10,10);nFound=strCodecId.indexOf(':');if(nFound!=-1){strCodecId=strCodecId.substr(nFound+1,strCodecId.length-nFound);strCodecId=strCodecId.replace(' ','');}}if(strCodecId){//Find codecs string\nvar nFound=expandedOffer.sdp.indexOf('m=video');if(nFound!=-1){var strBegin=expandedOffer.sdp.substr(0,nFound);var strSDP=expandedOffer.sdp.substr(nFound,expandedOffer.sdp.length-nFound);nFound=strSDP.indexOf('\\r\\n');var strEnd=strSDP.substr(nFound,strSDP.length-nFound);strSDP=strSDP.substr(0,nFound);var strSAVPF='SAVPF';nFound=strSDP.indexOf(strSAVPF);if(nFound==-1){strSAVPF=strSAVPF.toLowerCase();nFound=strSDP.indexOf(strSAVPF);}if(nFound!=-1){//Modify codecs string\nstrSDP=strSDP.replace(strCodecId+' ','');strSDP=strSDP.replace('SAVPF','SAVPF '+strCodecId);expandedOffer.sdp=strBegin+strSDP+strEnd;}}}}if(self.audEncoder&&self.audEncoder.toUpperCase()!='OPUS'){//Find codec id\nvar strCodecId='';var nFound=-1;var nFound=expandedOffer.sdp.indexOf(self.audEncoder.toUpperCase());if(nFound==-1)nFound=expandedOffer.sdp.indexOf(self.audEncoder.toLowerCase());if(nFound!=-1){var strCodecId=expandedOffer.sdp.substr(nFound-10,10);nFound=strCodecId.indexOf(':');if(nFound!=-1){strCodecId=strCodecId.substr(nFound+1,strCodecId.length-nFound);strCodecId=strCodecId.replace(' ','');}}if(strCodecId){//Find codecs string\nvar nFound=expandedOffer.sdp.indexOf('m=audio');if(nFound!=-1){var strBegin=expandedOffer.sdp.substr(0,nFound);var strSDP=expandedOffer.sdp.substr(nFound,expandedOffer.sdp.length-nFound);nFound=strSDP.indexOf('\\r\\n');var strEnd=strSDP.substr(nFound,strSDP.length-nFound);strSDP=strSDP.substr(0,nFound);var strSAVPF='SAVPF';nFound=strSDP.indexOf(strSAVPF);if(nFound==-1){strSAVPF=strSAVPF.toLowerCase();nFound=strSDP.indexOf(strSAVPF);}if(nFound!=-1){//Modify codecs string\nstrSDP=strSDP.replace(strCodecId+' ','');strSDP=strSDP.replace('SAVPF','SAVPF '+strCodecId);expandedOffer.sdp=strBegin+strSDP+strEnd;}}}}if(self.audBitrate&&self.audBitrate.toLowerCase()!='default'){var audBitrate=parseInt(self.audBitrate);if(audBitrate>0){if(self.audBitrate.includes(\"K\")||self.audBitrate.includes(\"k\"))audBitrate=audBitrate*1000;if(self.audBitrate.includes(\"M\")||self.audBitrate.includes(\"M\"))audBitrate=audBitrate*1000000;expandedOffer.sdp=expandedOffer.sdp.replace(/a=fmtp:111 minptime=10;useinbandfec=1\\r\\n/g,'a=fmtp:111 minptime=10;useinbandfec=1;maxplaybackrate=48000;sprop-maxcapturerate=48000;maxaveragebitrate='+audBitrate+';sprop-stereo=1;stereo=1\\r\\n');}}if(self.vidBitrate&&self.vidBitrate.toLowerCase()!='default'){var vidBitrate=parseInt(self.vidBitrate);if(vidBitrate>0){if(self.vidBitrate.includes(\"K\")||self.vidBitrate.includes(\"k\"))vidBitrate=vidBitrate*1000;if(self.vidBitrate.includes(\"M\")||self.vidBitrate.includes(\"M\"))vidBitrate=vidBitrate*1000000;expandedOffer.sdp=expandedOffer.sdp.replace(/a=mid:video\\r\\n/g,'a=mid:video\\r\\nb=AS:'+vidBitrate/1000+'\\r\\n');}}self.emit('offer',expandedOffer);cb(null,expandedOffer);}},function(err){self.emit('error',err);cb(err);});},function(err){self.emit('error',err);cb(err);},mediaConstraints);};// Process an incoming offer so that ICE may proceed before deciding\n// to answer the request.\nPeerConnection.prototype.handleOffer=function(offer,cb){cb=cb||function(){};var self=this;offer.type='offer';if(offer.jingle){if(this.enableChromeNativeSimulcast){offer.jingle.contents.forEach(function(content){if(content.name==='video'){content.application.googConferenceFlag=true;}});}if(this.enableMultiStreamHacks){// add a mixed video stream as first stream\noffer.jingle.contents.forEach(function(content){if(content.name==='video'){var sources=content.application.sources||[];if(sources.length===0||sources[0].ssrc!==\"3735928559\"){sources.unshift({ssrc:\"3735928559\",// 0xdeadbeef\nparameters:[{key:\"cname\",value:\"deadbeef\"},{key:\"msid\",value:\"mixyourfecintothis please\"}]});content.application.sources=sources;}}});}if(self.restrictBandwidth>0){if(offer.jingle.contents.length>=2&&offer.jingle.contents[1].name==='video'){var content=offer.jingle.contents[1];var hasBw=content.application&&content.application.bandwidth&&content.application.bandwidth.bandwidth;if(!hasBw){offer.jingle.contents[1].application.bandwidth={type:'AS',bandwidth:self.restrictBandwidth.toString()};offer.sdp=SJJ.toSessionSDP(offer.jingle,{sid:self.config.sdpSessionID,role:self._role(),direction:'outgoing'});}}}// Save ICE credentials\noffer.jingle.contents.forEach(function(content){var transport=content.transport||{};if(transport.ufrag){self.iceCredentials.remote[content.name]={ufrag:transport.ufrag,pwd:transport.pwd};}});offer.sdp=SJJ.toSessionSDP(offer.jingle,{sid:self.config.sdpSessionID,role:self._role(),direction:'incoming'});self.remoteDescription=offer.jingle;}offer.sdp.split('\\r\\n').forEach(function(line){if(line.indexOf('a=candidate:')===0){self._checkRemoteCandidate(line);}});self.pc.setRemoteDescription(new RTCSessionDescription(offer),function(){cb();},cb);};// Answer an offer with audio only\nPeerConnection.prototype.answerAudioOnly=function(cb){var mediaConstraints={mandatory:{OfferToReceiveAudio:true,OfferToReceiveVideo:false}};this._answer(mediaConstraints,cb);};// Answer an offer without offering to recieve\nPeerConnection.prototype.answerBroadcastOnly=function(cb){var mediaConstraints={mandatory:{OfferToReceiveAudio:false,OfferToReceiveVideo:false}};this._answer(mediaConstraints,cb);};// Answer an offer with given constraints default is audio/video\nPeerConnection.prototype.answer=function(constraints,cb){var hasConstraints=arguments.length===2;var callback=hasConstraints?cb:constraints;var mediaConstraints=hasConstraints&&constraints?constraints:{mandatory:{OfferToReceiveAudio:true,OfferToReceiveVideo:true}};this._answer(mediaConstraints,callback);};// Process an answer\nPeerConnection.prototype.handleAnswer=function(answer,cb){cb=cb||function(){};var self=this;if(answer.jingle){answer.sdp=SJJ.toSessionSDP(answer.jingle,{sid:self.config.sdpSessionID,role:self._role(),direction:'incoming'});self.remoteDescription=answer.jingle;// Save ICE credentials\nanswer.jingle.contents.forEach(function(content){var transport=content.transport||{};if(transport.ufrag){self.iceCredentials.remote[content.name]={ufrag:transport.ufrag,pwd:transport.pwd};}});}answer.sdp.split('\\r\\n').forEach(function(line){if(line.indexOf('a=candidate:')===0){self._checkRemoteCandidate(line);}});self.pc.setRemoteDescription(new RTCSessionDescription(answer),function(){if(self.wtFirefox){window.setTimeout(function(){self.firefoxcandidatebuffer.forEach(function(candidate){// add candidates later\nself.pc.addIceCandidate(new RTCIceCandidate(candidate),function(){},function(err){self.emit('error',err);});self._checkRemoteCandidate(candidate.candidate);});self.firefoxcandidatebuffer=null;},self.wtFirefox);}cb(null);},cb);};// Close the peer connection\nPeerConnection.prototype.close=function(){if(this._localDataChannels&&this._localDataChannels.length>0){for(var z=0;z<this._localDataChannels.length;z++){this._localDataChannels[z].close();}}if(this._remoteDataChannels&&this._remoteDataChannels.length>0){for(var z=0;z<this._remoteDataChannels.length;z++){this._remoteDataChannels[z].close();}}// proxy some events directly\nthis.pc.onremovestream=null;this.pc.onremovetrack=null;this.pc.onaddstream=null;this.pc.onnegotiationneeded=null;this.pc.oniceconnectionstatechange=null;this.pc.onsignalingstatechange=null;// handle ice candidate and data channel events\nthis.pc.onicecandidate=null;this.pc.ondatachannel=null;this.pc.close();this._localDataChannels=[];this._remoteDataChannels=[];this.emit('close');};// Internal code sharing for various types of answer methods\nPeerConnection.prototype._answer=function(constraints,cb){cb=cb||function(){};var self=this;if(!this.pc.remoteDescription){// the old API is used, call handleOffer\nthrow new Error('remoteDescription not set');}if(this.pc.signalingState==='closed')return cb('Already closed');self.pc.createAnswer(function(answer){var sim=[];if(self.enableChromeNativeSimulcast){// native simulcast part 1: add another SSRC\nanswer.jingle=SJJ.toSessionJSON(answer.sdp,{role:self._role(),direction:'outgoing'});if(answer.jingle.contents.length>=2&&answer.jingle.contents[1].name==='video'){var groups=answer.jingle.contents[1].application.sourceGroups||[];var hasSim=false;groups.forEach(function(group){if(group.semantics=='SIM')hasSim=true;});if(!hasSim&&answer.jingle.contents[1].application.sources.length){var newssrc=JSON.parse(JSON.stringify(answer.jingle.contents[1].application.sources[0]));newssrc.ssrc=''+Math.floor(Math.random()*0xffffffff);// FIXME: look for conflicts\nanswer.jingle.contents[1].application.sources.push(newssrc);sim.push(answer.jingle.contents[1].application.sources[0].ssrc);sim.push(newssrc.ssrc);groups.push({semantics:'SIM',sources:sim});// also create an RTX one for the SIM one\nvar rtxssrc=JSON.parse(JSON.stringify(newssrc));rtxssrc.ssrc=''+Math.floor(Math.random()*0xffffffff);// FIXME: look for conflicts\nanswer.jingle.contents[1].application.sources.push(rtxssrc);groups.push({semantics:'FID',sources:[newssrc.ssrc,rtxssrc.ssrc]});answer.jingle.contents[1].application.sourceGroups=groups;answer.sdp=SJJ.toSessionSDP(answer.jingle,{sid:self.config.sdpSessionID,role:self._role(),direction:'outgoing'});}}}if(self.audBitrate&&self.audBitrate>0)answer.sdp=answer.sdp.replace(/a=fmtp:111 minptime=10;useinbandfec=1\\r\\n/g,'a=fmtp:111 minptime=10;useinbandfec=1;maxplaybackrate=48000;sprop-maxcapturerate=48000;maxaveragebitrate='+self.audBitrate+';sprop-stereo=1;stereo=1\\r\\n');if(self.vidBitrate&&self.vidBitrate>0)answer.sdp=answer.sdp.replace(/a=mid:video\\r\\n/g,'a=mid:video\\r\\nb=AS:'+self.vidBitrate/1000+'\\r\\n');var expandedAnswer={type:'answer',sdp:answer.sdp};if(self.assumeSetLocalSuccess){// not safe to do when doing simulcast mangling\nvar copy=cloneDeep(expandedAnswer);self.emit('answer',copy);cb(null,copy);}self._candidateBuffer=[];self.pc.setLocalDescription(answer,function(){if(self.config.useJingle){var jingle=SJJ.toSessionJSON(answer.sdp,{role:self._role(),direction:'outgoing'});jingle.sid=self.config.sid;self.localDescription=jingle;expandedAnswer.jingle=jingle;}if(self.enableChromeNativeSimulcast){// native simulcast part 2:\n// signal multiple tracks to the receiver\n// for anything in the SIM group\nif(!expandedAnswer.jingle){expandedAnswer.jingle=SJJ.toSessionJSON(answer.sdp,{role:self._role(),direction:'outgoing'});}expandedAnswer.jingle.contents[1].application.sources.forEach(function(source,idx){// the floor idx/2 is a hack that relies on a particular order\n// of groups, alternating between sim and rtx\nsource.parameters=source.parameters.map(function(parameter){if(parameter.key==='msid'){parameter.value+='-'+Math.floor(idx/2);}return parameter;});});expandedAnswer.sdp=SJJ.toSessionSDP(expandedAnswer.jingle,{sid:self.sdpSessionID,role:self._role(),direction:'outgoing'});}expandedAnswer.sdp.split('\\r\\n').forEach(function(line){if(line.indexOf('a=candidate:')===0){self._checkLocalCandidate(line);}});if(!self.assumeSetLocalSuccess){var copy=cloneDeep(expandedAnswer);self.emit('answer',copy);cb(null,copy);}},function(err){self.emit('error',err);cb(err);});},function(err){self.emit('error',err);cb(err);},constraints);};// Internal method for emitting ice candidates on our peer object\nPeerConnection.prototype._onIce=function(event){var self=this;if(event.candidate){if(this.dontSignalCandidates)return;var ice=event.candidate;var expandedCandidate={candidate:{candidate:ice.candidate,sdpMid:ice.sdpMid,sdpMLineIndex:ice.sdpMLineIndex}};this._checkLocalCandidate(ice.candidate);var cand=SJJ.toCandidateJSON(ice.candidate);var already;var idx;if(this.eliminateDuplicateCandidates&&cand.type==='relay'){// drop candidates with same foundation, component\n// take local type pref into account so we don't ignore udp\n// ones when we know about a TCP one. unlikely but...\nalready=this._candidateBuffer.filter(function(c){return c.type==='relay';}).map(function(c){return c.foundation+':'+c.component;});idx=already.indexOf(cand.foundation+':'+cand.component);// remember: local type pref of udp is 0, tcp 1, tls 2\nif(idx>-1&&cand.priority>>24>=already[idx].priority>>24){// drop it, same foundation with higher (worse) type pref\nreturn;}}if(this.config.bundlePolicy==='max-bundle'){// drop candidates which are duplicate for audio/video/data\n// duplicate means same host/port but different sdpMid\nalready=this._candidateBuffer.filter(function(c){return cand.type===c.type;}).map(function(cand){return cand.address+':'+cand.port;});idx=already.indexOf(cand.address+':'+cand.port);if(idx>-1)return;}// also drop rtcp candidates since we know the peer supports RTCP-MUX\n// this is a workaround until browsers implement this natively\nif(this.config.rtcpMuxPolicy==='require'&&cand.component==='2'){return;}this._candidateBuffer.push(cand);if(self.config.useJingle){if(!ice.sdpMid){// firefox doesn't set this\nif(self.pc.remoteDescription&&self.pc.remoteDescription.type==='offer'){// preserve name from remote\nice.sdpMid=self.remoteDescription.contents[ice.sdpMLineIndex].name;}else{ice.sdpMid=self.localDescription.contents[ice.sdpMLineIndex].name;}}if(!self.iceCredentials.local[ice.sdpMid]){var jingle=SJJ.toSessionJSON(self.pc.localDescription.sdp,{role:self._role(),direction:'outgoing'});jingle.contents.forEach(function(content){var transport=content.transport||{};if(transport.ufrag){self.iceCredentials.local[content.name]={ufrag:transport.ufrag,pwd:transport.pwd};}});}expandedCandidate.jingle={contents:[{name:ice.sdpMid,creator:self._role(),transport:{transportType:'iceUdp',ufrag:self.iceCredentials.local[ice.sdpMid].ufrag,pwd:self.iceCredentials.local[ice.sdpMid].pwd,candidates:[cand]}}]};if(self.batchIceCandidates>0){if(self.batchedIceCandidates.length===0){window.setTimeout(function(){var contents={};self.batchedIceCandidates.forEach(function(content){content=content.contents[0];if(!contents[content.name])contents[content.name]=content;contents[content.name].transport.candidates.push(content.transport.candidates[0]);});var newCand={jingle:{contents:[]}};Object.keys(contents).forEach(function(name){newCand.jingle.contents.push(contents[name]);});self.batchedIceCandidates=[];self.emit('ice',newCand);},self.batchIceCandidates);}self.batchedIceCandidates.push(expandedCandidate.jingle);return;}}this.emit('ice',expandedCandidate);}else{this.emit('endOfCandidates');}};// Internal method for processing a new data channel being added by the\n// other peer.\nPeerConnection.prototype._onDataChannel=function(event){// make sure we keep a reference so this doesn't get garbage collected\nvar channel=event.channel;this._remoteDataChannels.push(channel);this.emit('addChannel',channel);};// Create a data channel spec reference:\n// http://dev.w3.org/2011/webrtc/editor/webrtc.html#idl-def-RTCDataChannelInit\nPeerConnection.prototype.createDataChannel=function(name,opts){var channel=this.pc.createDataChannel(name,opts);// make sure we keep a reference so this doesn't get garbage collected\nthis._localDataChannels.push(channel);return channel;};PeerConnection.prototype.getStats=function(){if(typeof arguments[0]==='function'){var cb=arguments[0];this.pc.getStats().then(function(res){cb(null,res);},function(err){cb(err);});}else{return this.pc.getStats.apply(this.pc,arguments);}};module.exports=PeerConnection;},{\"lodash.clonedeep\":45,\"sdp-jingle-json\":54,\"util\":73,\"wildemitter\":75}],54:[function(require,module,exports){var toSDP=require('./lib/tosdp');var toJSON=require('./lib/tojson');// Converstion from JSON to SDP\nexports.toIncomingSDPOffer=function(session){return toSDP.toSessionSDP(session,{role:'responder',direction:'incoming'});};exports.toOutgoingSDPOffer=function(session){return toSDP.toSessionSDP(session,{role:'initiator',direction:'outgoing'});};exports.toIncomingSDPAnswer=function(session){return toSDP.toSessionSDP(session,{role:'initiator',direction:'incoming'});};exports.toOutgoingSDPAnswer=function(session){return toSDP.toSessionSDP(session,{role:'responder',direction:'outgoing'});};exports.toIncomingMediaSDPOffer=function(media){return toSDP.toMediaSDP(media,{role:'responder',direction:'incoming'});};exports.toOutgoingMediaSDPOffer=function(media){return toSDP.toMediaSDP(media,{role:'initiator',direction:'outgoing'});};exports.toIncomingMediaSDPAnswer=function(media){return toSDP.toMediaSDP(media,{role:'initiator',direction:'incoming'});};exports.toOutgoingMediaSDPAnswer=function(media){return toSDP.toMediaSDP(media,{role:'responder',direction:'outgoing'});};exports.toCandidateSDP=toSDP.toCandidateSDP;exports.toMediaSDP=toSDP.toMediaSDP;exports.toSessionSDP=toSDP.toSessionSDP;// Conversion from SDP to JSON\nexports.toIncomingJSONOffer=function(sdp,creators){return toJSON.toSessionJSON(sdp,{role:'responder',direction:'incoming',creators:creators});};exports.toOutgoingJSONOffer=function(sdp,creators){return toJSON.toSessionJSON(sdp,{role:'initiator',direction:'outgoing',creators:creators});};exports.toIncomingJSONAnswer=function(sdp,creators){return toJSON.toSessionJSON(sdp,{role:'initiator',direction:'incoming',creators:creators});};exports.toOutgoingJSONAnswer=function(sdp,creators){return toJSON.toSessionJSON(sdp,{role:'responder',direction:'outgoing',creators:creators});};exports.toIncomingMediaJSONOffer=function(sdp,creator){return toJSON.toMediaJSON(sdp,{role:'responder',direction:'incoming',creator:creator});};exports.toOutgoingMediaJSONOffer=function(sdp,creator){return toJSON.toMediaJSON(sdp,{role:'initiator',direction:'outgoing',creator:creator});};exports.toIncomingMediaJSONAnswer=function(sdp,creator){return toJSON.toMediaJSON(sdp,{role:'initiator',direction:'incoming',creator:creator});};exports.toOutgoingMediaJSONAnswer=function(sdp,creator){return toJSON.toMediaJSON(sdp,{role:'responder',direction:'outgoing',creator:creator});};exports.toCandidateJSON=toJSON.toCandidateJSON;exports.toMediaJSON=toJSON.toMediaJSON;exports.toSessionJSON=toJSON.toSessionJSON;},{\"./lib/tojson\":57,\"./lib/tosdp\":58}],55:[function(require,module,exports){exports.lines=function(sdp){return sdp.split('\\r\\n').filter(function(line){return line.length>0;});};exports.findLine=function(prefix,mediaLines,sessionLines){var prefixLength=prefix.length;for(var i=0;i<mediaLines.length;i++){if(mediaLines[i].substr(0,prefixLength)===prefix){return mediaLines[i];}}// Continue searching in parent session section\nif(!sessionLines){return false;}for(var j=0;j<sessionLines.length;j++){if(sessionLines[j].substr(0,prefixLength)===prefix){return sessionLines[j];}}return false;};exports.findLines=function(prefix,mediaLines,sessionLines){var results=[];var prefixLength=prefix.length;for(var i=0;i<mediaLines.length;i++){if(mediaLines[i].substr(0,prefixLength)===prefix){results.push(mediaLines[i]);}}if(results.length||!sessionLines){return results;}for(var j=0;j<sessionLines.length;j++){if(sessionLines[j].substr(0,prefixLength)===prefix){results.push(sessionLines[j]);}}return results;};exports.mline=function(line){var parts=line.substr(2).split(' ');var parsed={media:parts[0],port:parts[1],proto:parts[2],formats:[]};for(var i=3;i<parts.length;i++){if(parts[i]){parsed.formats.push(parts[i]);}}return parsed;};exports.rtpmap=function(line){var parts=line.substr(9).split(' ');var parsed={id:parts.shift()};parts=parts[0].split('/');parsed.name=parts[0];parsed.clockrate=parts[1];parsed.channels=parts.length==3?parts[2]:'1';return parsed;};exports.sctpmap=function(line){// based on -05 draft\nvar parts=line.substr(10).split(' ');var parsed={number:parts.shift(),protocol:parts.shift(),streams:parts.shift()};return parsed;};exports.fmtp=function(line){var kv,key,value;var parts=line.substr(line.indexOf(' ')+1).split(';');var parsed=[];for(var i=0;i<parts.length;i++){kv=parts[i].split('=');key=kv[0].trim();value=kv[1];if(key&&value){parsed.push({key:key,value:value});}else if(key){parsed.push({key:'',value:key});}}return parsed;};exports.crypto=function(line){var parts=line.substr(9).split(' ');var parsed={tag:parts[0],cipherSuite:parts[1],keyParams:parts[2],sessionParams:parts.slice(3).join(' ')};return parsed;};exports.fingerprint=function(line){var parts=line.substr(14).split(' ');return{hash:parts[0],value:parts[1]};};exports.extmap=function(line){var parts=line.substr(9).split(' ');var parsed={};var idpart=parts.shift();var sp=idpart.indexOf('/');if(sp>=0){parsed.id=idpart.substr(0,sp);parsed.senders=idpart.substr(sp+1);}else{parsed.id=idpart;parsed.senders='sendrecv';}parsed.uri=parts.shift()||'';return parsed;};exports.rtcpfb=function(line){var parts=line.substr(10).split(' ');var parsed={};parsed.id=parts.shift();parsed.type=parts.shift();if(parsed.type==='trr-int'){parsed.value=parts.shift();}else{parsed.subtype=parts.shift()||'';}parsed.parameters=parts;return parsed;};exports.candidate=function(line){var parts;if(line.indexOf('a=candidate:')===0){parts=line.substring(12).split(' ');}else{// no a=candidate\nparts=line.substring(10).split(' ');}var candidate={foundation:parts[0],component:parts[1],protocol:parts[2].toLowerCase(),priority:parts[3],ip:parts[4],port:parts[5],// skip parts[6] == 'typ'\ntype:parts[7],generation:'0'};for(var i=8;i<parts.length;i+=2){if(parts[i]==='raddr'){candidate.relAddr=parts[i+1];}else if(parts[i]==='rport'){candidate.relPort=parts[i+1];}else if(parts[i]==='generation'){candidate.generation=parts[i+1];}else if(parts[i]==='tcptype'){candidate.tcpType=parts[i+1];}}candidate.network='1';return candidate;};exports.sourceGroups=function(lines){var parsed=[];for(var i=0;i<lines.length;i++){var parts=lines[i].substr(13).split(' ');parsed.push({semantics:parts.shift(),sources:parts});}return parsed;};exports.sources=function(lines){// http://tools.ietf.org/html/rfc5576\nvar parsed=[];var sources={};for(var i=0;i<lines.length;i++){var parts=lines[i].substr(7).split(' ');var ssrc=parts.shift();if(!sources[ssrc]){var source={ssrc:ssrc,parameters:[]};parsed.push(source);// Keep an index\nsources[ssrc]=source;}parts=parts.join(' ').split(':');var attribute=parts.shift();var value=parts.join(':')||null;sources[ssrc].parameters.push({key:attribute,value:value});}return parsed;};exports.groups=function(lines){// http://tools.ietf.org/html/rfc5888\nvar parsed=[];var parts;for(var i=0;i<lines.length;i++){parts=lines[i].substr(8).split(' ');parsed.push({semantics:parts.shift(),contents:parts});}return parsed;};exports.bandwidth=function(line){var parts=line.substr(2).split(':');var parsed={};parsed.type=parts.shift();parsed.bandwidth=parts.shift();return parsed;};exports.msid=function(line){var data=line.substr(7);var parts=data.split(' ');return{msid:data,mslabel:parts[0],label:parts[1]};};},{}],56:[function(require,module,exports){module.exports={initiator:{incoming:{initiator:'recvonly',responder:'sendonly',both:'sendrecv',none:'inactive',recvonly:'initiator',sendonly:'responder',sendrecv:'both',inactive:'none'},outgoing:{initiator:'sendonly',responder:'recvonly',both:'sendrecv',none:'inactive',recvonly:'responder',sendonly:'initiator',sendrecv:'both',inactive:'none'}},responder:{incoming:{initiator:'sendonly',responder:'recvonly',both:'sendrecv',none:'inactive',recvonly:'responder',sendonly:'initiator',sendrecv:'both',inactive:'none'},outgoing:{initiator:'recvonly',responder:'sendonly',both:'sendrecv',none:'inactive',recvonly:'initiator',sendonly:'responder',sendrecv:'both',inactive:'none'}}};},{}],57:[function(require,module,exports){var SENDERS=require('./senders');var parsers=require('./parsers');var idCounter=Math.random();exports._setIdCounter=function(counter){idCounter=counter;};exports.toSessionJSON=function(sdp,opts){var i;var creators=opts.creators||[];var role=opts.role||'initiator';var direction=opts.direction||'outgoing';// Divide the SDP into session and media sections.\nvar media=sdp.split('\\r\\nm=');for(i=1;i<media.length;i++){media[i]='m='+media[i];if(i!==media.length-1){media[i]+='\\r\\n';}}var session=media.shift()+'\\r\\n';var sessionLines=parsers.lines(session);var parsed={};var contents=[];for(i=0;i<media.length;i++){contents.push(exports.toMediaJSON(media[i],session,{role:role,direction:direction,creator:creators[i]||'initiator'}));}parsed.contents=contents;var groupLines=parsers.findLines('a=group:',sessionLines);if(groupLines.length){parsed.groups=parsers.groups(groupLines);}return parsed;};exports.toMediaJSON=function(media,session,opts){var creator=opts.creator||'initiator';var role=opts.role||'initiator';var direction=opts.direction||'outgoing';var lines=parsers.lines(media);var sessionLines=parsers.lines(session);var mline=parsers.mline(lines[0]);var content={creator:creator,name:mline.media,application:{applicationType:'rtp',media:mline.media,payloads:[],encryption:[],feedback:[],headerExtensions:[]},transport:{transportType:'iceUdp',candidates:[],fingerprints:[]}};if(mline.media=='application'){// FIXME: the description is most likely to be independent\n// of the SDP and should be processed by other parts of the library\ncontent.application={applicationType:'datachannel'};content.transport.sctp=[];}var desc=content.application;var trans=content.transport;// If we have a mid, use that for the content name instead.\nvar mid=parsers.findLine('a=mid:',lines);if(mid){content.name=mid.substr(6);}if(parsers.findLine('a=sendrecv',lines,sessionLines)){content.senders='both';}else if(parsers.findLine('a=sendonly',lines,sessionLines)){content.senders=SENDERS[role][direction].sendonly;}else if(parsers.findLine('a=recvonly',lines,sessionLines)){content.senders=SENDERS[role][direction].recvonly;}else if(parsers.findLine('a=inactive',lines,sessionLines)){content.senders='none';}if(desc.applicationType=='rtp'){var bandwidth=parsers.findLine('b=',lines);if(bandwidth){desc.bandwidth=parsers.bandwidth(bandwidth);}var ssrc=parsers.findLine('a=ssrc:',lines);if(ssrc){desc.ssrc=ssrc.substr(7).split(' ')[0];}var rtpmapLines=parsers.findLines('a=rtpmap:',lines);rtpmapLines.forEach(function(line){var payload=parsers.rtpmap(line);payload.parameters=[];payload.feedback=[];var fmtpLines=parsers.findLines('a=fmtp:'+payload.id,lines);// There should only be one fmtp line per payload\nfmtpLines.forEach(function(line){payload.parameters=parsers.fmtp(line);});var fbLines=parsers.findLines('a=rtcp-fb:'+payload.id,lines);fbLines.forEach(function(line){payload.feedback.push(parsers.rtcpfb(line));});desc.payloads.push(payload);});var cryptoLines=parsers.findLines('a=crypto:',lines,sessionLines);cryptoLines.forEach(function(line){desc.encryption.push(parsers.crypto(line));});if(parsers.findLine('a=rtcp-mux',lines)){desc.mux=true;}var fbLines=parsers.findLines('a=rtcp-fb:*',lines);fbLines.forEach(function(line){desc.feedback.push(parsers.rtcpfb(line));});var extLines=parsers.findLines('a=extmap:',lines);extLines.forEach(function(line){var ext=parsers.extmap(line);ext.senders=SENDERS[role][direction][ext.senders];desc.headerExtensions.push(ext);});var ssrcGroupLines=parsers.findLines('a=ssrc-group:',lines);desc.sourceGroups=parsers.sourceGroups(ssrcGroupLines||[]);var ssrcLines=parsers.findLines('a=ssrc:',lines);var sources=desc.sources=parsers.sources(ssrcLines||[]);var msidLine=parsers.findLine('a=msid:',lines);if(msidLine){var msid=parsers.msid(msidLine);['msid','mslabel','label'].forEach(function(key){for(var i=0;i<sources.length;i++){var found=false;for(var j=0;j<sources[i].parameters.length;j++){if(sources[i].parameters[j].key===key){found=true;}}if(!found){sources[i].parameters.push({key:key,value:msid[key]});}}});}if(parsers.findLine('a=x-google-flag:conference',lines,sessionLines)){desc.googConferenceFlag=true;}}// transport specific attributes\nvar fingerprintLines=parsers.findLines('a=fingerprint:',lines,sessionLines);var setup=parsers.findLine('a=setup:',lines,sessionLines);fingerprintLines.forEach(function(line){var fp=parsers.fingerprint(line);if(setup){fp.setup=setup.substr(8);}trans.fingerprints.push(fp);});var ufragLine=parsers.findLine('a=ice-ufrag:',lines,sessionLines);var pwdLine=parsers.findLine('a=ice-pwd:',lines,sessionLines);if(ufragLine&&pwdLine){trans.ufrag=ufragLine.substr(12);trans.pwd=pwdLine.substr(10);trans.candidates=[];var candidateLines=parsers.findLines('a=candidate:',lines,sessionLines);candidateLines.forEach(function(line){trans.candidates.push(exports.toCandidateJSON(line));});}if(desc.applicationType=='datachannel'){var sctpmapLines=parsers.findLines('a=sctpmap:',lines);sctpmapLines.forEach(function(line){var sctp=parsers.sctpmap(line);trans.sctp.push(sctp);});}return content;};exports.toCandidateJSON=function(line){var candidate=parsers.candidate(line.split('\\r\\n')[0]);candidate.id=(idCounter++).toString(36).substr(0,12);return candidate;};},{\"./parsers\":55,\"./senders\":56}],58:[function(require,module,exports){var SENDERS=require('./senders');exports.toSessionSDP=function(session,opts){var role=opts.role||'initiator';var direction=opts.direction||'outgoing';var sid=opts.sid||session.sid||Date.now();var time=opts.time||Date.now();var sdp=['v=0','o=- '+sid+' '+time+' IN IP4 0.0.0.0','s=-','t=0 0'];var contents=session.contents||[];var hasSources=false;contents.forEach(function(content){if(content.application.sources&&content.application.sources.length){hasSources=true;}});if(hasSources){sdp.push('a=msid-semantic: WMS *');}var groups=session.groups||[];groups.forEach(function(group){sdp.push('a=group:'+group.semantics+' '+group.contents.join(' '));});contents.forEach(function(content){sdp.push(exports.toMediaSDP(content,opts));});return sdp.join('\\r\\n')+'\\r\\n';};exports.toMediaSDP=function(content,opts){var sdp=[];var role=opts.role||'initiator';var direction=opts.direction||'outgoing';var desc=content.application;var transport=content.transport;var payloads=desc.payloads||[];var fingerprints=transport&&transport.fingerprints||[];var mline=[];if(desc.applicationType=='datachannel'){mline.push('application');mline.push('1');mline.push('DTLS/SCTP');if(transport.sctp){transport.sctp.forEach(function(map){mline.push(map.number);});}}else{mline.push(desc.media);mline.push('1');if(fingerprints.length>0){mline.push('UDP/TLS/RTP/SAVPF');}else if(desc.encryption&&desc.encryption.length>0){mline.push('RTP/SAVPF');}else{mline.push('RTP/AVPF');}payloads.forEach(function(payload){mline.push(payload.id);});}sdp.push('m='+mline.join(' '));sdp.push('c=IN IP4 0.0.0.0');if(desc.bandwidth&&desc.bandwidth.type&&desc.bandwidth.bandwidth){sdp.push('b='+desc.bandwidth.type+':'+desc.bandwidth.bandwidth);}if(desc.applicationType=='rtp'){sdp.push('a=rtcp:1 IN IP4 0.0.0.0');}if(transport){if(transport.ufrag){sdp.push('a=ice-ufrag:'+transport.ufrag);}if(transport.pwd){sdp.push('a=ice-pwd:'+transport.pwd);}var pushedSetup=false;fingerprints.forEach(function(fingerprint){sdp.push('a=fingerprint:'+fingerprint.hash+' '+fingerprint.value);if(fingerprint.setup&&!pushedSetup){sdp.push('a=setup:'+fingerprint.setup);}});if(transport.sctp){transport.sctp.forEach(function(map){sdp.push('a=sctpmap:'+map.number+' '+map.protocol+' '+map.streams);});}}if(desc.applicationType=='rtp'){sdp.push('a='+(SENDERS[role][direction][content.senders]||'sendrecv'));}sdp.push('a=mid:'+content.name);if(desc.sources&&desc.sources.length){(desc.sources[0].parameters||[]).forEach(function(param){if(param.key==='msid'){sdp.push('a=msid:'+param.value);}});}if(desc.mux){sdp.push('a=rtcp-mux');}var encryption=desc.encryption||[];encryption.forEach(function(crypto){sdp.push('a=crypto:'+crypto.tag+' '+crypto.cipherSuite+' '+crypto.keyParams+(crypto.sessionParams?' '+crypto.sessionParams:''));});if(desc.googConferenceFlag){sdp.push('a=x-google-flag:conference');}payloads.forEach(function(payload){var rtpmap='a=rtpmap:'+payload.id+' '+payload.name+'/'+payload.clockrate;if(payload.channels&&payload.channels!='1'){rtpmap+='/'+payload.channels;}sdp.push(rtpmap);if(payload.parameters&&payload.parameters.length){var fmtp=['a=fmtp:'+payload.id];var parameters=[];payload.parameters.forEach(function(param){parameters.push((param.key?param.key+'=':'')+param.value);});fmtp.push(parameters.join(';'));sdp.push(fmtp.join(' '));}if(payload.feedback){payload.feedback.forEach(function(fb){if(fb.type==='trr-int'){sdp.push('a=rtcp-fb:'+payload.id+' trr-int '+(fb.value?fb.value:'0'));}else{sdp.push('a=rtcp-fb:'+payload.id+' '+fb.type+(fb.subtype?' '+fb.subtype:''));}});}});if(desc.feedback){desc.feedback.forEach(function(fb){if(fb.type==='trr-int'){sdp.push('a=rtcp-fb:* trr-int '+(fb.value?fb.value:'0'));}else{sdp.push('a=rtcp-fb:* '+fb.type+(fb.subtype?' '+fb.subtype:''));}});}var hdrExts=desc.headerExtensions||[];hdrExts.forEach(function(hdr){sdp.push('a=extmap:'+hdr.id+(hdr.senders?'/'+SENDERS[role][direction][hdr.senders]:'')+' '+hdr.uri);});var ssrcGroups=desc.sourceGroups||[];ssrcGroups.forEach(function(ssrcGroup){sdp.push('a=ssrc-group:'+ssrcGroup.semantics+' '+ssrcGroup.sources.join(' '));});var ssrcs=desc.sources||[];ssrcs.forEach(function(ssrc){for(var i=0;i<ssrc.parameters.length;i++){var param=ssrc.parameters[i];sdp.push('a=ssrc:'+(ssrc.ssrc||desc.ssrc)+' '+param.key+(param.value?':'+param.value:''));}});var candidates=transport.candidates||[];candidates.forEach(function(candidate){sdp.push(exports.toCandidateSDP(candidate));});return sdp.join('\\r\\n');};exports.toCandidateSDP=function(candidate){var sdp=[];sdp.push(candidate.foundation);sdp.push(candidate.component);sdp.push(candidate.protocol.toUpperCase());sdp.push(candidate.priority);sdp.push(candidate.ip);sdp.push(candidate.port);var type=candidate.type;sdp.push('typ');sdp.push(type);if(type==='srflx'||type==='prflx'||type==='relay'){if(candidate.relAddr&&candidate.relPort){sdp.push('raddr');sdp.push(candidate.relAddr);sdp.push('rport');sdp.push(candidate.relPort);}}if(candidate.tcpType&&candidate.protocol.toUpperCase()=='TCP'){sdp.push('tcptype');sdp.push(candidate.tcpType);}sdp.push('generation');sdp.push(candidate.generation||'0');// FIXME: apparently this is wrong per spec\n// but then, we need this when actually putting this into\n// SDP so it's going to stay.\n// decision needs to be revisited when browsers dont\n// accept this any longer\nreturn'a=candidate:'+sdp.join(' ');};},{\"./senders\":56}],59:[function(require,module,exports){/* eslint-env node */'use strict';// SDP helpers.\nvar SDPUtils={};// Generate an alphanumeric identifier for cname or mids.\n// TODO: use UUIDs instead? https://gist.github.com/jed/982883\nSDPUtils.generateIdentifier=function(){return Math.random().toString(36).substr(2,10);};// The RTCP CNAME used by all peerconnections from the same JS.\nSDPUtils.localCName=SDPUtils.generateIdentifier();// Splits SDP into lines, dealing with both CRLF and LF.\nSDPUtils.splitLines=function(blob){return blob.trim().split('\\n').map(function(line){return line.trim();});};// Splits SDP into sessionpart and mediasections. Ensures CRLF.\nSDPUtils.splitSections=function(blob){var parts=blob.split('\\nm=');return parts.map(function(part,index){return(index>0?'m='+part:part).trim()+'\\r\\n';});};// Returns lines that start with a certain prefix.\nSDPUtils.matchPrefix=function(blob,prefix){return SDPUtils.splitLines(blob).filter(function(line){return line.indexOf(prefix)===0;});};// Parses an ICE candidate line. Sample input:\n// candidate:702786350 2 udp 41819902 8.8.8.8 60769 typ relay raddr 8.8.8.8\n// rport 55996\"\nSDPUtils.parseCandidate=function(line){var parts;// Parse both variants.\nif(line.indexOf('a=candidate:')===0){parts=line.substring(12).split(' ');}else{parts=line.substring(10).split(' ');}var candidate={foundation:parts[0],component:parts[1],protocol:parts[2].toLowerCase(),priority:parseInt(parts[3],10),ip:parts[4],port:parseInt(parts[5],10),// skip parts[6] == 'typ'\ntype:parts[7]};for(var i=8;i<parts.length;i+=2){switch(parts[i]){case'raddr':candidate.relatedAddress=parts[i+1];break;case'rport':candidate.relatedPort=parseInt(parts[i+1],10);break;case'tcptype':candidate.tcpType=parts[i+1];break;default:// extension handling, in particular ufrag\ncandidate[parts[i]]=parts[i+1];break;}}return candidate;};// Translates a candidate object into SDP candidate attribute.\nSDPUtils.writeCandidate=function(candidate){var sdp=[];sdp.push(candidate.foundation);sdp.push(candidate.component);sdp.push(candidate.protocol.toUpperCase());sdp.push(candidate.priority);sdp.push(candidate.ip);sdp.push(candidate.port);var type=candidate.type;sdp.push('typ');sdp.push(type);if(type!=='host'&&candidate.relatedAddress&&candidate.relatedPort){sdp.push('raddr');sdp.push(candidate.relatedAddress);// was: relAddr\nsdp.push('rport');sdp.push(candidate.relatedPort);// was: relPort\n}if(candidate.tcpType&&candidate.protocol.toLowerCase()==='tcp'){sdp.push('tcptype');sdp.push(candidate.tcpType);}return'candidate:'+sdp.join(' ');};// Parses an ice-options line, returns an array of option tags.\n// a=ice-options:foo bar\nSDPUtils.parseIceOptions=function(line){return line.substr(14).split(' ');};// Parses an rtpmap line, returns RTCRtpCoddecParameters. Sample input:\n// a=rtpmap:111 opus/48000/2\nSDPUtils.parseRtpMap=function(line){var parts=line.substr(9).split(' ');var parsed={payloadType:parseInt(parts.shift(),10)// was: id\n};parts=parts[0].split('/');parsed.name=parts[0];parsed.clockRate=parseInt(parts[1],10);// was: clockrate\n// was: channels\nparsed.numChannels=parts.length===3?parseInt(parts[2],10):1;return parsed;};// Generate an a=rtpmap line from RTCRtpCodecCapability or\n// RTCRtpCodecParameters.\nSDPUtils.writeRtpMap=function(codec){var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}return'a=rtpmap:'+pt+' '+codec.name+'/'+codec.clockRate+(codec.numChannels!==1?'/'+codec.numChannels:'')+'\\r\\n';};// Parses an a=extmap line (headerextension from RFC 5285). Sample input:\n// a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\n// a=extmap:2/sendonly urn:ietf:params:rtp-hdrext:toffset\nSDPUtils.parseExtmap=function(line){var parts=line.substr(9).split(' ');return{id:parseInt(parts[0],10),direction:parts[0].indexOf('/')>0?parts[0].split('/')[1]:'sendrecv',uri:parts[1]};};// Generates a=extmap line from RTCRtpHeaderExtensionParameters or\n// RTCRtpHeaderExtension.\nSDPUtils.writeExtmap=function(headerExtension){return'a=extmap:'+(headerExtension.id||headerExtension.preferredId)+(headerExtension.direction&&headerExtension.direction!=='sendrecv'?'/'+headerExtension.direction:'')+' '+headerExtension.uri+'\\r\\n';};// Parses an ftmp line, returns dictionary. Sample input:\n// a=fmtp:96 vbr=on;cng=on\n// Also deals with vbr=on; cng=on\nSDPUtils.parseFmtp=function(line){var parsed={};var kv;var parts=line.substr(line.indexOf(' ')+1).split(';');for(var j=0;j<parts.length;j++){kv=parts[j].trim().split('=');parsed[kv[0].trim()]=kv[1];}return parsed;};// Generates an a=ftmp line from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeFmtp=function(codec){var line='';var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.parameters&&Object.keys(codec.parameters).length){var params=[];Object.keys(codec.parameters).forEach(function(param){params.push(param+'='+codec.parameters[param]);});line+='a=fmtp:'+pt+' '+params.join(';')+'\\r\\n';}return line;};// Parses an rtcp-fb line, returns RTCPRtcpFeedback object. Sample input:\n// a=rtcp-fb:98 nack rpsi\nSDPUtils.parseRtcpFb=function(line){var parts=line.substr(line.indexOf(' ')+1).split(' ');return{type:parts.shift(),parameter:parts.join(' ')};};// Generate a=rtcp-fb lines from RTCRtpCodecCapability or RTCRtpCodecParameters.\nSDPUtils.writeRtcpFb=function(codec){var lines='';var pt=codec.payloadType;if(codec.preferredPayloadType!==undefined){pt=codec.preferredPayloadType;}if(codec.rtcpFeedback&&codec.rtcpFeedback.length){// FIXME: special handling for trr-int?\ncodec.rtcpFeedback.forEach(function(fb){lines+='a=rtcp-fb:'+pt+' '+fb.type+(fb.parameter&&fb.parameter.length?' '+fb.parameter:'')+'\\r\\n';});}return lines;};// Parses an RFC 5576 ssrc media attribute. Sample input:\n// a=ssrc:3735928559 cname:something\nSDPUtils.parseSsrcMedia=function(line){var sp=line.indexOf(' ');var parts={ssrc:parseInt(line.substr(7,sp-7),10)};var colon=line.indexOf(':',sp);if(colon>-1){parts.attribute=line.substr(sp+1,colon-sp-1);parts.value=line.substr(colon+1);}else{parts.attribute=line.substr(sp+1);}return parts;};// Extracts the MID (RFC 5888) from a media section.\n// returns the MID or undefined if no mid line was found.\nSDPUtils.getMid=function(mediaSection){var mid=SDPUtils.matchPrefix(mediaSection,'a=mid:')[0];if(mid){return mid.substr(6);}};SDPUtils.parseFingerprint=function(line){var parts=line.substr(14).split(' ');return{algorithm:parts[0].toLowerCase(),// algorithm is case-sensitive in Edge.\nvalue:parts[1]};};// Extracts DTLS parameters from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the fingerprint line as input. See also getIceParameters.\nSDPUtils.getDtlsParameters=function(mediaSection,sessionpart){var lines=SDPUtils.matchPrefix(mediaSection+sessionpart,'a=fingerprint:');// Note: a=setup line is ignored since we use the 'auto' role.\n// Note2: 'algorithm' is not case sensitive except in Edge.\nreturn{role:'auto',fingerprints:lines.map(SDPUtils.parseFingerprint)};};// Serializes DTLS parameters to SDP.\nSDPUtils.writeDtlsParameters=function(params,setupType){var sdp='a=setup:'+setupType+'\\r\\n';params.fingerprints.forEach(function(fp){sdp+='a=fingerprint:'+fp.algorithm+' '+fp.value+'\\r\\n';});return sdp;};// Parses ICE information from SDP media section or sessionpart.\n// FIXME: for consistency with other functions this should only\n//   get the ice-ufrag and ice-pwd lines as input.\nSDPUtils.getIceParameters=function(mediaSection,sessionpart){var lines=SDPUtils.splitLines(mediaSection);// Search in session part, too.\nlines=lines.concat(SDPUtils.splitLines(sessionpart));var iceParameters={usernameFragment:lines.filter(function(line){return line.indexOf('a=ice-ufrag:')===0;})[0].substr(12),password:lines.filter(function(line){return line.indexOf('a=ice-pwd:')===0;})[0].substr(10)};return iceParameters;};// Serializes ICE parameters to SDP.\nSDPUtils.writeIceParameters=function(params){return'a=ice-ufrag:'+params.usernameFragment+'\\r\\n'+'a=ice-pwd:'+params.password+'\\r\\n';};// Parses the SDP media section and returns RTCRtpParameters.\nSDPUtils.parseRtpParameters=function(mediaSection){var description={codecs:[],headerExtensions:[],fecMechanisms:[],rtcp:[]};var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(' ');for(var i=3;i<mline.length;i++){// find all codecs from mline[3..]\nvar pt=mline[i];var rtpmapline=SDPUtils.matchPrefix(mediaSection,'a=rtpmap:'+pt+' ')[0];if(rtpmapline){var codec=SDPUtils.parseRtpMap(rtpmapline);var fmtps=SDPUtils.matchPrefix(mediaSection,'a=fmtp:'+pt+' ');// Only the first a=fmtp:<pt> is considered.\ncodec.parameters=fmtps.length?SDPUtils.parseFmtp(fmtps[0]):{};codec.rtcpFeedback=SDPUtils.matchPrefix(mediaSection,'a=rtcp-fb:'+pt+' ').map(SDPUtils.parseRtcpFb);description.codecs.push(codec);// parse FEC mechanisms from rtpmap lines.\nswitch(codec.name.toUpperCase()){case'RED':case'ULPFEC':description.fecMechanisms.push(codec.name.toUpperCase());break;default:// only RED and ULPFEC are recognized as FEC mechanisms.\nbreak;}}}SDPUtils.matchPrefix(mediaSection,'a=extmap:').forEach(function(line){description.headerExtensions.push(SDPUtils.parseExtmap(line));});// FIXME: parse rtcp.\nreturn description;};// Generates parts of the SDP media section describing the capabilities /\n// parameters.\nSDPUtils.writeRtpDescription=function(kind,caps){var sdp='';// Build the mline.\nsdp+='m='+kind+' ';sdp+=caps.codecs.length>0?'9':'0';// reject if no codecs.\nsdp+=' UDP/TLS/RTP/SAVPF ';sdp+=caps.codecs.map(function(codec){if(codec.preferredPayloadType!==undefined){return codec.preferredPayloadType;}return codec.payloadType;}).join(' ')+'\\r\\n';sdp+='c=IN IP4 0.0.0.0\\r\\n';sdp+='a=rtcp:9 IN IP4 0.0.0.0\\r\\n';// Add a=rtpmap lines for each codec. Also fmtp and rtcp-fb.\ncaps.codecs.forEach(function(codec){sdp+=SDPUtils.writeRtpMap(codec);sdp+=SDPUtils.writeFmtp(codec);sdp+=SDPUtils.writeRtcpFb(codec);});var maxptime=0;caps.codecs.forEach(function(codec){if(codec.maxptime>maxptime){maxptime=codec.maxptime;}});if(maxptime>0){sdp+='a=maxptime:'+maxptime+'\\r\\n';}sdp+='a=rtcp-mux\\r\\n';caps.headerExtensions.forEach(function(extension){sdp+=SDPUtils.writeExtmap(extension);});// FIXME: write fecMechanisms.\nreturn sdp;};// Parses the SDP media section and returns an array of\n// RTCRtpEncodingParameters.\nSDPUtils.parseRtpEncodingParameters=function(mediaSection){var encodingParameters=[];var description=SDPUtils.parseRtpParameters(mediaSection);var hasRed=description.fecMechanisms.indexOf('RED')!==-1;var hasUlpfec=description.fecMechanisms.indexOf('ULPFEC')!==-1;// filter a=ssrc:... cname:, ignore PlanB-msid\nvar ssrcs=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(parts){return parts.attribute==='cname';});var primarySsrc=ssrcs.length>0&&ssrcs[0].ssrc;var secondarySsrc;var flows=SDPUtils.matchPrefix(mediaSection,'a=ssrc-group:FID').map(function(line){var parts=line.split(' ');parts.shift();return parts.map(function(part){return parseInt(part,10);});});if(flows.length>0&&flows[0].length>1&&flows[0][0]===primarySsrc){secondarySsrc=flows[0][1];}description.codecs.forEach(function(codec){if(codec.name.toUpperCase()==='RTX'&&codec.parameters.apt){var encParam={ssrc:primarySsrc,codecPayloadType:parseInt(codec.parameters.apt,10),rtx:{ssrc:secondarySsrc}};encodingParameters.push(encParam);if(hasRed){encParam=JSON.parse(JSON.stringify(encParam));encParam.fec={ssrc:secondarySsrc,mechanism:hasUlpfec?'red+ulpfec':'red'};encodingParameters.push(encParam);}}});if(encodingParameters.length===0&&primarySsrc){encodingParameters.push({ssrc:primarySsrc});}// we support both b=AS and b=TIAS but interpret AS as TIAS.\nvar bandwidth=SDPUtils.matchPrefix(mediaSection,'b=');if(bandwidth.length){if(bandwidth[0].indexOf('b=TIAS:')===0){bandwidth=parseInt(bandwidth[0].substr(7),10);}else if(bandwidth[0].indexOf('b=AS:')===0){bandwidth=parseInt(bandwidth[0].substr(5),10);}encodingParameters.forEach(function(params){params.maxBitrate=bandwidth;});}return encodingParameters;};// parses http://draft.ortc.org/#rtcrtcpparameters*\nSDPUtils.parseRtcpParameters=function(mediaSection){var rtcpParameters={};var cname;// Gets the first SSRC. Note that with RTX there might be multiple\n// SSRCs.\nvar remoteSsrc=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(obj){return obj.attribute==='cname';})[0];if(remoteSsrc){rtcpParameters.cname=remoteSsrc.value;rtcpParameters.ssrc=remoteSsrc.ssrc;}// Edge uses the compound attribute instead of reducedSize\n// compound is !reducedSize\nvar rsize=SDPUtils.matchPrefix(mediaSection,'a=rtcp-rsize');rtcpParameters.reducedSize=rsize.length>0;rtcpParameters.compound=rsize.length===0;// parses the rtcp-mux attrіbute.\n// Note that Edge does not support unmuxed RTCP.\nvar mux=SDPUtils.matchPrefix(mediaSection,'a=rtcp-mux');rtcpParameters.mux=mux.length>0;return rtcpParameters;};// parses either a=msid: or a=ssrc:... msid lines and returns\n// the id of the MediaStream and MediaStreamTrack.\nSDPUtils.parseMsid=function(mediaSection){var parts;var spec=SDPUtils.matchPrefix(mediaSection,'a=msid:');if(spec.length===1){parts=spec[0].substr(7).split(' ');return{stream:parts[0],track:parts[1]};}var planB=SDPUtils.matchPrefix(mediaSection,'a=ssrc:').map(function(line){return SDPUtils.parseSsrcMedia(line);}).filter(function(parts){return parts.attribute==='msid';});if(planB.length>0){parts=planB[0].value.split(' ');return{stream:parts[0],track:parts[1]};}};SDPUtils.writeSessionBoilerplate=function(){// FIXME: sess-id should be an NTP timestamp.\nreturn'v=0\\r\\n'+'o=thisisadapterortc 8169639915646943137 2 IN IP4 127.0.0.1\\r\\n'+'s=-\\r\\n'+'t=0 0\\r\\n';};SDPUtils.writeMediaSection=function(transceiver,caps,type,stream){var sdp=SDPUtils.writeRtpDescription(transceiver.kind,caps);// Map ICE parameters (ufrag, pwd) to SDP.\nsdp+=SDPUtils.writeIceParameters(transceiver.iceGatherer.getLocalParameters());// Map DTLS parameters to SDP.\nsdp+=SDPUtils.writeDtlsParameters(transceiver.dtlsTransport.getLocalParameters(),type==='offer'?'actpass':'active');sdp+='a=mid:'+transceiver.mid+'\\r\\n';if(transceiver.direction){sdp+='a='+transceiver.direction+'\\r\\n';}else if(transceiver.rtpSender&&transceiver.rtpReceiver){sdp+='a=sendrecv\\r\\n';}else if(transceiver.rtpSender){sdp+='a=sendonly\\r\\n';}else if(transceiver.rtpReceiver){sdp+='a=recvonly\\r\\n';}else{sdp+='a=inactive\\r\\n';}if(transceiver.rtpSender){// spec.\nvar msid='msid:'+stream.id+' '+transceiver.rtpSender.track.id+'\\r\\n';sdp+='a='+msid;// for Chrome.\nsdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].ssrc+' '+msid;if(transceiver.sendEncodingParameters[0].rtx){sdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].rtx.ssrc+' '+msid;sdp+='a=ssrc-group:FID '+transceiver.sendEncodingParameters[0].ssrc+' '+transceiver.sendEncodingParameters[0].rtx.ssrc+'\\r\\n';}}// FIXME: this should be written by writeRtpDescription.\nsdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].ssrc+' cname:'+SDPUtils.localCName+'\\r\\n';if(transceiver.rtpSender&&transceiver.sendEncodingParameters[0].rtx){sdp+='a=ssrc:'+transceiver.sendEncodingParameters[0].rtx.ssrc+' cname:'+SDPUtils.localCName+'\\r\\n';}return sdp;};// Gets the direction from the mediaSection or the sessionpart.\nSDPUtils.getDirection=function(mediaSection,sessionpart){// Look for sendrecv, sendonly, recvonly, inactive, default to sendrecv.\nvar lines=SDPUtils.splitLines(mediaSection);for(var i=0;i<lines.length;i++){switch(lines[i]){case'a=sendrecv':case'a=sendonly':case'a=recvonly':case'a=inactive':return lines[i].substr(2);default:// FIXME: What should happen here?\n}}if(sessionpart){return SDPUtils.getDirection(sessionpart);}return'sendrecv';};SDPUtils.getKind=function(mediaSection){var lines=SDPUtils.splitLines(mediaSection);var mline=lines[0].split(' ');return mline[0].substr(2);};SDPUtils.isRejected=function(mediaSection){return mediaSection.split(' ',2)[1]==='0';};// Expose public methods.\nmodule.exports=SDPUtils;},{}],60:[function(require,module,exports){module.exports=require('./lib/');},{\"./lib/\":61}],61:[function(require,module,exports){/**\n         * Module dependencies.\n         */var url=require('./url');var parser=require('socket.io-parser');var Manager=require('./manager');var debug=require('debug')('socket.io-client');/**\n         * Module exports.\n         */module.exports=exports=lookup;/**\n         * Managers cache.\n         */var cache=exports.managers={};/**\n         * Looks up an existing `Manager` for multiplexing.\n         * If the user summons:\n         *\n         *   `io('http://localhost/a');`\n         *   `io('http://localhost/b');`\n         *\n         * We reuse the existing instance based on same scheme/port/host,\n         * and we initialize sockets for each namespace.\n         *\n         * @api public\n         */function lookup(uri,opts){if((typeof uri===\"undefined\"?\"undefined\":_typeof(uri))=='object'){opts=uri;uri=undefined;}opts=opts||{};var parsed=url(uri);var source=parsed.source;var id=parsed.id;var io;if(opts.forceNew||opts['force new connection']||false===opts.multiplex){debug('ignoring socket cache for %s',source);io=Manager(source,opts);}else{if(!cache[id]){debug('new io instance for %s',source);cache[id]=Manager(source,opts);}io=cache[id];}return io.socket(parsed.path);}/**\n         * Protocol version.\n         *\n         * @api public\n         */exports.protocol=parser.protocol;/**\n         * `connect`.\n         *\n         * @param {String} uri\n         * @api public\n         */exports.connect=lookup;/**\n         * Expose constructors for standalone build.\n         *\n         * @api public\n         */exports.Manager=require('./manager');exports.Socket=require('./socket');},{\"./manager\":62,\"./socket\":64,\"./url\":65,\"debug\":19,\"socket.io-parser\":67}],62:[function(require,module,exports){/**\n         * Module dependencies.\n         */var url=require('./url');var eio=require('engine.io-client');var Socket=require('./socket');var Emitter=require('component-emitter');var parser=require('socket.io-parser');var on=require('./on');var bind=require('component-bind');var object=require('object-component');var debug=require('debug')('socket.io-client:manager');var indexOf=require('indexof');var Backoff=require('backo2');/**\n         * Module exports\n         */module.exports=Manager;/**\n         * `Manager` constructor.\n         *\n         * @param {String} engine instance or engine uri/opts\n         * @param {Object} options\n         * @api public\n         */function Manager(uri,opts){if(!(this instanceof Manager))return new Manager(uri,opts);if(uri&&'object'==(typeof uri===\"undefined\"?\"undefined\":_typeof(uri))){opts=uri;uri=undefined;}opts=opts||{};opts.path=opts.path||'/socket.io';this.nsps={};this.subs=[];this.opts=opts;this.reconnection(opts.reconnection!==false);this.reconnectionAttempts(opts.reconnectionAttempts||Infinity);this.reconnectionDelay(opts.reconnectionDelay||1000);this.reconnectionDelayMax(opts.reconnectionDelayMax||5000);this.randomizationFactor(opts.randomizationFactor||0.5);this.backoff=new Backoff({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()});this.timeout(null==opts.timeout?20000:opts.timeout);this.readyState='closed';this.uri=uri;this.connected=[];this.encoding=false;this.packetBuffer=[];this.encoder=new parser.Encoder();this.decoder=new parser.Decoder();this.autoConnect=opts.autoConnect!==false;if(this.autoConnect)this.open();}/**\n         * Propagate given event to sockets and emit on `this`\n         *\n         * @api private\n         */Manager.prototype.emitAll=function(){this.emit.apply(this,arguments);for(var nsp in this.nsps){this.nsps[nsp].emit.apply(this.nsps[nsp],arguments);}};/**\n         * Update `socket.id` of all sockets\n         *\n         * @api private\n         */Manager.prototype.updateSocketIds=function(){for(var nsp in this.nsps){this.nsps[nsp].id=this.engine.id;}};/**\n         * Mix in `Emitter`.\n         */Emitter(Manager.prototype);/**\n         * Sets the `reconnection` config.\n         *\n         * @param {Boolean} true/false if it should automatically reconnect\n         * @return {Manager} self or value\n         * @api public\n         */Manager.prototype.reconnection=function(v){if(!arguments.length)return this._reconnection;this._reconnection=!!v;return this;};/**\n         * Sets the reconnection attempts config.\n         *\n         * @param {Number} max reconnection attempts before giving up\n         * @return {Manager} self or value\n         * @api public\n         */Manager.prototype.reconnectionAttempts=function(v){if(!arguments.length)return this._reconnectionAttempts;this._reconnectionAttempts=v;return this;};/**\n         * Sets the delay between reconnections.\n         *\n         * @param {Number} delay\n         * @return {Manager} self or value\n         * @api public\n         */Manager.prototype.reconnectionDelay=function(v){if(!arguments.length)return this._reconnectionDelay;this._reconnectionDelay=v;this.backoff&&this.backoff.setMin(v);return this;};Manager.prototype.randomizationFactor=function(v){if(!arguments.length)return this._randomizationFactor;this._randomizationFactor=v;this.backoff&&this.backoff.setJitter(v);return this;};/**\n         * Sets the maximum delay between reconnections.\n         *\n         * @param {Number} delay\n         * @return {Manager} self or value\n         * @api public\n         */Manager.prototype.reconnectionDelayMax=function(v){if(!arguments.length)return this._reconnectionDelayMax;this._reconnectionDelayMax=v;this.backoff&&this.backoff.setMax(v);return this;};/**\n         * Sets the connection timeout. `false` to disable\n         *\n         * @return {Manager} self or value\n         * @api public\n         */Manager.prototype.timeout=function(v){if(!arguments.length)return this._timeout;this._timeout=v;return this;};/**\n         * Starts trying to reconnect if reconnection is enabled and we have not\n         * started reconnecting yet\n         *\n         * @api private\n         */Manager.prototype.maybeReconnectOnOpen=function(){// Only try to reconnect if it's the first time we're connecting\nif(!this.reconnecting&&this._reconnection&&this.backoff.attempts===0){// keeps reconnection from firing twice for the same reconnection loop\nthis.reconnect();}};/**\n         * Sets the current transport `socket`.\n         *\n         * @param {Function} optional, callback\n         * @return {Manager} self\n         * @api public\n         */Manager.prototype.open=Manager.prototype.connect=function(fn){debug('readyState %s',this.readyState);if(~this.readyState.indexOf('open'))return this;debug('opening %s',this.uri);this.engine=eio(this.uri,this.opts);var socket=this.engine;var self=this;this.readyState='opening';this.skipReconnect=false;// emit `open`\nvar openSub=on(socket,'open',function(){self.onopen();fn&&fn();});// emit `connect_error`\nvar errorSub=on(socket,'error',function(data){debug('connect_error');self.cleanup();self.readyState='closed';self.emitAll('connect_error',data);if(fn){var err=new Error('Connection error');err.data=data;fn(err);}else{// Only do this if there is no fn to handle the error\nself.maybeReconnectOnOpen();}});// emit `connect_timeout`\nif(false!==this._timeout){var timeout=this._timeout;debug('connect attempt will timeout after %d',timeout);// set timer\nvar timer=setTimeout(function(){debug('connect attempt timed out after %d',timeout);openSub.destroy();socket.close();socket.emit('error','timeout');self.emitAll('connect_timeout',timeout);},timeout);this.subs.push({destroy:function destroy(){clearTimeout(timer);}});}this.subs.push(openSub);this.subs.push(errorSub);return this;};/**\n         * Called upon transport open.\n         *\n         * @api private\n         */Manager.prototype.onopen=function(){debug('open');// clear old subs\nthis.cleanup();// mark as open\nthis.readyState='open';this.emit('open');// add new subs\nvar socket=this.engine;this.subs.push(on(socket,'data',bind(this,'ondata')));this.subs.push(on(this.decoder,'decoded',bind(this,'ondecoded')));this.subs.push(on(socket,'error',bind(this,'onerror')));this.subs.push(on(socket,'close',bind(this,'onclose')));};/**\n         * Called with data.\n         *\n         * @api private\n         */Manager.prototype.ondata=function(data){this.decoder.add(data);};/**\n         * Called when parser fully decodes a packet.\n         *\n         * @api private\n         */Manager.prototype.ondecoded=function(packet){this.emit('packet',packet);};/**\n         * Called upon socket error.\n         *\n         * @api private\n         */Manager.prototype.onerror=function(err){debug('error',err);this.emitAll('error',err);};/**\n         * Creates a new socket for the given `nsp`.\n         *\n         * @return {Socket}\n         * @api public\n         */Manager.prototype.socket=function(nsp){var socket=this.nsps[nsp];if(!socket){socket=new Socket(this,nsp);this.nsps[nsp]=socket;var self=this;socket.on('connect',function(){socket.id=self.engine.id;if(!~indexOf(self.connected,socket)){self.connected.push(socket);}});}return socket;};/**\n         * Called upon a socket close.\n         *\n         * @param {Socket} socket\n         */Manager.prototype.destroy=function(socket){var index=indexOf(this.connected,socket);if(~index)this.connected.splice(index,1);if(this.connected.length)return;this.close();};/**\n         * Writes a packet.\n         *\n         * @param {Object} packet\n         * @api private\n         */Manager.prototype.packet=function(packet){debug('writing packet %j',packet);var self=this;if(!self.encoding){// encode, then write to engine with result\nself.encoding=true;this.encoder.encode(packet,function(encodedPackets){for(var i=0;i<encodedPackets.length;i++){self.engine.write(encodedPackets[i]);}self.encoding=false;self.processPacketQueue();});}else{// add packet to the queue\nself.packetBuffer.push(packet);}};/**\n         * If packet buffer is non-empty, begins encoding the\n         * next packet in line.\n         *\n         * @api private\n         */Manager.prototype.processPacketQueue=function(){if(this.packetBuffer.length>0&&!this.encoding){var pack=this.packetBuffer.shift();this.packet(pack);}};/**\n         * Clean up transport subscriptions and packet buffer.\n         *\n         * @api private\n         */Manager.prototype.cleanup=function(){var sub;while(sub=this.subs.shift()){sub.destroy();}this.packetBuffer=[];this.encoding=false;this.decoder.destroy();};/**\n         * Close the current socket.\n         *\n         * @api private\n         */Manager.prototype.close=Manager.prototype.disconnect=function(){this.skipReconnect=true;this.backoff.reset();this.readyState='closed';this.engine&&this.engine.close();};/**\n         * Called upon engine close.\n         *\n         * @api private\n         */Manager.prototype.onclose=function(reason){debug('close');this.cleanup();this.backoff.reset();this.readyState='closed';this.emit('close',reason);if(this._reconnection&&!this.skipReconnect){this.reconnect();}};/**\n         * Attempt a reconnection.\n         *\n         * @api private\n         */Manager.prototype.reconnect=function(){if(this.reconnecting||this.skipReconnect)return this;var self=this;if(this.backoff.attempts>=this._reconnectionAttempts){debug('reconnect failed');this.backoff.reset();this.emitAll('reconnect_failed');this.reconnecting=false;}else{var delay=this.backoff.duration();debug('will wait %dms before reconnect attempt',delay);this.reconnecting=true;var timer=setTimeout(function(){if(self.skipReconnect)return;debug('attempting reconnect');self.emitAll('reconnect_attempt',self.backoff.attempts);self.emitAll('reconnecting',self.backoff.attempts);// check again for the case socket closed in above events\nif(self.skipReconnect)return;self.open(function(err){if(err){debug('reconnect attempt error');self.reconnecting=false;self.reconnect();self.emitAll('reconnect_error',err.data);}else{debug('reconnect success');self.onreconnect();}});},delay);this.subs.push({destroy:function destroy(){clearTimeout(timer);}});}};/**\n         * Called upon successful reconnect.\n         *\n         * @api private\n         */Manager.prototype.onreconnect=function(){var attempt=this.backoff.attempts;this.reconnecting=false;this.backoff.reset();this.updateSocketIds();this.emitAll('reconnect',attempt);};},{\"./on\":63,\"./socket\":64,\"./url\":65,\"backo2\":13,\"component-bind\":16,\"component-emitter\":17,\"debug\":19,\"engine.io-client\":20,\"indexof\":41,\"object-component\":48,\"socket.io-parser\":67}],63:[function(require,module,exports){/**\n         * Module exports.\n         */module.exports=on;/**\n         * Helper for subscriptions.\n         *\n         * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`\n         * @param {String} event name\n         * @param {Function} callback\n         * @api public\n         */function on(obj,ev,fn){obj.on(ev,fn);return{destroy:function destroy(){obj.removeListener(ev,fn);}};}},{}],64:[function(require,module,exports){/**\n         * Module dependencies.\n         */var parser=require('socket.io-parser');var Emitter=require('component-emitter');var toArray=require('to-array');var on=require('./on');var bind=require('component-bind');var debug=require('debug')('socket.io-client:socket');var hasBin=require('has-binary');/**\n         * Module exports.\n         */module.exports=exports=Socket;/**\n         * Internal events (blacklisted).\n         * These events can't be emitted by the user.\n         *\n         * @api private\n         */var events={connect:1,connect_error:1,connect_timeout:1,disconnect:1,error:1,reconnect:1,reconnect_attempt:1,reconnect_failed:1,reconnect_error:1,reconnecting:1};/**\n         * Shortcut to `Emitter#emit`.\n         */var emit=Emitter.prototype.emit;/**\n         * `Socket` constructor.\n         *\n         * @api public\n         */function Socket(io,nsp){this.io=io;this.nsp=nsp;this.json=this;// compat\nthis.ids=0;this.acks={};if(this.io.autoConnect)this.open();this.receiveBuffer=[];this.sendBuffer=[];this.connected=false;this.disconnected=true;}/**\n         * Mix in `Emitter`.\n         */Emitter(Socket.prototype);/**\n         * Subscribe to open, close and packet events\n         *\n         * @api private\n         */Socket.prototype.subEvents=function(){if(this.subs)return;var io=this.io;this.subs=[on(io,'open',bind(this,'onopen')),on(io,'packet',bind(this,'onpacket')),on(io,'close',bind(this,'onclose'))];};/**\n         * \"Opens\" the socket.\n         *\n         * @api public\n         */Socket.prototype.open=Socket.prototype.connect=function(){if(this.connected)return this;this.subEvents();this.io.open();// ensure open\nif('open'==this.io.readyState)this.onopen();return this;};/**\n         * Sends a `message` event.\n         *\n         * @return {Socket} self\n         * @api public\n         */Socket.prototype.send=function(){var args=toArray(arguments);args.unshift('message');this.emit.apply(this,args);return this;};/**\n         * Override `emit`.\n         * If the event is in `events`, it's emitted normally.\n         *\n         * @param {String} event name\n         * @return {Socket} self\n         * @api public\n         */Socket.prototype.emit=function(ev){if(events.hasOwnProperty(ev)){emit.apply(this,arguments);return this;}var args=toArray(arguments);var parserType=parser.EVENT;// default\nif(hasBin(args)){parserType=parser.BINARY_EVENT;}// binary\nvar packet={type:parserType,data:args};// event ack callback\nif('function'==typeof args[args.length-1]){debug('emitting packet with ack id %d',this.ids);this.acks[this.ids]=args.pop();packet.id=this.ids++;}if(this.connected){this.packet(packet);}else{this.sendBuffer.push(packet);}return this;};/**\n         * Sends a packet.\n         *\n         * @param {Object} packet\n         * @api private\n         */Socket.prototype.packet=function(packet){packet.nsp=this.nsp;this.io.packet(packet);};/**\n         * Called upon engine `open`.\n         *\n         * @api private\n         */Socket.prototype.onopen=function(){debug('transport is open - connecting');// write connect packet if necessary\nif('/'!=this.nsp){this.packet({type:parser.CONNECT});}};/**\n         * Called upon engine `close`.\n         *\n         * @param {String} reason\n         * @api private\n         */Socket.prototype.onclose=function(reason){debug('close (%s)',reason);this.connected=false;this.disconnected=true;delete this.id;this.emit('disconnect',reason);};/**\n         * Called with socket packet.\n         *\n         * @param {Object} packet\n         * @api private\n         */Socket.prototype.onpacket=function(packet){if(packet.nsp!=this.nsp)return;switch(packet.type){case parser.CONNECT:this.onconnect();break;case parser.EVENT:this.onevent(packet);break;case parser.BINARY_EVENT:this.onevent(packet);break;case parser.ACK:this.onack(packet);break;case parser.BINARY_ACK:this.onack(packet);break;case parser.DISCONNECT:this.ondisconnect();break;case parser.ERROR:this.emit('error',packet.data);break;}};/**\n         * Called upon a server event.\n         *\n         * @param {Object} packet\n         * @api private\n         */Socket.prototype.onevent=function(packet){var args=packet.data||[];debug('emitting event %j',args);if(null!=packet.id){debug('attaching ack callback to event');args.push(this.ack(packet.id));}if(this.connected){emit.apply(this,args);}else{this.receiveBuffer.push(args);}};/**\n         * Produces an ack callback to emit with an event.\n         *\n         * @api private\n         */Socket.prototype.ack=function(id){var self=this;var sent=false;return function(){// prevent double callbacks\nif(sent)return;sent=true;var args=toArray(arguments);debug('sending ack %j',args);var type=hasBin(args)?parser.BINARY_ACK:parser.ACK;self.packet({type:type,id:id,data:args});};};/**\n         * Called upon a server acknowlegement.\n         *\n         * @param {Object} packet\n         * @api private\n         */Socket.prototype.onack=function(packet){debug('calling ack %s with %j',packet.id,packet.data);var fn=this.acks[packet.id];fn.apply(this,packet.data);delete this.acks[packet.id];};/**\n         * Called upon server connect.\n         *\n         * @api private\n         */Socket.prototype.onconnect=function(){this.connected=true;this.disconnected=false;this.emit('connect');this.emitBuffered();};/**\n         * Emit buffered events (received and emitted).\n         *\n         * @api private\n         */Socket.prototype.emitBuffered=function(){var i;for(i=0;i<this.receiveBuffer.length;i++){emit.apply(this,this.receiveBuffer[i]);}this.receiveBuffer=[];for(i=0;i<this.sendBuffer.length;i++){this.packet(this.sendBuffer[i]);}this.sendBuffer=[];};/**\n         * Called upon server disconnect.\n         *\n         * @api private\n         */Socket.prototype.ondisconnect=function(){debug('server disconnect (%s)',this.nsp);this.destroy();this.onclose('io server disconnect');};/**\n         * Called upon forced client/server side disconnections,\n         * this method ensures the manager stops tracking us and\n         * that reconnections don't get triggered for this.\n         *\n         * @api private.\n         */Socket.prototype.destroy=function(){if(this.subs){// clean subscriptions to avoid reconnections\nfor(var i=0;i<this.subs.length;i++){this.subs[i].destroy();}this.subs=null;}this.io.destroy(this);};/**\n         * Disconnects the socket manually.\n         *\n         * @return {Socket} self\n         * @api public\n         */Socket.prototype.close=Socket.prototype.disconnect=function(){if(this.connected){debug('performing disconnect (%s)',this.nsp);this.packet({type:parser.DISCONNECT});}// remove socket from pool\nthis.destroy();if(this.connected){// fire events\nthis.onclose('io client disconnect');}return this;};},{\"./on\":63,\"component-bind\":16,\"component-emitter\":17,\"debug\":19,\"has-binary\":39,\"socket.io-parser\":67,\"to-array\":69}],65:[function(require,module,exports){(function(global){/**\n             * Module dependencies.\n             */var parseuri=require('parseuri');var debug=require('debug')('socket.io-client:url');/**\n             * Module exports.\n             */module.exports=url;/**\n             * URL parser.\n             *\n             * @param {String} url\n             * @param {Object} An object meant to mimic window.location.\n             *                 Defaults to window.location.\n             * @api public\n             */function url(uri,loc){var obj=uri;// default to window.location\nvar loc=loc||global.location;if(null==uri)uri=loc.protocol+'//'+loc.host;// relative path support\nif('string'==typeof uri){if('/'==uri.charAt(0)){if('/'==uri.charAt(1)){uri=loc.protocol+uri;}else{uri=loc.hostname+uri;}}if(!/^(https?|wss?):\\/\\//.test(uri)){debug('protocol-less url %s',uri);if('undefined'!=typeof loc){uri=loc.protocol+'//'+uri;}else{uri='https://'+uri;}}// parse\ndebug('parse %s',uri);obj=parseuri(uri);}// make sure we treat `localhost:80` and `localhost` equally\nif(!obj.port){if(/^(http|ws)$/.test(obj.protocol)){obj.port='80';}else if(/^(http|ws)s$/.test(obj.protocol)){obj.port='443';}}obj.path=obj.path||'/';// define unique id\nobj.id=obj.protocol+'://'+obj.host+':'+obj.port;// define href\nobj.href=obj.protocol+'://'+obj.host+(loc&&loc.port==obj.port?'':':'+obj.port);return obj;}}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"debug\":19,\"parseuri\":51}],66:[function(require,module,exports){(function(global){/*global Blob,File*//**\n             * Module requirements\n             */var isArray=require('isarray');var isBuf=require('./is-buffer');/**\n             * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.\n             * Anything with blobs or files should be fed through removeBlobs before coming\n             * here.\n             *\n             * @param {Object} packet - socket.io event packet\n             * @return {Object} with deconstructed packet and list of buffers\n             * @api public\n             */exports.deconstructPacket=function(packet){var buffers=[];var packetData=packet.data;function _deconstructPacket(data){if(!data)return data;if(isBuf(data)){var placeholder={_placeholder:true,num:buffers.length};buffers.push(data);return placeholder;}else if(isArray(data)){var newData=new Array(data.length);for(var i=0;i<data.length;i++){newData[i]=_deconstructPacket(data[i]);}return newData;}else if('object'==(typeof data===\"undefined\"?\"undefined\":_typeof(data))&&!(data instanceof Date)){var newData={};for(var key in data){newData[key]=_deconstructPacket(data[key]);}return newData;}return data;}var pack=packet;pack.data=_deconstructPacket(packetData);pack.attachments=buffers.length;// number of binary 'attachments'\nreturn{packet:pack,buffers:buffers};};/**\n             * Reconstructs a binary packet from its placeholder packet and buffers\n             *\n             * @param {Object} packet - event packet with placeholders\n             * @param {Array} buffers - binary buffers to put in placeholder positions\n             * @return {Object} reconstructed packet\n             * @api public\n             */exports.reconstructPacket=function(packet,buffers){var curPlaceHolder=0;function _reconstructPacket(data){if(data&&data._placeholder){var buf=buffers[data.num];// appropriate buffer (should be natural order anyway)\nreturn buf;}else if(isArray(data)){for(var i=0;i<data.length;i++){data[i]=_reconstructPacket(data[i]);}return data;}else if(data&&'object'==(typeof data===\"undefined\"?\"undefined\":_typeof(data))){for(var key in data){data[key]=_reconstructPacket(data[key]);}return data;}return data;}packet.data=_reconstructPacket(packet.data);packet.attachments=undefined;// no longer useful\nreturn packet;};/**\n             * Asynchronously removes Blobs or Files from data via\n             * FileReader's readAsArrayBuffer method. Used before encoding\n             * data as msgpack. Calls callback with the blobless data.\n             *\n             * @param {Object} data\n             * @param {Function} callback\n             * @api private\n             */exports.removeBlobs=function(data,callback){function _removeBlobs(obj,curKey,containingObject){if(!obj)return obj;// convert any blob\nif(global.Blob&&obj instanceof Blob||global.File&&obj instanceof File){pendingBlobs++;// async filereader\nvar fileReader=new FileReader();fileReader.onload=function(){// this.result == arraybuffer\nif(containingObject){containingObject[curKey]=this.result;}else{bloblessData=this.result;}// if nothing pending its callback time\nif(! --pendingBlobs){callback(bloblessData);}};fileReader.readAsArrayBuffer(obj);// blob -> arraybuffer\n}else if(isArray(obj)){// handle array\nfor(var i=0;i<obj.length;i++){_removeBlobs(obj[i],i,obj);}}else if(obj&&'object'==(typeof obj===\"undefined\"?\"undefined\":_typeof(obj))&&!isBuf(obj)){// and object\nfor(var key in obj){_removeBlobs(obj[key],key,obj);}}}var pendingBlobs=0;var bloblessData=data;_removeBlobs(bloblessData);if(!pendingBlobs){callback(bloblessData);}};}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./is-buffer\":68,\"isarray\":42}],67:[function(require,module,exports){/**\n         * Module dependencies.\n         */var debug=require('debug')('socket.io-parser');var json=require('json3');var isArray=require('isarray');var Emitter=require('component-emitter');var binary=require('./binary');var isBuf=require('./is-buffer');/**\n         * Protocol version.\n         *\n         * @api public\n         */exports.protocol=4;/**\n         * Packet types.\n         *\n         * @api public\n         */exports.types=['CONNECT','DISCONNECT','EVENT','BINARY_EVENT','ACK','BINARY_ACK','ERROR'];/**\n         * Packet type `connect`.\n         *\n         * @api public\n         */exports.CONNECT=0;/**\n         * Packet type `disconnect`.\n         *\n         * @api public\n         */exports.DISCONNECT=1;/**\n         * Packet type `event`.\n         *\n         * @api public\n         */exports.EVENT=2;/**\n         * Packet type `ack`.\n         *\n         * @api public\n         */exports.ACK=3;/**\n         * Packet type `error`.\n         *\n         * @api public\n         */exports.ERROR=4;/**\n         * Packet type 'binary event'\n         *\n         * @api public\n         */exports.BINARY_EVENT=5;/**\n         * Packet type `binary ack`. For acks with binary arguments.\n         *\n         * @api public\n         */exports.BINARY_ACK=6;/**\n         * Encoder constructor.\n         *\n         * @api public\n         */exports.Encoder=Encoder;/**\n         * Decoder constructor.\n         *\n         * @api public\n         */exports.Decoder=Decoder;/**\n         * A socket.io Encoder instance\n         *\n         * @api public\n         */function Encoder(){}/**\n         * Encode a packet as a single string if non-binary, or as a\n         * buffer sequence, depending on packet type.\n         *\n         * @param {Object} obj - packet object\n         * @param {Function} callback - function to handle encodings (likely engine.write)\n         * @return Calls callback with Array of encodings\n         * @api public\n         */Encoder.prototype.encode=function(obj,callback){debug('encoding packet %j',obj);if(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){encodeAsBinary(obj,callback);}else{var encoding=encodeAsString(obj);callback([encoding]);}};/**\n         * Encode packet as string.\n         *\n         * @param {Object} packet\n         * @return {String} encoded\n         * @api private\n         */function encodeAsString(obj){var str='';var nsp=false;// first is type\nstr+=obj.type;// attachments if we have them\nif(exports.BINARY_EVENT==obj.type||exports.BINARY_ACK==obj.type){str+=obj.attachments;str+='-';}// if we have a namespace other than `/`\n// we append it followed by a comma `,`\nif(obj.nsp&&'/'!=obj.nsp){nsp=true;str+=obj.nsp;}// immediately followed by the id\nif(null!=obj.id){if(nsp){str+=',';nsp=false;}str+=obj.id;}// json data\nif(null!=obj.data){if(nsp)str+=',';str+=json.stringify(obj.data);}debug('encoded %j as %s',obj,str);return str;}/**\n         * Encode packet as 'buffer sequence' by removing blobs, and\n         * deconstructing packet into object with placeholders and\n         * a list of buffers.\n         *\n         * @param {Object} packet\n         * @return {Buffer} encoded\n         * @api private\n         */function encodeAsBinary(obj,callback){function writeEncoding(bloblessData){var deconstruction=binary.deconstructPacket(bloblessData);var pack=encodeAsString(deconstruction.packet);var buffers=deconstruction.buffers;buffers.unshift(pack);// add packet info to beginning of data list\ncallback(buffers);// write all the buffers\n}binary.removeBlobs(obj,writeEncoding);}/**\n         * A socket.io Decoder instance\n         *\n         * @return {Object} decoder\n         * @api public\n         */function Decoder(){this.reconstructor=null;}/**\n         * Mix in `Emitter` with Decoder.\n         */Emitter(Decoder.prototype);/**\n         * Decodes an ecoded packet string into packet JSON.\n         *\n         * @param {String} obj - encoded packet\n         * @return {Object} packet\n         * @api public\n         */Decoder.prototype.add=function(obj){var packet;if('string'==typeof obj){packet=decodeString(obj);if(exports.BINARY_EVENT==packet.type||exports.BINARY_ACK==packet.type){// binary packet's json\nthis.reconstructor=new BinaryReconstructor(packet);// no attachments, labeled binary but no binary data to follow\nif(this.reconstructor.reconPack.attachments===0){this.emit('decoded',packet);}}else{// non-binary full packet\nthis.emit('decoded',packet);}}else if(isBuf(obj)||obj.base64){// raw binary data\nif(!this.reconstructor){throw new Error('got binary data when not reconstructing a packet');}else{packet=this.reconstructor.takeBinaryData(obj);if(packet){// received final buffer\nthis.reconstructor=null;this.emit('decoded',packet);}}}else{throw new Error('Unknown type: '+obj);}};/**\n         * Decode a packet String (JSON data)\n         *\n         * @param {String} str\n         * @return {Object} packet\n         * @api private\n         */function decodeString(str){var p={};var i=0;// look up type\np.type=Number(str.charAt(0));if(null==exports.types[p.type])return error();// look up attachments if type binary\nif(exports.BINARY_EVENT==p.type||exports.BINARY_ACK==p.type){var buf='';while(str.charAt(++i)!='-'){buf+=str.charAt(i);if(i==str.length)break;}if(buf!=Number(buf)||str.charAt(i)!='-'){throw new Error('Illegal attachments');}p.attachments=Number(buf);}// look up namespace (if any)\nif('/'==str.charAt(i+1)){p.nsp='';while(++i){var c=str.charAt(i);if(','==c)break;p.nsp+=c;if(i==str.length)break;}}else{p.nsp='/';}// look up id\nvar next=str.charAt(i+1);if(''!==next&&Number(next)==next){p.id='';while(++i){var c=str.charAt(i);if(null==c||Number(c)!=c){--i;break;}p.id+=str.charAt(i);if(i==str.length)break;}p.id=Number(p.id);}// look up json data\nif(str.charAt(++i)){try{p.data=json.parse(str.substr(i));}catch(e){return error();}}debug('decoded %s as %j',str,p);return p;}/**\n         * Deallocates a parser's resources\n         *\n         * @api public\n         */Decoder.prototype.destroy=function(){if(this.reconstructor){this.reconstructor.finishedReconstruction();}};/**\n         * A manager of a binary event's 'buffer sequence'. Should\n         * be constructed whenever a packet of type BINARY_EVENT is\n         * decoded.\n         *\n         * @param {Object} packet\n         * @return {BinaryReconstructor} initialized reconstructor\n         * @api private\n         */function BinaryReconstructor(packet){this.reconPack=packet;this.buffers=[];}/**\n         * Method to be called when binary data received from connection\n         * after a BINARY_EVENT packet.\n         *\n         * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n         * @return {null | Object} returns null if more binary data is expected or\n         *   a reconstructed packet object if all buffers have been received.\n         * @api private\n         */BinaryReconstructor.prototype.takeBinaryData=function(binData){this.buffers.push(binData);if(this.buffers.length==this.reconPack.attachments){// done with buffer list\nvar packet=binary.reconstructPacket(this.reconPack,this.buffers);this.finishedReconstruction();return packet;}return null;};/**\n         * Cleans up binary packet reconstruction variables.\n         *\n         * @api private\n         */BinaryReconstructor.prototype.finishedReconstruction=function(){this.reconPack=null;this.buffers=[];};function error(data){return{type:exports.ERROR,data:'parser error'};}},{\"./binary\":66,\"./is-buffer\":68,\"component-emitter\":17,\"debug\":19,\"isarray\":42,\"json3\":43}],68:[function(require,module,exports){(function(global){module.exports=isBuf;/**\n             * Returns true if obj is a buffer or an arraybuffer.\n             *\n             * @api private\n             */function isBuf(obj){return global.Buffer&&global.Buffer.isBuffer(obj)||global.ArrayBuffer&&obj instanceof ArrayBuffer;}}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{}],69:[function(require,module,exports){module.exports=toArray;function toArray(list,index){var array=[];index=index||0;for(var i=index||0;i<list.length;i++){array[i-index]=list[i];}return array;}},{}],70:[function(require,module,exports){(function(global){/*! https://mths.be/utf8js v2.0.0 by @mathias */;(function(root){// Detect free variables `exports`\nvar freeExports=(typeof exports===\"undefined\"?\"undefined\":_typeof(exports))=='object'&&exports;// Detect free variable `module`\nvar freeModule=(typeof module===\"undefined\"?\"undefined\":_typeof(module))=='object'&&module&&module.exports==freeExports&&module;// Detect free variable `global`, from Node.js or Browserified code,\n// and use it as `root`\nvar freeGlobal=(typeof global===\"undefined\"?\"undefined\":_typeof(global))=='object'&&global;if(freeGlobal.global===freeGlobal||freeGlobal.window===freeGlobal){root=freeGlobal;}/*--------------------------------------------------------------------------*/var stringFromCharCode=String.fromCharCode;// Taken from https://mths.be/punycode\nfunction ucs2decode(string){var output=[];var counter=0;var length=string.length;var value;var extra;while(counter<length){value=string.charCodeAt(counter++);if(value>=0xD800&&value<=0xDBFF&&counter<length){// high surrogate, and there is a next character\nextra=string.charCodeAt(counter++);if((extra&0xFC00)==0xDC00){// low surrogate\noutput.push(((value&0x3FF)<<10)+(extra&0x3FF)+0x10000);}else{// unmatched surrogate; only append this code unit, in case the next\n// code unit is the high surrogate of a surrogate pair\noutput.push(value);counter--;}}else{output.push(value);}}return output;}// Taken from https://mths.be/punycode\nfunction ucs2encode(array){var length=array.length;var index=-1;var value;var output='';while(++index<length){value=array[index];if(value>0xFFFF){value-=0x10000;output+=stringFromCharCode(value>>>10&0x3FF|0xD800);value=0xDC00|value&0x3FF;}output+=stringFromCharCode(value);}return output;}function checkScalarValue(codePoint){if(codePoint>=0xD800&&codePoint<=0xDFFF){throw Error('Lone surrogate U+'+codePoint.toString(16).toUpperCase()+' is not a scalar value');}}/*--------------------------------------------------------------------------*/function createByte(codePoint,shift){return stringFromCharCode(codePoint>>shift&0x3F|0x80);}function encodeCodePoint(codePoint){if((codePoint&0xFFFFFF80)==0){// 1-byte sequence\nreturn stringFromCharCode(codePoint);}var symbol='';if((codePoint&0xFFFFF800)==0){// 2-byte sequence\nsymbol=stringFromCharCode(codePoint>>6&0x1F|0xC0);}else if((codePoint&0xFFFF0000)==0){// 3-byte sequence\ncheckScalarValue(codePoint);symbol=stringFromCharCode(codePoint>>12&0x0F|0xE0);symbol+=createByte(codePoint,6);}else if((codePoint&0xFFE00000)==0){// 4-byte sequence\nsymbol=stringFromCharCode(codePoint>>18&0x07|0xF0);symbol+=createByte(codePoint,12);symbol+=createByte(codePoint,6);}symbol+=stringFromCharCode(codePoint&0x3F|0x80);return symbol;}function utf8encode(string){var codePoints=ucs2decode(string);var length=codePoints.length;var index=-1;var codePoint;var byteString='';while(++index<length){codePoint=codePoints[index];byteString+=encodeCodePoint(codePoint);}return byteString;}/*--------------------------------------------------------------------------*/function readContinuationByte(){if(byteIndex>=byteCount){throw Error('Invalid byte index');}var continuationByte=byteArray[byteIndex]&0xFF;byteIndex++;if((continuationByte&0xC0)==0x80){return continuationByte&0x3F;}// If we end up here, it’s not a continuation byte\nthrow Error('Invalid continuation byte');}function decodeSymbol(){var byte1;var byte2;var byte3;var byte4;var codePoint;if(byteIndex>byteCount){throw Error('Invalid byte index');}if(byteIndex==byteCount){return false;}// Read first byte\nbyte1=byteArray[byteIndex]&0xFF;byteIndex++;// 1-byte sequence (no continuation bytes)\nif((byte1&0x80)==0){return byte1;}// 2-byte sequence\nif((byte1&0xE0)==0xC0){var byte2=readContinuationByte();codePoint=(byte1&0x1F)<<6|byte2;if(codePoint>=0x80){return codePoint;}else{throw Error('Invalid continuation byte');}}// 3-byte sequence (may include unpaired surrogates)\nif((byte1&0xF0)==0xE0){byte2=readContinuationByte();byte3=readContinuationByte();codePoint=(byte1&0x0F)<<12|byte2<<6|byte3;if(codePoint>=0x0800){checkScalarValue(codePoint);return codePoint;}else{throw Error('Invalid continuation byte');}}// 4-byte sequence\nif((byte1&0xF8)==0xF0){byte2=readContinuationByte();byte3=readContinuationByte();byte4=readContinuationByte();codePoint=(byte1&0x0F)<<0x12|byte2<<0x0C|byte3<<0x06|byte4;if(codePoint>=0x010000&&codePoint<=0x10FFFF){return codePoint;}}throw Error('Invalid UTF-8 detected');}var byteArray;var byteCount;var byteIndex;function utf8decode(byteString){byteArray=ucs2decode(byteString);byteCount=byteArray.length;byteIndex=0;var codePoints=[];var tmp;while((tmp=decodeSymbol())!==false){codePoints.push(tmp);}return ucs2encode(codePoints);}/*--------------------------------------------------------------------------*/var utf8={'version':'2.0.0','encode':utf8encode,'decode':utf8decode};// Some AMD build optimizers, like r.js, check for specific condition patterns\n// like the following:\nif(typeof define=='function'&&_typeof(define.amd)=='object'&&define.amd){define(function(){return utf8;});}else if(freeExports&&!freeExports.nodeType){if(freeModule){// in Node.js or RingoJS v0.8.0+\nfreeModule.exports=utf8;}else{// in Narwhal or RingoJS v0.7.0-\nvar object={};var hasOwnProperty=object.hasOwnProperty;for(var key in utf8){hasOwnProperty.call(utf8,key)&&(freeExports[key]=utf8[key]);}}}else{// in Rhino or a web browser\nroot.utf8=utf8;}})(this);}).call(this,typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{}],71:[function(require,module,exports){if(typeof Object.create==='function'){// implementation from standard node.js 'util' module\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;ctor.prototype=Object.create(superCtor.prototype,{constructor:{value:ctor,enumerable:false,writable:true,configurable:true}});};}else{// old school shim for old browsers\nmodule.exports=function inherits(ctor,superCtor){ctor.super_=superCtor;var TempCtor=function TempCtor(){};TempCtor.prototype=superCtor.prototype;ctor.prototype=new TempCtor();ctor.prototype.constructor=ctor;};}},{}],72:[function(require,module,exports){module.exports=function isBuffer(arg){return arg&&(typeof arg===\"undefined\"?\"undefined\":_typeof(arg))==='object'&&typeof arg.copy==='function'&&typeof arg.fill==='function'&&typeof arg.readUInt8==='function';};},{}],73:[function(require,module,exports){(function(process,global){// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar formatRegExp=/%[sdj%]/g;exports.format=function(f){if(!isString(f)){var objects=[];for(var i=0;i<arguments.length;i++){objects.push(inspect(arguments[i]));}return objects.join(' ');}var i=1;var args=arguments;var len=args.length;var str=String(f).replace(formatRegExp,function(x){if(x==='%%')return'%';if(i>=len)return x;switch(x){case'%s':return String(args[i++]);case'%d':return Number(args[i++]);case'%j':try{return JSON.stringify(args[i++]);}catch(_){return'[Circular]';}default:return x;}});for(var x=args[i];i<len;x=args[++i]){if(isNull(x)||!isObject(x)){str+=' '+x;}else{str+=' '+inspect(x);}}return str;};// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate=function(fn,msg){// Allow for deprecating things in the process of starting up.\nif(isUndefined(global.process)){return function(){return exports.deprecate(fn,msg).apply(this,arguments);};}if(process.noDeprecation===true){return fn;}var warned=false;function deprecated(){if(!warned){if(process.throwDeprecation){throw new Error(msg);}else if(process.traceDeprecation){console.trace(msg);}else{console.error(msg);}warned=true;}return fn.apply(this,arguments);}return deprecated;};var debugs={};var debugEnviron;exports.debuglog=function(set){if(isUndefined(debugEnviron))debugEnviron=process.env.NODE_DEBUG||'';set=set.toUpperCase();if(!debugs[set]){if(new RegExp('\\\\b'+set+'\\\\b','i').test(debugEnviron)){var pid=process.pid;debugs[set]=function(){var msg=exports.format.apply(exports,arguments);console.error('%s %d: %s',set,pid,msg);};}else{debugs[set]=function(){};}}return debugs[set];};/**\n             * Echos the value of a value. Trys to print the value out\n             * in the best way possible given the different types.\n             *\n             * @param {Object} obj The object to print out.\n             * @param {Object} opts Optional options object that alters the output.\n             *//* legacy: obj, showHidden, depth, colors*/function inspect(obj,opts){// default options\nvar ctx={seen:[],stylize:stylizeNoColor};// legacy...\nif(arguments.length>=3)ctx.depth=arguments[2];if(arguments.length>=4)ctx.colors=arguments[3];if(isBoolean(opts)){// legacy...\nctx.showHidden=opts;}else if(opts){// got an \"options\" object\nexports._extend(ctx,opts);}// set default options\nif(isUndefined(ctx.showHidden))ctx.showHidden=false;if(isUndefined(ctx.depth))ctx.depth=2;if(isUndefined(ctx.colors))ctx.colors=false;if(isUndefined(ctx.customInspect))ctx.customInspect=true;if(ctx.colors)ctx.stylize=stylizeWithColor;return formatValue(ctx,obj,ctx.depth);}exports.inspect=inspect;// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors={'bold':[1,22],'italic':[3,23],'underline':[4,24],'inverse':[7,27],'white':[37,39],'grey':[90,39],'black':[30,39],'blue':[34,39],'cyan':[36,39],'green':[32,39],'magenta':[35,39],'red':[31,39],'yellow':[33,39]};// Don't use 'blue' not visible on cmd.exe\ninspect.styles={'special':'cyan','number':'yellow','boolean':'yellow','undefined':'grey','null':'bold','string':'green','date':'magenta',// \"name\": intentionally not styling\n'regexp':'red'};function stylizeWithColor(str,styleType){var style=inspect.styles[styleType];if(style){return\"\\x1B[\"+inspect.colors[style][0]+'m'+str+\"\\x1B[\"+inspect.colors[style][1]+'m';}else{return str;}}function stylizeNoColor(str,styleType){return str;}function arrayToHash(array){var hash={};array.forEach(function(val,idx){hash[val]=true;});return hash;}function formatValue(ctx,value,recurseTimes){// Provide a hook for user-specified inspect functions.\n// Check that value is an object with an inspect function on it\nif(ctx.customInspect&&value&&isFunction(value.inspect)&&// Filter out the util module, it's inspect function is special\nvalue.inspect!==exports.inspect&&// Also filter out any prototype objects using the circular check.\n!(value.constructor&&value.constructor.prototype===value)){var ret=value.inspect(recurseTimes,ctx);if(!isString(ret)){ret=formatValue(ctx,ret,recurseTimes);}return ret;}// Primitive types cannot have properties\nvar primitive=formatPrimitive(ctx,value);if(primitive){return primitive;}// Look up the keys of the object.\nvar keys=Object.keys(value);var visibleKeys=arrayToHash(keys);if(ctx.showHidden){keys=Object.getOwnPropertyNames(value);}// IE doesn't make error fields non-enumerable\n// http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\nif(isError(value)&&(keys.indexOf('message')>=0||keys.indexOf('description')>=0)){return formatError(value);}// Some type of object without properties can be shortcutted.\nif(keys.length===0){if(isFunction(value)){var name=value.name?': '+value.name:'';return ctx.stylize('[Function'+name+']','special');}if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}if(isDate(value)){return ctx.stylize(Date.prototype.toString.call(value),'date');}if(isError(value)){return formatError(value);}}var base='',array=false,braces=['{','}'];// Make Array say that they are Array\nif(isArray(value)){array=true;braces=['[',']'];}// Make functions say that they are functions\nif(isFunction(value)){var n=value.name?': '+value.name:'';base=' [Function'+n+']';}// Make RegExps say that they are RegExps\nif(isRegExp(value)){base=' '+RegExp.prototype.toString.call(value);}// Make dates with properties first say the date\nif(isDate(value)){base=' '+Date.prototype.toUTCString.call(value);}// Make error with message first say the error\nif(isError(value)){base=' '+formatError(value);}if(keys.length===0&&(!array||value.length==0)){return braces[0]+base+braces[1];}if(recurseTimes<0){if(isRegExp(value)){return ctx.stylize(RegExp.prototype.toString.call(value),'regexp');}else{return ctx.stylize('[Object]','special');}}ctx.seen.push(value);var output;if(array){output=formatArray(ctx,value,recurseTimes,visibleKeys,keys);}else{output=keys.map(function(key){return formatProperty(ctx,value,recurseTimes,visibleKeys,key,array);});}ctx.seen.pop();return reduceToSingleString(output,base,braces);}function formatPrimitive(ctx,value){if(isUndefined(value))return ctx.stylize('undefined','undefined');if(isString(value)){var simple='\\''+JSON.stringify(value).replace(/^\"|\"$/g,'').replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"')+'\\'';return ctx.stylize(simple,'string');}if(isNumber(value))return ctx.stylize(''+value,'number');if(isBoolean(value))return ctx.stylize(''+value,'boolean');// For some reason typeof null is \"object\", so special case here.\nif(isNull(value))return ctx.stylize('null','null');}function formatError(value){return'['+Error.prototype.toString.call(value)+']';}function formatArray(ctx,value,recurseTimes,visibleKeys,keys){var output=[];for(var i=0,l=value.length;i<l;++i){if(hasOwnProperty(value,String(i))){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,String(i),true));}else{output.push('');}}keys.forEach(function(key){if(!key.match(/^\\d+$/)){output.push(formatProperty(ctx,value,recurseTimes,visibleKeys,key,true));}});return output;}function formatProperty(ctx,value,recurseTimes,visibleKeys,key,array){var name,str,desc;desc=Object.getOwnPropertyDescriptor(value,key)||{value:value[key]};if(desc.get){if(desc.set){str=ctx.stylize('[Getter/Setter]','special');}else{str=ctx.stylize('[Getter]','special');}}else{if(desc.set){str=ctx.stylize('[Setter]','special');}}if(!hasOwnProperty(visibleKeys,key)){name='['+key+']';}if(!str){if(ctx.seen.indexOf(desc.value)<0){if(isNull(recurseTimes)){str=formatValue(ctx,desc.value,null);}else{str=formatValue(ctx,desc.value,recurseTimes-1);}if(str.indexOf('\\n')>-1){if(array){str=str.split('\\n').map(function(line){return'  '+line;}).join('\\n').substr(2);}else{str='\\n'+str.split('\\n').map(function(line){return'   '+line;}).join('\\n');}}}else{str=ctx.stylize('[Circular]','special');}}if(isUndefined(name)){if(array&&key.match(/^\\d+$/)){return str;}name=JSON.stringify(''+key);if(name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)){name=name.substr(1,name.length-2);name=ctx.stylize(name,'name');}else{name=name.replace(/'/g,\"\\\\'\").replace(/\\\\\"/g,'\"').replace(/(^\"|\"$)/g,\"'\");name=ctx.stylize(name,'string');}}return name+': '+str;}function reduceToSingleString(output,base,braces){var numLinesEst=0;var length=output.reduce(function(prev,cur){numLinesEst++;if(cur.indexOf('\\n')>=0)numLinesEst++;return prev+cur.replace(/\\u001b\\[\\d\\d?m/g,'').length+1;},0);if(length>60){return braces[0]+(base===''?'':base+'\\n ')+' '+output.join(',\\n  ')+' '+braces[1];}return braces[0]+base+' '+output.join(', ')+' '+braces[1];}// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar){return Array.isArray(ar);}exports.isArray=isArray;function isBoolean(arg){return typeof arg==='boolean';}exports.isBoolean=isBoolean;function isNull(arg){return arg===null;}exports.isNull=isNull;function isNullOrUndefined(arg){return arg==null;}exports.isNullOrUndefined=isNullOrUndefined;function isNumber(arg){return typeof arg==='number';}exports.isNumber=isNumber;function isString(arg){return typeof arg==='string';}exports.isString=isString;function isSymbol(arg){return(typeof arg===\"undefined\"?\"undefined\":_typeof(arg))==='symbol';}exports.isSymbol=isSymbol;function isUndefined(arg){return arg===void 0;}exports.isUndefined=isUndefined;function isRegExp(re){return isObject(re)&&objectToString(re)==='[object RegExp]';}exports.isRegExp=isRegExp;function isObject(arg){return(typeof arg===\"undefined\"?\"undefined\":_typeof(arg))==='object'&&arg!==null;}exports.isObject=isObject;function isDate(d){return isObject(d)&&objectToString(d)==='[object Date]';}exports.isDate=isDate;function isError(e){return isObject(e)&&(objectToString(e)==='[object Error]'||e instanceof Error);}exports.isError=isError;function isFunction(arg){return typeof arg==='function';}exports.isFunction=isFunction;function isPrimitive(arg){return arg===null||typeof arg==='boolean'||typeof arg==='number'||typeof arg==='string'||(typeof arg===\"undefined\"?\"undefined\":_typeof(arg))==='symbol'||// ES6 symbol\ntypeof arg==='undefined';}exports.isPrimitive=isPrimitive;exports.isBuffer=require('./support/isBuffer');function objectToString(o){return Object.prototype.toString.call(o);}function pad(n){return n<10?'0'+n.toString(10):n.toString(10);}var months=['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];// 26 Feb 16:19:34\nfunction timestamp(){var d=new Date();var time=[pad(d.getHours()),pad(d.getMinutes()),pad(d.getSeconds())].join(':');return[d.getDate(),months[d.getMonth()],time].join(' ');}// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log=function(){console.log('%s - %s',timestamp(),exports.format.apply(exports,arguments));};/**\n             * Inherit the prototype methods from one constructor into another.\n             *\n             * The Function.prototype.inherits from lang.js rewritten as a standalone\n             * function (not on Function.prototype). NOTE: If this file is to be loaded\n             * during bootstrapping this function needs to be rewritten using some native\n             * functions as prototype setup using normal JavaScript does not work as\n             * expected during bootstrapping (see mirror.js in r114903).\n             *\n             * @param {function} ctor Constructor function which needs to inherit the\n             *     prototype.\n             * @param {function} superCtor Constructor function to inherit prototype from.\n             */exports.inherits=require('inherits');exports._extend=function(origin,add){// Don't do anything if add isn't an object\nif(!add||!isObject(add))return origin;var keys=Object.keys(add);var i=keys.length;while(i--){origin[keys[i]]=add[keys[i]];}return origin;};function hasOwnProperty(obj,prop){return Object.prototype.hasOwnProperty.call(obj,prop);}}).call(this,require('_process'),typeof global!==\"undefined\"?global:typeof self!==\"undefined\"?self:typeof window!==\"undefined\"?window:{});},{\"./support/isBuffer\":72,\"_process\":52,\"inherits\":71}],74:[function(require,module,exports){// created by @HenrikJoreteg\nvar prefix;var version;if(window.mozRTCPeerConnection||navigator.mozGetUserMedia){prefix='moz';version=parseInt(navigator.userAgent.match(/Firefox\\/([0-9]+)\\./)[1],10);}else if(window.webkitRTCPeerConnection||navigator.webkitGetUserMedia){prefix='webkit';version=navigator.userAgent.match(/Chrom(e|ium)/)&&parseInt(navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./)[2],10);}var PC=window.RTCPeerConnection||window.mozRTCPeerConnection||window.webkitRTCPeerConnection;var IceCandidate=window.mozRTCIceCandidate||window.RTCIceCandidate;var SessionDescription=window.mozRTCSessionDescription||window.RTCSessionDescription;var MediaStream=window.webkitMediaStream||window.MediaStream;var screenSharing=window.location.protocol==='https:'&&(prefix==='webkit'&&version>=26||prefix==='moz'&&version>=33);var AudioContext=window.AudioContext||window.webkitAudioContext;var videoEl=document.createElement('video');var supportVp8=videoEl&&videoEl.canPlayType&&videoEl.canPlayType('video/webm; codecs=\"vp8\", vorbis')===\"probably\";var getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.msGetUserMedia||navigator.mozGetUserMedia;// export support flags and constructors.prototype && PC\nmodule.exports={prefix:prefix,browserVersion:version,support:!!PC&&!!getUserMedia,// new support style\nsupportRTCPeerConnection:!!PC,supportVp8:supportVp8,supportGetUserMedia:!!getUserMedia,supportDataChannel:!!(PC&&PC.prototype&&PC.prototype.createDataChannel),supportWebAudio:!!(AudioContext&&AudioContext.prototype.createMediaStreamSource),supportMediaStream:!!(MediaStream&&MediaStream.prototype.removeTrack),supportScreenSharing:!!screenSharing,// constructors\nAudioContext:AudioContext,PeerConnection:PC,SessionDescription:SessionDescription,IceCandidate:IceCandidate,MediaStream:MediaStream,getUserMedia:getUserMedia};},{}],75:[function(require,module,exports){/*\nWildEmitter.js is a slim little event emitter by @henrikjoreteg largely based\non @visionmedia's Emitter from UI Kit.\n\nWhy? I wanted it standalone.\n\nI also wanted support for wildcard emitters like this:\n\nemitter.on('*', function (eventName, other, event, payloads) {\n\n});\n\nemitter.on('somenamespace*', function (eventName, payloads) {\n\n});\n\nPlease note that callbacks triggered by wildcard registered events also get\nthe event name as the first argument.\n*/module.exports=WildEmitter;function WildEmitter(){}WildEmitter.mixin=function(constructor){var prototype=constructor.prototype||constructor;prototype.isWildEmitter=true;// Listen on the given `event` with `fn`. Store a group name if present.\nprototype.on=function(event,groupName,fn){this.callbacks=this.callbacks||{};var hasGroup=arguments.length===3,group=hasGroup?arguments[1]:undefined,func=hasGroup?arguments[2]:arguments[1];func._groupName=group;(this.callbacks[event]=this.callbacks[event]||[]).push(func);return this;};// Adds an `event` listener that will be invoked a single\n// time then automatically removed.\nprototype.once=function(event,groupName,fn){var self=this,hasGroup=arguments.length===3,group=hasGroup?arguments[1]:undefined,func=hasGroup?arguments[2]:arguments[1];function on(){self.off(event,on);func.apply(this,arguments);}this.on(event,group,on);return this;};// Unbinds an entire group\nprototype.releaseGroup=function(groupName){this.callbacks=this.callbacks||{};var item,i,len,handlers;for(item in this.callbacks){handlers=this.callbacks[item];for(i=0,len=handlers.length;i<len;i++){if(handlers[i]._groupName===groupName){//console.log('removing');\n// remove it and shorten the array we're looping through\nhandlers.splice(i,1);i--;len--;}}}return this;};// Remove the given callback for `event` or all\n// registered callbacks.\nprototype.off=function(event,fn){this.callbacks=this.callbacks||{};var callbacks=this.callbacks[event],i;if(!callbacks)return this;// remove all handlers\nif(arguments.length===1){delete this.callbacks[event];return this;}// remove specific handler\ni=callbacks.indexOf(fn);callbacks.splice(i,1);if(callbacks.length===0){delete this.callbacks[event];}return this;};/// Emit `event` with the given args.\n// also calls any `*` handlers\nprototype.emit=function(event){this.callbacks=this.callbacks||{};var args=[].slice.call(arguments,1),callbacks=this.callbacks[event],specialCallbacks=this.getWildcardCallbacks(event),i,len,item,listeners;if(callbacks){listeners=callbacks.slice();for(i=0,len=listeners.length;i<len;++i){if(!listeners[i]){break;}listeners[i].apply(this,args);}}if(specialCallbacks){len=specialCallbacks.length;listeners=specialCallbacks.slice();for(i=0,len=listeners.length;i<len;++i){if(!listeners[i]){break;}listeners[i].apply(this,[event].concat(args));}}return this;};// Helper for for finding special wildcard event handlers that match the event\nprototype.getWildcardCallbacks=function(eventName){this.callbacks=this.callbacks||{};var item,split,result=[];for(item in this.callbacks){split=item.split('*');if(item==='*'||split.length===2&&eventName.slice(0,split[0].length)===split[0]){result=result.concat(this.callbacks[item]);}}return result;};};WildEmitter.mixin(WildEmitter);},{}],76:[function(require,module,exports){/**\n         * Module dependencies.\n         */var global=window;//(function() { return this; })();\n/**\n         * WebSocket constructor.\n         */var WebSocket=global.WebSocket||global.MozWebSocket;/**\n         * Module exports.\n         */module.exports=WebSocket?ws:null;/**\n         * WebSocket constructor.\n         *\n         * The third `opts` options object gets ignored in web browsers, since it's\n         * non-standard, and throws a TypeError if passed to the constructor.\n         * See: https://github.com/einaros/ws/issues/227\n         *\n         * @param {String} uri\n         * @param {Array} protocols (optional)\n         * @param {Object) opts (optional)\n         * @api public\n         */function ws(uri,protocols,opts){var instance;if(protocols){instance=new WebSocket(uri,protocols);}else{instance=new WebSocket(uri);}return instance;}if(WebSocket)ws.prototype=WebSocket.prototype;},{}],77:[function(require,module,exports){var util=require('util');var webrtcSupport=require('webrtcsupport');var PeerConnection=require('rtcpeerconnection');var WildEmitter=require('wildemitter');var FileTransfer=require('filetransfer');// the inband-v1 protocol is sending metadata inband in a serialized JSON object\n// followed by the actual data. Receiver closes the datachannel upon completion\nvar INBAND_FILETRANSFER_V1='https://simplewebrtc.com/protocol/filetransfer#inband-v1';function isAllTracksEnded(stream){var isAllTracksEnded=true;stream.getTracks().forEach(function(t){isAllTracksEnded=t.readyState==='ended'&&isAllTracksEnded;});return isAllTracksEnded;}function Peer(options){///MLUpdate///\nthis.chunkedMessages=new Object();this.nickName=options.nickName;this.mode=options.mode;///MLUpdate///\nvar self=this;// call emitter constructor\nWildEmitter.call(this);this.id=options.id;this.parent=options.parent;this.type=options.type||'video';this.oneway=options.oneway||false;this.sharemyscreen=options.sharemyscreen||false;this.browserPrefix=options.prefix;this.stream=options.stream;this.enableDataChannels=options.enableDataChannels===undefined?this.parent.config.enableDataChannels:options.enableDataChannels;this.receiveMedia=options.receiveMedia||this.parent.config.receiveMedia;this.channels={};this.sid=options.sid||Date.now().toString();// Create an RTCPeerConnection via the polyfill\n///MLUpdate///\nvar params={vidEncoder:options.vidEncoder,vidBitrate:options.vidBitrate,audEncoder:options.audEncoder,audBitrate:options.audBitrate///MLUpdate///\n};this.pc=new PeerConnection(this.parent.config.peerConnectionConfig,this.parent.config.peerConnectionConstraints,params);this.pc.on('ice',this.onIceCandidate.bind(this));this.pc.on('endOfCandidates',function(event){self.send('endOfCandidates',event);});this.pc.on('offer',function(offer){if(self.parent.config.nick)offer.nick=self.parent.config.nick;self.send('offer',offer);});this.pc.on('answer',function(answer){if(self.parent.config.nick)answer.nick=self.parent.config.nick;self.send('answer',answer);});this.pc.on('addStream',this.handleRemoteStreamAdded.bind(this));this.pc.on('addChannel',this.handleDataChannelAdded.bind(this));this.pc.on('removeStream',this.handleStreamRemoved.bind(this));// Just fire negotiation needed events for now\n// When browser re-negotiation handling seems to work\n// we can use this as the trigger for starting the offer/answer process\n// automatically. We'll just leave it be for now while this stabalizes.\nthis.pc.on('negotiationNeeded',this.emit.bind(this,'negotiationNeeded'));this.pc.on('iceConnectionStateChange',this.emit.bind(this,'iceConnectionStateChange'));this.pc.on('iceConnectionStateChange',function(){switch(self.pc.iceConnectionState){case'failed':// currently, in chrome only the initiator goes to failed\n// so we need to signal this to the peer\nif(self.pc.pc.localDescription.type==='offer'){self.parent.emit('iceFailed',self);self.send('connectivityError');}break;}});this.pc.on('signalingStateChange',this.emit.bind(this,'signalingStateChange'));this.logger=this.parent.logger;// handle screensharing/broadcast mode\nif(options.type==='screen'){if(this.parent.localScreens&&this.parent.localScreens[0]&&this.sharemyscreen){this.logger.log('adding local screen stream to peer connection');this.pc.addStream(this.parent.localScreens[0]);this.broadcaster=options.broadcaster;}}else{this.parent.localStreams.forEach(function(stream){self.pc.addStream(stream);});}this.on('channelOpen',function(channel){///MLUpdate///\nthis.parent.emit('dataChannelOpened',channel,this);///MLUpdate///\nif(channel.protocol===INBAND_FILETRANSFER_V1){channel.onmessage=function(event){var metadata=JSON.parse(event.data);var receiver=new FileTransfer.Receiver();receiver.receive(metadata,channel);self.emit('fileTransfer',metadata,receiver);receiver.on('receivedFile',function(file,metadata){receiver.channel.close();});};}});// proxy events to parent\nthis.on('*',function(){self.parent.emit.apply(self.parent,arguments);});}util.inherits(Peer,WildEmitter);Peer.prototype.handleMessage=function(message){var self=this;this.logger.log('getting',message.type,message);if(message.prefix)this.browserPrefix=message.prefix;if(message.type==='offer'){if(!this.nick)this.nick=message.payload.nick;delete message.payload.nick;this.pc.handleOffer(message.payload,function(err){if(err){return;}// auto-accept\nself.pc.answer(function(err,sessionDescription){//self.send('answer', sessionDescription);\n});});}else if(message.type==='answer'){if(!this.nick)this.nick=message.payload.nick;delete message.payload.nick;this.pc.handleAnswer(message.payload);}else if(message.type==='candidate'){this.pc.processIce(message.payload);}else if(message.type==='connectivityError'){this.parent.emit('connectivityError',self);}else if(message.type==='mute'){this.parent.emit('mute',{id:message.from,name:message.payload.name});}else if(message.type==='unmute'){this.parent.emit('unmute',{id:message.from,name:message.payload.name});}else if(message.type==='endOfCandidates'){// Edge requires an end-of-candidates. Since only Edge will have mLines or tracks on the\n// shim this will only be called in Edge.\nvar mLines=this.pc.pc.transceivers||[];mLines.forEach(function(mLine){if(mLine.iceTransport){mLine.iceTransport.addRemoteCandidate({});}});}else if(message.type==='customMessage'){this.parent.emit('customMessage',{id:message.from,message:message.payload});}};// send via signalling channel\nPeer.prototype.send=function(messageType,payload){var message={to:this.id,sid:this.sid,broadcaster:this.broadcaster,roomType:this.type,type:messageType,payload:payload,prefix:webrtcSupport.prefix};this.logger.log('sending',messageType,message);this.parent.emit('message',message);};// send via data channel\n// returns true when message was sent and false if channel is not open\nPeer.prototype.sendDirectly=function(channel,messageType,payload){var message={type:messageType,payload:payload};this.logger.log('sending via datachannel',channel,messageType,message);var dc=this.getDataChannel(channel);if(dc.readyState!='open')return false;var splitted=message.payload.match(/(.|[\\r\\10000]){1,10000}/g);function guid(){function s4(){return Math.floor((1+Math.random())*0x10000).toString(16).substring(1);}return s4()+s4()+'-'+s4()+'-'+s4()+'-'+s4()+'-'+s4()+s4()+s4();}//Chunkify message and send through datachannel\nvar guid=guid();for(var i=0;i<splitted.length;i++){message.payload=splitted[i];message.messageId=guid;message.chunk=i;message.chunksCount=splitted.length;dc.send(JSON.stringify(message));}return true;};// Internal method registering handlers for a data channel and emitting events on the peer\nPeer.prototype._observeDataChannel=function(channel){var self=this;channel.onclose=this.emit.bind(this,'channelClose',channel);channel.onerror=this.emit.bind(this,'channelError',channel);channel.onmessage=function(event){var message=JSON.parse(event.data);var nChunksCount=parseInt(message.chunksCount,10);var nChunk=parseInt(message.chunk,10);if(message.chunksCount&&nChunksCount>1){if(self.chunkedMessages[message.messageId]){var temp=self.chunkedMessages[message.messageId];self.chunkedMessages[message.messageId]=temp+message.payload;if(nChunksCount==nChunk+1){message.payload=self.chunkedMessages[message.messageId];delete self.chunkedMessages[message.messageId];}else return;}else if(message.chunk==0){self.chunkedMessages[message.messageId]=message.payload;return;}}self.emit('channelMessage',self,channel.label,message,channel,event);};channel.onopen=this.emit.bind(this,'channelOpen',channel);};// Fetch or create a data channel by the given name\nPeer.prototype.getDataChannel=function(name,opts){if(!webrtcSupport.supportDataChannel)return this.emit('error',new Error('createDataChannel not supported'));var channel=this.channels[name];opts||(opts={});if(channel)return channel;// if we don't have one by this label, create it\nchannel=this.channels[name]=this.pc.createDataChannel(name,opts);this._observeDataChannel(channel);return channel;};Peer.prototype.onIceCandidate=function(candidate){if(this.closed)return;if(candidate){var pcConfig=this.parent.config.peerConnectionConfig;if(webrtcSupport.prefix==='moz'&&pcConfig&&pcConfig.iceTransports&&candidate.candidate&&candidate.candidate.candidate&&candidate.candidate.candidate.indexOf(pcConfig.iceTransports)<0){this.logger.log('Ignoring ice candidate not matching pcConfig iceTransports type: ',pcConfig.iceTransports);}else{this.send('candidate',candidate);}}else{this.logger.log(\"End of candidates.\");}};Peer.prototype.start=function(){var self=this;// well, the webrtc api requires that we either\n// a) create a datachannel a priori\n// b) do a renegotiation later to add the SCTP m-line\n// Let's do (a) first...\nif(this.enableDataChannels){this.getDataChannel('simplewebrtc');}this.pc.offer(this.receiveMedia,function(err,sessionDescription){//self.send('offer', sessionDescription);\n});};Peer.prototype.icerestart=function(){var constraints=this.receiveMedia;constraints.mandatory.IceRestart=true;this.pc.offer(constraints,function(err,success){});};Peer.prototype.end=function(){if(this.closed)return;this.pc.close();this.handleStreamRemoved();};Peer.prototype.handleRemoteStreamAdded=function(event){var self=this;if(this.stream){this.logger.warn('Already have a remote stream');}else{this.stream=event.stream;this.stream.getTracks().forEach(function(track){track.addEventListener('ended',function(){if(isAllTracksEnded(self.stream)){self.end();}});});this.parent.emit('peerStreamAdded',this);}};Peer.prototype.handleStreamRemoved=function(){var peerIndex=this.parent.peers.indexOf(this);if(peerIndex>-1){this.parent.peers.splice(peerIndex,1);this.closed=true;this.parent.emit('peerStreamRemoved',this);this.pc=null;}};Peer.prototype.handleDataChannelAdded=function(channel){this.channels[channel.label]=channel;this._observeDataChannel(channel);};Peer.prototype.sendFile=function(file){var sender=new FileTransfer.Sender();var dc=this.getDataChannel('filetransfer'+new Date().getTime(),{protocol:INBAND_FILETRANSFER_V1});// override onopen\ndc.onopen=function(){dc.send(JSON.stringify({size:file.size,name:file.name}));sender.send(file,dc);};// override onclose\ndc.onclose=function(){console.log('sender received transfer');sender.emit('complete');};return sender;};module.exports=Peer;},{\"filetransfer\":35,\"rtcpeerconnection\":53,\"util\":73,\"webrtcsupport\":74,\"wildemitter\":75}],78:[function(require,module,exports){var WebRTC=require('./webrtc');var WildEmitter=require('wildemitter');var webrtcSupport=require('webrtcsupport');var attachMediaStream=require('attachmediastream');var mockconsole=require('mockconsole');var SocketIoConnection=require('./socketioconnection');function SimpleWebRTC(opts){var self=this;var options=opts||{};var config=this.config={target:'',url:'https://sandbox.simplewebrtc.com:443/',socketio:{/* 'force new connection':true*/},connection:null,debug:false,localVideoEl:'',remoteVideosEl:'',enableDataChannels:true,autoRequestMedia:false,autoRemoveVideos:true,adjustPeerVolume:false,peerVolumeWhenSpeaking:0.25,media:{video:true,audio:true},receiveMedia:{offerToReceiveAudio:1,offerToReceiveVideo:1},localVideo:{autoplay:true,mirror:true,muted:true}};var item,connection;// We also allow a 'logger' option. It can be any object that implements\n// log, warn, and error methods.\n// We log nothing by default, following \"the rule of silence\":\n// http://www.linfo.org/rule_of_silence.html\nthis.logger=function(){// we assume that if you're in debug mode and you didn't\n// pass in a logger, you actually want to log as much as\n// possible.\nif(opts.debug){return opts.logger||console;}else{// or we'll use your logger which should have its own logic\n// for output. Or we'll return the no-op.\nreturn opts.logger||mockconsole;}}();// set our config from options\nfor(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}// attach detected support for convenience\nthis.capabilities=webrtcSupport;// call WildEmitter constructor\nWildEmitter.call(this);// create default SocketIoConnection if it's not passed in\nif(this.config.connection===null){connection=this.connection=new SocketIoConnection(this.config);}else{connection=this.connection=this.config.connection;}connection.on('connect',function(){self.emit('connectionReady',connection.getSessionid());self.sessionReady=true;self.testReadiness();});connection.on('message',function(message){var peers=self.webrtc.getPeers(message.from,message.roomType);var peer;if(message.type==='offer'){if(peers.length){peers.forEach(function(p){if(p.sid==message.sid)peer=p;});//if (!peer) peer = peers[0]; // fallback for old protocol versions\n}if(!peer){peer=self.webrtc.createPeer({id:message.from,sid:message.sid,nickName:message.fromNickName,type:message.roomType,enableDataChannels:self.config.enableDataChannels&&message.roomType!=='screen',sharemyscreen:message.roomType==='screen'&&!message.broadcaster,broadcaster:message.roomType==='screen'&&!message.broadcaster?self.connection.getSessionid():null});self.emit('createdPeer',peer);}peer.handleMessage(message);}else if(peers.length){peers.forEach(function(peer){if(message.sid){if(peer.sid===message.sid){peer.handleMessage(message);}}else{peer.handleMessage(message);}});}});connection.on('remove',function(room){if(room.id!==self.connection.getSessionid()){self.webrtc.removePeers(room.id,room.type);}});// instantiate our main WebRTC helper\n// using same logger from logic here\nopts.logger=this.logger;opts.debug=false;this.webrtc=new WebRTC(opts);// attach a few methods from underlying lib to simple.\n['mute','unmute','pauseVideo','resumeVideo','pause','resume','sendToAll','sendDirectlyToAll','getPeers'].forEach(function(method){self[method]=self.webrtc[method].bind(self.webrtc);});// proxy events from WebRTC\nthis.webrtc.on('*',function(){self.emit.apply(self,arguments);});// log all events in debug mode\nif(config.debug){this.on('*',this.logger.log.bind(this.logger,'SimpleWebRTC event:'));}// check for readiness\nthis.webrtc.on('localStream',function(){self.testReadiness();});this.webrtc.on('message',function(payload){self.connection.emit('message',payload);});this.webrtc.on('peerStreamAdded',this.handlePeerStreamAdded.bind(this));this.webrtc.on('peerStreamRemoved',this.handlePeerStreamRemoved.bind(this));// echo cancellation attempts\nif(this.config.adjustPeerVolume){this.webrtc.on('speaking',this.setVolumeForAll.bind(this,this.config.peerVolumeWhenSpeaking));this.webrtc.on('stoppedSpeaking',this.setVolumeForAll.bind(this,1));}connection.on('stunservers',function(args){// resets/overrides the config\n//Changes url to urls\nvar length=args.length;if(length>0){self.webrtc.config.peerConnectionConfig.iceServers=[];for(var i=0;i<length;i++){if(args[i].url)self.webrtc.config.peerConnectionConfig.iceServers.push({\"urls\":args[i].url});else self.webrtc.config.peerConnectionConfig.iceServers.push(args[i]);}}self.emit('stunservers',self.webrtc.config.peerConnectionConfig.iceServers);});connection.on('turnservers',function(args){// appends to the config\nself.webrtc.config.peerConnectionConfig.iceServers=self.webrtc.config.peerConnectionConfig.iceServers.concat(args);self.emit('turnservers',args);});connection.on('loginjanusrequest',function(args){var peer=self.webrtc.createPeer({id:'janus',type:'video',// nickName: client.nickName,\nmode:'sender',//vidEncoder: client.vidEncoder,\n//vidBitrate: client.vidBitrate,\n//audEncoder: client.audEncoder,\n//audBitrate: client.audBitrate,\nenableDataChannels:false,receiveMedia:{offerToReceiveAudio:1,offerToReceiveVideo:1}});self.emit('createdPeer',peer);peer.start();});this.webrtc.on('iceFailed',function(peer){// local ice failure\n});this.webrtc.on('connectivityError',function(peer){// remote ice failure\n});// sending mute/unmute to all peers\nthis.webrtc.on('audioOn',function(){self.webrtc.sendToAll('unmute',{name:'audio'});});this.webrtc.on('audioOff',function(){self.webrtc.sendToAll('mute',{name:'audio'});});this.webrtc.on('videoOn',function(){self.webrtc.sendToAll('unmute',{name:'video'});});this.webrtc.on('videoOff',function(){self.webrtc.sendToAll('mute',{name:'video'});});// screensharing events\nthis.webrtc.on('localScreen',function(stream){var item,el=document.createElement('video'),container=self.getRemoteVideoContainer();el.oncontextmenu=function(){return false;};el.id='localScreen';attachMediaStream(stream,el);if(container){container.appendChild(el);}self.emit('localScreenAdded',el);self.connection.emit('shareScreen');self.webrtc.peers.forEach(function(existingPeer){var peer;if(existingPeer.type==='video'){peer=self.webrtc.createPeer({id:existingPeer.id,nickName:existingPeer.nickName,mode:existingPeer.mode,type:'screen',sharemyscreen:true,enableDataChannels:false,receiveMedia:{offerToReceiveAudio:0,offerToReceiveVideo:0},broadcaster:self.connection.getSessionid()});self.emit('createdPeer',peer);peer.start();}});});this.webrtc.on('localScreenStopped',function(stream){if(self.getLocalScreen()){self.stopScreenShare();}/*\n        self.connection.emit('unshareScreen');\n        self.webrtc.peers.forEach(function (peer) {\n            if (peer.sharemyscreen) {\n                peer.end();\n            }\n        });\n        */});this.webrtc.on('channelMessage',function(peer,label,data){if(data.type=='volume'){self.emit('remoteVolumeChange',peer,data.volume);}});if(this.config.autoRequestMedia)this.startLocalVideo();}SimpleWebRTC.prototype=Object.create(WildEmitter.prototype,{constructor:{value:SimpleWebRTC}});SimpleWebRTC.prototype.leaveRoom=function(){if(this.roomName){this.connection.emit('leave');while(this.webrtc.peers.length){this.webrtc.peers[0].end();}if(this.getLocalScreen()){this.stopScreenShare();}this.emit('leftRoom',this.roomName);this.roomName=undefined;}};SimpleWebRTC.prototype.disconnect=function(){this.connection.disconnect();delete this.connection;};///MLUpdate///\nSimpleWebRTC.prototype.sendDataChannelMessageToAll=function(message){this.webrtc.sendDirectlyToAll('simplewebrtc','custommessage',message);};SimpleWebRTC.prototype.sendDataChannelMessageToPeer=function(peerId,message){var foundId=false;this.webrtc.peers.forEach(function(peer){if(peer.enableDataChannels&&peer.id==peerId){peer.sendDirectly('simplewebrtc','custommessage',message);foundId=true;}});//Try to find peer by name\nif(!foundId){this.webrtc.peers.forEach(function(peer){if(peer.enableDataChannels&&peer.nickName==peerId){peer.sendDirectly('simplewebrtc','custommessage',message);}});}};///MLUpdate///\nSimpleWebRTC.prototype.handlePeerStreamAdded=function(peer){var self=this;var container=this.getRemoteVideoContainer();var video=attachMediaStream(peer.stream);// store video element as part of peer for easy removal\npeer.videoEl=video;video.id=this.getDomId(peer);if(container)container.appendChild(video);this.emit('videoAdded',video,peer);// send our mute status to new peer if we're muted\n// currently called with a small delay because it arrives before\n// the video element is created otherwise (which happens after\n// the async setRemoteDescription-createAnswer)\nwindow.setTimeout(function(){if(!self.webrtc.isAudioEnabled()){peer.send('mute',{name:'audio'});}if(!self.webrtc.isVideoEnabled()){peer.send('mute',{name:'video'});}},250);};SimpleWebRTC.prototype.handlePeerStreamRemoved=function(peer){var container=this.getRemoteVideoContainer();var videoEl=peer.videoEl;if(this.config.autoRemoveVideos&&container&&videoEl){container.removeChild(videoEl);}if(videoEl)this.emit('videoRemoved',videoEl,peer);};SimpleWebRTC.prototype.getDomId=function(peer){return[peer.id,peer.type,peer.broadcaster?'broadcasting':'incoming'].join('_');};// set volume on video tag for all peers takse a value between 0 and 1\nSimpleWebRTC.prototype.setVolumeForAll=function(volume){this.webrtc.peers.forEach(function(peer){if(peer.videoEl)peer.videoEl.volume=volume;});};SimpleWebRTC.prototype.joinRoom=function(name,cb){var self=this;this.roomName=name;this.connection.emit('join',name,function(err,roomDescription){console.log('join CB',err,roomDescription);if(err){self.emit('error',err);}else{var id,client,type,peer;for(id in roomDescription.clients){client=roomDescription.clients[id];for(type in client){if(self.config.target){if(typeof client[type]==='boolean'&&client[type]&&(id==self.config.target||client.nickName==self.config.target)){peer=self.webrtc.createPeer({id:id,type:type,nickName:client.nickName,mode:client.mode,vidEncoder:client.vidEncoder,vidBitrate:client.vidBitrate,audEncoder:client.audEncoder,audBitrate:client.audBitrate,enableDataChannels:self.config.enableDataChannels&&type!=='screen',receiveMedia:{offerToReceiveAudio:type!=='screen'&&self.config.receiveMedia.offerToReceiveAudio?1:0,offerToReceiveVideo:self.config.receiveMedia.offerToReceiveVideo}});self.emit('createdPeer',peer);if(client.multicastType&&client.multicastType=='janus'){var janusLisnterMsg={to:id,toName:client.nickName,type:'januslistner'};self.connection.emit('message',janusLisnterMsg);}else peer.start();}}else{if(typeof client[type]==='boolean'&&client[type]){peer=self.webrtc.createPeer({id:id,type:type,nickName:client.nickName,mode:client.mode,vidEncoder:client.vidEncoder,vidBitrate:client.vidBitrate,audEncoder:client.audEncoder,audBitrate:client.audBitrate,enableDataChannels:self.config.enableDataChannels&&type!=='screen',receiveMedia:{offerToReceiveAudio:type!=='screen'&&self.config.receiveMedia.offerToReceiveAudio?1:0,offerToReceiveVideo:self.config.receiveMedia.offerToReceiveVideo}});self.emit('createdPeer',peer);peer.start();}}}}}if(cb)cb(err,roomDescription);self.emit('joinedRoom',name);});};SimpleWebRTC.prototype.getEl=function(idOrEl){if(typeof idOrEl==='string'){return document.getElementById(idOrEl);}else{return idOrEl;}};SimpleWebRTC.prototype.startLocalVideo=function(){var self=this;this.webrtc.start(this.config.media,function(err,stream){if(err){self.emit('localMediaError',err);}else{attachMediaStream(stream,self.getLocalVideoContainer(),self.config.localVideo);}});};SimpleWebRTC.prototype.stopLocalVideo=function(){this.webrtc.stop();};// this accepts either element ID or element\n// and either the video tag itself or a container\n// that will be used to put the video tag into.\nSimpleWebRTC.prototype.getLocalVideoContainer=function(){var el=this.getEl(this.config.localVideoEl);if(el&&el.tagName==='VIDEO'){el.oncontextmenu=function(){return false;};return el;}else if(el){var video=document.createElement('video');video.oncontextmenu=function(){return false;};el.appendChild(video);return video;}else{return;}};SimpleWebRTC.prototype.getRemoteVideoContainer=function(){return this.getEl(this.config.remoteVideosEl);};SimpleWebRTC.prototype.shareScreen=function(cb){this.webrtc.startScreenShare(cb);};SimpleWebRTC.prototype.getLocalScreen=function(){return this.webrtc.localScreens&&this.webrtc.localScreens[0];};SimpleWebRTC.prototype.stopScreenShare=function(){this.connection.emit('unshareScreen');var videoEl=document.getElementById('localScreen');var container=this.getRemoteVideoContainer();if(this.config.autoRemoveVideos&&container&&videoEl){container.removeChild(videoEl);}// a hack to emit the event the removes the video\n// element that we want\nif(videoEl){this.emit('videoRemoved',videoEl);}if(this.getLocalScreen()){this.webrtc.stopScreenShare();}this.webrtc.peers.forEach(function(peer){if(peer.broadcaster){peer.end();}});};SimpleWebRTC.prototype.testReadiness=function(){var self=this;if(this.sessionReady){self.emit('readyToCall',self.connection.getSessionid());//if (!this.config.media.video && !this.config.media.audio) {\n//    self.emit('readyToCall', self.connection.getSessionid());\n//} else if (this.webrtc.localStreams.length > 0) {\n//    self.emit('readyToCall', self.connection.getSessionid());\n//}\n}};SimpleWebRTC.prototype.createRoom=function(name,cb){this.roomName=name;if(arguments.length===2){this.connection.emit('create',name,cb);}else{this.connection.emit('create',name);}};SimpleWebRTC.prototype.sendFile=function(){if(!webrtcSupport.dataChannel){return this.emit('error',new Error('DataChannelNotSupported'));}};SimpleWebRTC.prototype.getNickName=function(){if(this.nickName){return this.nickName;}};SimpleWebRTC.prototype.setNickName=function(nickName){if(nickName&&typeof nickName==='string'){this.nickName=nickName;this.connection.emit('nickname',nickName);}};SimpleWebRTC.prototype.setInfo=function(nickName,strongId,mode,multicast){if(arguments.length>1){var nick=nickName||'';var sId=strongId||'';var mod=mode||'';var mc=multicast||'';if(nickName)this.nickName=nickName;if(strongId&&!this.strongId)this.strongId=strongId;if(mode)this.mode=mode;if(multicast)this.multicastType=multicast;this.connection.emit('setinfo',{nickName:nick,strongId:sId,mode:mod,multicastType:mc});}else if(arguments.length==1&&(typeof nickName===\"undefined\"?\"undefined\":_typeof(nickName))=='object'){this.connection.emit('setinfo',nickName);}};module.exports=SimpleWebRTC;},{\"./socketioconnection\":79,\"./webrtc\":80,\"attachmediastream\":3,\"mockconsole\":46,\"webrtcsupport\":74,\"wildemitter\":75}],79:[function(require,module,exports){var io=require('socket.io-client');function SocketIoConnection(config){this.connection=io.connect(config.url,config.socketio);}SocketIoConnection.prototype.on=function(ev,fn){this.connection.on(ev,fn);};SocketIoConnection.prototype.emit=function(){this.connection.emit.apply(this.connection,arguments);};SocketIoConnection.prototype.getSessionid=function(){return this.connection.id;};SocketIoConnection.prototype.disconnect=function(){return this.connection.disconnect();};module.exports=SocketIoConnection;},{\"socket.io-client\":60}],80:[function(require,module,exports){var util=require('util');var webrtcSupport=require('webrtcsupport');var mockconsole=require('mockconsole');var localMedia=require('localmedia');var Peer=require('./peer');function WebRTC(opts){var self=this;var options=opts||{};var config=this.config={debug:false,// makes the entire PC config overridable\npeerConnectionConfig:{},peerConnectionConstraints:{optional:[]},receiveMedia:{offerToReceiveAudio:1,offerToReceiveVideo:1},enableDataChannels:true};var item;if(options.iceServers){config.peerConnectionConfig.iceServersiceServers=options.iceServers;}// We also allow a 'logger' option. It can be any object that implements\n// log, warn, and error methods.\n// We log nothing by default, following \"the rule of silence\":\n// http://www.linfo.org/rule_of_silence.html\nthis.logger=function(){// we assume that if you're in debug mode and you didn't\n// pass in a logger, you actually want to log as much as\n// possible.\nif(opts.debug){return opts.logger||console;}else{// or we'll use your logger which should have its own logic\n// for output. Or we'll return the no-op.\nreturn opts.logger||mockconsole;}}();// set options\nfor(item in options){if(options.hasOwnProperty(item)){this.config[item]=options[item];}}// check for support\nif(!webrtcSupport.support){this.logger.error('Your browser doesn\\'t seem to support WebRTC');}// where we'll store our peer connections\nthis.peers=[];// call localMedia constructor\nlocalMedia.call(this,this.config);this.on('speaking',function(){if(!self.hardMuted){// FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\nself.peers.forEach(function(peer){if(peer.enableDataChannels){var dc=peer.getDataChannel('hark');if(dc.readyState!='open')return;dc.send(JSON.stringify({type:'speaking'}));}});}});this.on('stoppedSpeaking',function(){if(!self.hardMuted){// FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\nself.peers.forEach(function(peer){if(peer.enableDataChannels){var dc=peer.getDataChannel('hark');if(dc.readyState!='open')return;dc.send(JSON.stringify({type:'stoppedSpeaking'}));}});}});this.on('volumeChange',function(volume,treshold){if(!self.hardMuted){// FIXME: should use sendDirectlyToAll, but currently has different semantics wrt payload\nself.peers.forEach(function(peer){if(peer.enableDataChannels){var dc=peer.getDataChannel('hark');if(dc.readyState!='open')return;dc.send(JSON.stringify({type:'volume',volume:volume}));}});}});// log events in debug mode\nif(this.config.debug){this.on('*',function(event,val1,val2){var logger;// if you didn't pass in a logger and you explicitly turning on debug\n// we're just going to assume you're wanting log output with console\nif(self.config.logger===mockconsole){logger=console;}else{logger=self.logger;}logger.log('event:',event,val1,val2);});}}util.inherits(WebRTC,localMedia);WebRTC.prototype.createPeer=function(opts){var peer;opts.parent=this;peer=new Peer(opts);this.peers.push(peer);return peer;};// removes peers\nWebRTC.prototype.removePeers=function(id,type){this.getPeers(id,type).forEach(function(peer){peer.end();});};// fetches all Peer objects by session id and/or type\nWebRTC.prototype.getPeers=function(sessionId,type){return this.peers.filter(function(peer){return(!sessionId||peer.id===sessionId)&&(!type||peer.type===type);});};// sends message to all\nWebRTC.prototype.sendToAll=function(message,payload){this.peers.forEach(function(peer){peer.send(message,payload);});};// sends message to all using a datachannel\n// only sends to anyone who has an open datachannel\nWebRTC.prototype.sendDirectlyToAll=function(channel,message,payload){this.peers.forEach(function(peer){if(peer.enableDataChannels){peer.sendDirectly(channel,message,payload);}});};module.exports=WebRTC;},{\"./peer\":77,\"localmedia\":44,\"mockconsole\":46,\"util\":73,\"webrtcsupport\":74}]},{},[78])(78);});\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(6)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _helpers = __webpack_require__(0);\n\nvar _vffData = __webpack_require__(2);\n\nvar _consts = __webpack_require__(4);\n\n// import {bindSyncEvents} from './interactionEvents';\n\n\nfunction initDOM() {\n    var controls = document.querySelectorAll('[' + _consts.ATTRIBUTE.CONTROL + ']');\n    controls.forEach(function (control) {\n\n        var name = control.getAttribute(_consts.ATTRIBUTE.CONTROL);\n        control.setAttribute(_consts.ATTRIBUTE.BIND, name);\n\n        /*********************************************************************************************/\n        //TODO handle options\n        var options = control.getAttribute(_consts.ATTRIBUTE.OPTIONS) || '{}';\n        try {\n            //TODO test it\n            options = (0, _helpers.parseRJSON)(options);\n        } catch (err) {\n            options = {};\n        }\n\n        //TODO what is this and why do i need this?\n        if (control.options && typeof control.options === 'function') {\n            options = Object.assign({}, control.options(), options);\n        }\n        options.element = control;\n        /*********************************************************************************************/\n\n        var exposed = control.expose ? control.expose() : {};\n\n        for (var prop in exposed) {\n            if (exposed.hasOwnProperty(prop)) {\n\n                var path = exposed[prop],\n                    ui = void 0,\n                    attribute = void 0;\n                if (_typeof(exposed[prop]) === 'object') {\n                    path = exposed[prop].path;\n                    ui = exposed[prop].ui;\n                    attribute = exposed[prop].attribute;\n                }\n\n                _vffData.vffData.registerControl(name + _consts.EXPOSE_DELIMITER + prop, attribute ? control.getAttribute(path) : (0, _helpers.getByPath)(control, path), { bindTo: path, ui: ui, attribute: attribute });\n            }\n        }\n        if (control instanceof HTMLTextAreaElement || control instanceof HTMLInputElement) {\n            _vffData.vffData.registerControl(name, control.value);\n        }\n    });\n    var binds = document.querySelectorAll('[' + _consts.ATTRIBUTE.BIND + ']');\n    binds.forEach(function (controlEl) {\n        if (controlEl instanceof HTMLTextAreaElement || controlEl instanceof HTMLInputElement) {\n            controlEl.addEventListener('keyup', function () {\n                var control = _vffData.vffData.getControl(controlEl.getAttribute(_consts.ATTRIBUTE.BIND));\n                if (control) {\n                    control.updateValue(controlEl.value);\n                }\n            });\n        }\n    });\n}\n\n// function closest(element, selector){\n//\n//     while (element) {\n//         if (element.matches(selector)) {\n//             return element;\n//         }\n//         element = element.parentElement;\n//     }\n//\n// }\n//\n// function initSync(){\n//     let elements = document.querySelectorAll('[vff-sync]');\n//     elements.forEach((element) => {\n//         bindSyncEvents(element);\n//     });\n// }\n\n\nmodule.exports = {\n    init: function init() {\n        window.addEventListener('load', function () {\n            initDOM();\n        });\n    },\n    _init: initDOM\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9pbml0RE9NLmpzP2YzYmQiXSwibmFtZXMiOlsiaW5pdERPTSIsImNvbnRyb2xzIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiQVRUUklCVVRFIiwiQ09OVFJPTCIsImZvckVhY2giLCJuYW1lIiwiY29udHJvbCIsImdldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIkJJTkQiLCJvcHRpb25zIiwiT1BUSU9OUyIsImVyciIsIk9iamVjdCIsImFzc2lnbiIsImVsZW1lbnQiLCJleHBvc2VkIiwiZXhwb3NlIiwicHJvcCIsImhhc093blByb3BlcnR5IiwicGF0aCIsInVpIiwiYXR0cmlidXRlIiwidmZmRGF0YSIsInJlZ2lzdGVyQ29udHJvbCIsIkVYUE9TRV9ERUxJTUlURVIiLCJiaW5kVG8iLCJIVE1MVGV4dEFyZWFFbGVtZW50IiwiSFRNTElucHV0RWxlbWVudCIsInZhbHVlIiwiYmluZHMiLCJjb250cm9sRWwiLCJhZGRFdmVudExpc3RlbmVyIiwiZ2V0Q29udHJvbCIsInVwZGF0ZVZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyIsImluaXQiLCJ3aW5kb3ciLCJfaW5pdCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7QUFJQSxTQUFTQSxPQUFULEdBQW1CO0FBQ2YsUUFBSUMsV0FBV0MsU0FBU0MsZ0JBQVQsT0FBOEJDLGtCQUFVQyxPQUF4QyxPQUFmO0FBQ0FKLGFBQVNLLE9BQVQsQ0FBaUIsbUJBQVc7O0FBRXhCLFlBQUlDLE9BQU9DLFFBQVFDLFlBQVIsQ0FBcUJMLGtCQUFVQyxPQUEvQixDQUFYO0FBQ0FHLGdCQUFRRSxZQUFSLENBQXFCTixrQkFBVU8sSUFBL0IsRUFBcUNKLElBQXJDOztBQUVSO0FBQ1E7QUFDQSxZQUFJSyxVQUFVSixRQUFRQyxZQUFSLENBQXFCTCxrQkFBVVMsT0FBL0IsS0FBMkMsSUFBekQ7QUFDQSxZQUFJO0FBQ0E7QUFDQUQsc0JBQVUseUJBQVdBLE9BQVgsQ0FBVjtBQUNILFNBSEQsQ0FHRSxPQUFPRSxHQUFQLEVBQVc7QUFDVEYsc0JBQVUsRUFBVjtBQUNIOztBQUVEO0FBQ0EsWUFBR0osUUFBUUksT0FBUixJQUFtQixPQUFPSixRQUFRSSxPQUFmLEtBQTJCLFVBQWpELEVBQTREO0FBQ3hEQSxzQkFBVUcsT0FBT0MsTUFBUCxDQUFjLEVBQWQsRUFBa0JSLFFBQVFJLE9BQVIsRUFBbEIsRUFBcUNBLE9BQXJDLENBQVY7QUFDSDtBQUNEQSxnQkFBUUssT0FBUixHQUFrQlQsT0FBbEI7QUFDUjs7QUFFUSxZQUFJVSxVQUFVVixRQUFRVyxNQUFSLEdBQWdCWCxRQUFRVyxNQUFSLEVBQWhCLEdBQW1DLEVBQWpEOztBQUVBLGFBQUssSUFBSUMsSUFBVCxJQUFpQkYsT0FBakIsRUFBMEI7QUFDdEIsZ0JBQUlBLFFBQVFHLGNBQVIsQ0FBdUJELElBQXZCLENBQUosRUFBa0M7O0FBRzlCLG9CQUFJRSxPQUFPSixRQUFRRSxJQUFSLENBQVg7QUFBQSxvQkFBMEJHLFdBQTFCO0FBQUEsb0JBQThCQyxrQkFBOUI7QUFDQSxvQkFBRyxRQUFPTixRQUFRRSxJQUFSLENBQVAsTUFBeUIsUUFBNUIsRUFBcUM7QUFDakNFLDJCQUFPSixRQUFRRSxJQUFSLEVBQWNFLElBQXJCO0FBQ0FDLHlCQUFLTCxRQUFRRSxJQUFSLEVBQWNHLEVBQW5CO0FBQ0FDLGdDQUFZTixRQUFRRSxJQUFSLEVBQWNJLFNBQTFCO0FBQ0g7O0FBRURDLGlDQUFRQyxlQUFSLENBQXdCbkIsT0FBT29CLHdCQUFQLEdBQTBCUCxJQUFsRCxFQUNJSSxZQUFXaEIsUUFBUUMsWUFBUixDQUFxQmEsSUFBckIsQ0FBWCxHQUF3Qyx3QkFBVWQsT0FBVixFQUFtQmMsSUFBbkIsQ0FENUMsRUFFSSxFQUFDTSxRQUFTTixJQUFWLEVBQWdCQyxNQUFoQixFQUFvQkMsb0JBQXBCLEVBRko7QUFJSDtBQUNKO0FBQ0QsWUFBR2hCLG1CQUFtQnFCLG1CQUFuQixJQUEwQ3JCLG1CQUFtQnNCLGdCQUFoRSxFQUFpRjtBQUM3RUwsNkJBQVFDLGVBQVIsQ0FBd0JuQixJQUF4QixFQUE4QkMsUUFBUXVCLEtBQXRDO0FBQ0g7QUFFSixLQTdDRDtBQThDQSxRQUFJQyxRQUFROUIsU0FBU0MsZ0JBQVQsT0FBOEJDLGtCQUFVTyxJQUF4QyxPQUFaO0FBQ0FxQixVQUFNMUIsT0FBTixDQUFjLHFCQUFhO0FBQ3ZCLFlBQUcyQixxQkFBcUJKLG1CQUFyQixJQUE0Q0kscUJBQXFCSCxnQkFBcEUsRUFBcUY7QUFDakZHLHNCQUFVQyxnQkFBVixDQUEyQixPQUEzQixFQUFvQyxZQUFNO0FBQ3RDLG9CQUFJMUIsVUFBVWlCLGlCQUFRVSxVQUFSLENBQW1CRixVQUFVeEIsWUFBVixDQUF1Qkwsa0JBQVVPLElBQWpDLENBQW5CLENBQWQ7QUFDQSxvQkFBR0gsT0FBSCxFQUFXO0FBQ1BBLDRCQUFRNEIsV0FBUixDQUFvQkgsVUFBVUYsS0FBOUI7QUFDSDtBQUNKLGFBTEQ7QUFNSDtBQUNKLEtBVEQ7QUFVSDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQU0sT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyxVQUFPLGdCQUFNO0FBQ1RDLGVBQU9OLGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDLFlBQVU7QUFDdENsQztBQUNILFNBRkQ7QUFHSCxLQUxZO0FBTWJ5QyxXQUFRekM7QUFOSyxDQUFqQiIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0QnlQYXRoLCBwYXJzZVJKU09OfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7dmZmRGF0YX0gZnJvbSAnLi92ZmZEYXRhJztcbmltcG9ydCB7RVhQT1NFX0RFTElNSVRFUiwgQVRUUklCVVRFfSBmcm9tICcuL2NvbnN0cyc7XG4vLyBpbXBvcnQge2JpbmRTeW5jRXZlbnRzfSBmcm9tICcuL2ludGVyYWN0aW9uRXZlbnRzJztcblxuXG5cbmZ1bmN0aW9uIGluaXRET00oKSB7XG4gICAgbGV0IGNvbnRyb2xzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChgWyR7QVRUUklCVVRFLkNPTlRST0x9XWApO1xuICAgIGNvbnRyb2xzLmZvckVhY2goY29udHJvbCA9PiB7XG5cbiAgICAgICAgbGV0IG5hbWUgPSBjb250cm9sLmdldEF0dHJpYnV0ZShBVFRSSUJVVEUuQ09OVFJPTCk7XG4gICAgICAgIGNvbnRyb2wuc2V0QXR0cmlidXRlKEFUVFJJQlVURS5CSU5ELCBuYW1lKTtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiAgICAgICAgLy9UT0RPIGhhbmRsZSBvcHRpb25zXG4gICAgICAgIGxldCBvcHRpb25zID0gY29udHJvbC5nZXRBdHRyaWJ1dGUoQVRUUklCVVRFLk9QVElPTlMpIHx8ICd7fSc7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvL1RPRE8gdGVzdCBpdFxuICAgICAgICAgICAgb3B0aW9ucyA9IHBhcnNlUkpTT04ob3B0aW9ucyk7XG4gICAgICAgIH0gY2F0Y2ggKGVycil7XG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvL1RPRE8gd2hhdCBpcyB0aGlzIGFuZCB3aHkgZG8gaSBuZWVkIHRoaXM/XG4gICAgICAgIGlmKGNvbnRyb2wub3B0aW9ucyAmJiB0eXBlb2YgY29udHJvbC5vcHRpb25zID09PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBjb250cm9sLm9wdGlvbnMoKSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5lbGVtZW50ID0gY29udHJvbDtcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbiAgICAgICAgbGV0IGV4cG9zZWQgPSBjb250cm9sLmV4cG9zZT8gY29udHJvbC5leHBvc2UoKSA6IHt9O1xuXG4gICAgICAgIGZvciAobGV0IHByb3AgaW4gZXhwb3NlZCkge1xuICAgICAgICAgICAgaWYgKGV4cG9zZWQuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblxuXG4gICAgICAgICAgICAgICAgbGV0IHBhdGggPSBleHBvc2VkW3Byb3BdLCB1aSwgYXR0cmlidXRlO1xuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBleHBvc2VkW3Byb3BdID09PSAnb2JqZWN0Jyl7XG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBleHBvc2VkW3Byb3BdLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgIHVpID0gZXhwb3NlZFtwcm9wXS51aTtcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlID0gZXhwb3NlZFtwcm9wXS5hdHRyaWJ1dGU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdmZmRGF0YS5yZWdpc3RlckNvbnRyb2wobmFtZSArIEVYUE9TRV9ERUxJTUlURVIgKyBwcm9wLFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU/IGNvbnRyb2wuZ2V0QXR0cmlidXRlKHBhdGgpIDogZ2V0QnlQYXRoKGNvbnRyb2wsIHBhdGgpLFxuICAgICAgICAgICAgICAgICAgICB7YmluZFRvIDogcGF0aCwgdWksIGF0dHJpYnV0ZX0pO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYoY29udHJvbCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQgfHwgY29udHJvbCBpbnN0YW5jZW9mIEhUTUxJbnB1dEVsZW1lbnQpe1xuICAgICAgICAgICAgdmZmRGF0YS5yZWdpc3RlckNvbnRyb2wobmFtZSwgY29udHJvbC52YWx1ZSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xuICAgIGxldCBiaW5kcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFske0FUVFJJQlVURS5CSU5EfV1gKTtcbiAgICBiaW5kcy5mb3JFYWNoKGNvbnRyb2xFbCA9PiB7XG4gICAgICAgIGlmKGNvbnRyb2xFbCBpbnN0YW5jZW9mIEhUTUxUZXh0QXJlYUVsZW1lbnQgfHwgY29udHJvbEVsIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCl7XG4gICAgICAgICAgICBjb250cm9sRWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGNvbnRyb2wgPSB2ZmZEYXRhLmdldENvbnRyb2woY29udHJvbEVsLmdldEF0dHJpYnV0ZShBVFRSSUJVVEUuQklORCkpO1xuICAgICAgICAgICAgICAgIGlmKGNvbnRyb2wpe1xuICAgICAgICAgICAgICAgICAgICBjb250cm9sLnVwZGF0ZVZhbHVlKGNvbnRyb2xFbC52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLy8gZnVuY3Rpb24gY2xvc2VzdChlbGVtZW50LCBzZWxlY3Rvcil7XG4vL1xuLy8gICAgIHdoaWxlIChlbGVtZW50KSB7XG4vLyAgICAgICAgIGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XG4vLyAgICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbi8vICAgICAgICAgfVxuLy8gICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuLy8gICAgIH1cbi8vXG4vLyB9XG4vL1xuLy8gZnVuY3Rpb24gaW5pdFN5bmMoKXtcbi8vICAgICBsZXQgZWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbdmZmLXN5bmNdJyk7XG4vLyAgICAgZWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuLy8gICAgICAgICBiaW5kU3luY0V2ZW50cyhlbGVtZW50KTtcbi8vICAgICB9KTtcbi8vIH1cblxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBpbml0IDogKCkgPT4ge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICBpbml0RE9NKCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgX2luaXQgOiBpbml0RE9NXG59O1xuXG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29yZS9pbml0RE9NLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _htmlAccessorObserver = __webpack_require__(25);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar VffElement = function () {\n    function VffElement(selector) {\n        _classCallCheck(this, VffElement);\n\n        this.selector = selector;\n        this.element = null;\n        this._init();\n        this._observe();\n    }\n\n    _createClass(VffElement, [{\n        key: '_init',\n        value: function _init() {\n            switch (this.selector[0]) {\n                case '<':\n                    {\n                        //create element\n                        var matches = this.selector.match(/<([\\w-]*)>/);\n                        if (matches === null || matches === undefined) {\n                            throw 'Invalid Selector / Node';\n                        }\n                        var nodeName = matches[0].replace('<', '').replace('>', '');\n                        this.element = document.createElement(nodeName);\n                        break;\n                    }\n                default:\n                    {\n                        this.element = document.querySelector(this.selector);\n                    }\n            }\n        }\n    }, {\n        key: 'onChange',\n        value: function onChange() {\n            var prop = arguments.length > 1 ? arguments[0] : null;\n            var cb = arguments.length > 1 ? arguments[1] : arguments[0];\n            var event = prop ? \"vff-change-\" + prop : 'vff-change';\n            var listener = function listener(e) {\n                if (prop) {\n                    cb(e.detail.value);\n                } else {\n                    cb(e.detail.property, e.detail.value, e.detail.path);\n                }\n            };\n            this.element.addEventListener(event, listener, false);\n            var self = this;\n            return function () {\n                self.element.removeEventListener(event, listener, false);\n            };\n        }\n    }, {\n        key: '_observe',\n        value: function _observe() {\n            var self = this;\n            (0, _htmlAccessorObserver.observe)(this.element, null, function (event, data) {\n                self.element.dispatchEvent(new CustomEvent(event, data));\n            });\n            return this;\n        }\n    }]);\n\n    return VffElement;\n}();\n\nexports.default = VffElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS92ZmZFbGVtZW50LmpzPzJhMmYiXSwibmFtZXMiOlsiVmZmRWxlbWVudCIsInNlbGVjdG9yIiwiZWxlbWVudCIsIl9pbml0IiwiX29ic2VydmUiLCJtYXRjaGVzIiwibWF0Y2giLCJ1bmRlZmluZWQiLCJub2RlTmFtZSIsInJlcGxhY2UiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicHJvcCIsImFyZ3VtZW50cyIsImxlbmd0aCIsImNiIiwiZXZlbnQiLCJsaXN0ZW5lciIsImUiLCJkZXRhaWwiLCJ2YWx1ZSIsInByb3BlcnR5IiwicGF0aCIsImFkZEV2ZW50TGlzdGVuZXIiLCJzZWxmIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRhdGEiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7Ozs7SUFHTUEsVTtBQUNGLHdCQUFZQyxRQUFaLEVBQXFCO0FBQUE7O0FBQ2pCLGFBQUtBLFFBQUwsR0FBZ0JBLFFBQWhCO0FBQ0EsYUFBS0MsT0FBTCxHQUFlLElBQWY7QUFDQSxhQUFLQyxLQUFMO0FBQ0EsYUFBS0MsUUFBTDtBQUNIOzs7O2dDQUNNO0FBQ0gsb0JBQU8sS0FBS0gsUUFBTCxDQUFjLENBQWQsQ0FBUDtBQUNJLHFCQUFLLEdBQUw7QUFBVztBQUNQO0FBQ0EsNEJBQUlJLFVBQVUsS0FBS0osUUFBTCxDQUFjSyxLQUFkLENBQW9CLFlBQXBCLENBQWQ7QUFDQSw0QkFBSUQsWUFBWSxJQUFaLElBQW9CQSxZQUFZRSxTQUFwQyxFQUErQztBQUMzQyxrQ0FBTSx5QkFBTjtBQUNIO0FBQ0QsNEJBQUlDLFdBQVdILFFBQVEsQ0FBUixFQUFXSSxPQUFYLENBQW1CLEdBQW5CLEVBQXdCLEVBQXhCLEVBQTRCQSxPQUE1QixDQUFvQyxHQUFwQyxFQUF5QyxFQUF6QyxDQUFmO0FBQ0EsNkJBQUtQLE9BQUwsR0FBZVEsU0FBU0MsYUFBVCxDQUF1QkgsUUFBdkIsQ0FBZjtBQUNBO0FBQ0g7QUFDRDtBQUFVO0FBQ04sNkJBQUtOLE9BQUwsR0FBZVEsU0FBU0UsYUFBVCxDQUF1QixLQUFLWCxRQUE1QixDQUFmO0FBQ0g7QUFiTDtBQWVIOzs7bUNBQ1M7QUFDTixnQkFBSVksT0FBT0MsVUFBVUMsTUFBVixHQUFtQixDQUFuQixHQUFzQkQsVUFBVSxDQUFWLENBQXRCLEdBQXFDLElBQWhEO0FBQ0EsZ0JBQUlFLEtBQU9GLFVBQVVDLE1BQVYsR0FBbUIsQ0FBbkIsR0FBc0JELFVBQVUsQ0FBVixDQUF0QixHQUFxQ0EsVUFBVSxDQUFWLENBQWhEO0FBQ0EsZ0JBQUlHLFFBQVFKLE9BQU0sZ0JBQWdCQSxJQUF0QixHQUE2QixZQUF6QztBQUNBLGdCQUFJSyxXQUFXLFNBQVhBLFFBQVcsQ0FBU0MsQ0FBVCxFQUFXO0FBQ3RCLG9CQUFHTixJQUFILEVBQVE7QUFDSkcsdUJBQUdHLEVBQUVDLE1BQUYsQ0FBU0MsS0FBWjtBQUNILGlCQUZELE1BRU87QUFDSEwsdUJBQUdHLEVBQUVDLE1BQUYsQ0FBU0UsUUFBWixFQUFzQkgsRUFBRUMsTUFBRixDQUFTQyxLQUEvQixFQUFzQ0YsRUFBRUMsTUFBRixDQUFTRyxJQUEvQztBQUNIO0FBQ0osYUFORDtBQU9BLGlCQUFLckIsT0FBTCxDQUFhc0IsZ0JBQWIsQ0FBOEJQLEtBQTlCLEVBQXFDQyxRQUFyQyxFQUErQyxLQUEvQztBQUNBLGdCQUFJTyxPQUFPLElBQVg7QUFDQSxtQkFBTyxZQUFNO0FBQ1RBLHFCQUFLdkIsT0FBTCxDQUFhd0IsbUJBQWIsQ0FBaUNULEtBQWpDLEVBQXdDQyxRQUF4QyxFQUFrRCxLQUFsRDtBQUNILGFBRkQ7QUFHSDs7O21DQUNTO0FBQ04sZ0JBQUlPLE9BQU8sSUFBWDtBQUNBLCtDQUFRLEtBQUt2QixPQUFiLEVBQXNCLElBQXRCLEVBQTRCLFVBQVNlLEtBQVQsRUFBZ0JVLElBQWhCLEVBQXFCO0FBQzdDRixxQkFBS3ZCLE9BQUwsQ0FBYTBCLGFBQWIsQ0FBMkIsSUFBSUMsV0FBSixDQUFnQlosS0FBaEIsRUFBdUJVLElBQXZCLENBQTNCO0FBQ0gsYUFGRDtBQUdBLG1CQUFPLElBQVA7QUFDSDs7Ozs7O2tCQUdVM0IsVSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7b2JzZXJ2ZX0gZnJvbSAnLi4vb2JzZXJ2ZXIvaHRtbEFjY2Vzc29yT2JzZXJ2ZXInO1xuXG5cbmNsYXNzIFZmZkVsZW1lbnR7XG4gICAgY29uc3RydWN0b3Ioc2VsZWN0b3Ipe1xuICAgICAgICB0aGlzLnNlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gICAgICAgIHRoaXMuX2luaXQoKTtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZSgpO1xuICAgIH1cbiAgICBfaW5pdCgpe1xuICAgICAgICBzd2l0Y2godGhpcy5zZWxlY3RvclswXSl7XG4gICAgICAgICAgICBjYXNlICc8JyA6IHtcbiAgICAgICAgICAgICAgICAvL2NyZWF0ZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgbGV0IG1hdGNoZXMgPSB0aGlzLnNlbGVjdG9yLm1hdGNoKC88KFtcXHctXSopPi8pO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsIHx8IG1hdGNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnSW52YWxpZCBTZWxlY3RvciAvIE5vZGUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgbm9kZU5hbWUgPSBtYXRjaGVzWzBdLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQgOiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBvbkNoYW5nZSgpe1xuICAgICAgICBsZXQgcHJvcCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxPyBhcmd1bWVudHNbMF0gOiBudWxsO1xuICAgICAgICBsZXQgY2IgICA9IGFyZ3VtZW50cy5sZW5ndGggPiAxPyBhcmd1bWVudHNbMV0gOiBhcmd1bWVudHNbMF07XG4gICAgICAgIGxldCBldmVudCA9IHByb3A/IFwidmZmLWNoYW5nZS1cIiArIHByb3AgOiAndmZmLWNoYW5nZSc7XG4gICAgICAgIGxldCBsaXN0ZW5lciA9IGZ1bmN0aW9uKGUpe1xuICAgICAgICAgICAgaWYocHJvcCl7XG4gICAgICAgICAgICAgICAgY2IoZS5kZXRhaWwudmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYihlLmRldGFpbC5wcm9wZXJ0eSwgZS5kZXRhaWwudmFsdWUsIGUuZGV0YWlsLnBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc2VsZi5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIF9vYnNlcnZlKCl7XG4gICAgICAgIGxldCBzZWxmID0gdGhpcztcbiAgICAgICAgb2JzZXJ2ZSh0aGlzLmVsZW1lbnQsIG51bGwsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKXtcbiAgICAgICAgICAgIHNlbGYuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChldmVudCwgZGF0YSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWZmZFbGVtZW50O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb3JlL3ZmZkVsZW1lbnQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _helpers = __webpack_require__(0);\n\nfunction getExposed(provider, prop) {\n    if (provider.expose) {\n        return _typeof(provider.expose()[prop]) === 'object' ? provider.expose()[prop].path : provider.expose()[prop];\n    }\n}\n\nfunction stringifyPath(path) {\n    var str = '';\n    for (var i = 0; i < path.length; i++) {\n        str += (0, _helpers.trim)(path[i], \"_\") + '.';\n    }\n    return str;\n}\n\nfunction observePrimitive(provider, prop, path, dispatcher) {\n    var value = provider[prop];\n    var pathString = stringifyPath(path);\n    var exposedPath = getExposed(provider, prop);\n    Object.defineProperty(provider, prop, {\n        get: function get() {\n            if (exposedPath) {\n                return (0, _helpers.getByPath)(provider, exposedPath);\n            }\n            return value;\n        },\n        set: function set(newValue) {\n            if (newValue !== provider[prop]) {\n                if (dispatcher) {\n                    var event = 'vff-change-' + pathString + (0, _helpers.trim)(prop, \"_\");\n                    dispatcher(event, { detail: { value: newValue } });\n                    dispatcher('vff-change', { detail: { value: newValue, property: prop, path: path } });\n                }\n                if (exposedPath) {\n                    (0, _helpers.setByPath)(provider, exposedPath, newValue);\n                } else {\n                    value = newValue;\n                }\n            }\n        }\n    });\n}\n\nfunction observeObject(provider, path, dispatcher) {\n    path = path || [];\n    var props = Object.getOwnPropertyNames(provider);\n    for (var i = 0; i < props.length; i++) {\n\n        if (_typeof(provider[props[i]]) === 'object') {\n            path.push(props[i]);\n            observeObject(provider[props[i]], path.slice(), dispatcher);\n        } else {\n            observePrimitive(provider, props[i], path.slice(), dispatcher);\n        }\n    }\n}\n\nmodule.exports = {\n    observe: observeObject\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvb2JzZXJ2ZXIvaHRtbEFjY2Vzc29yT2JzZXJ2ZXIuanM/Mzk2NSJdLCJuYW1lcyI6WyJnZXRFeHBvc2VkIiwicHJvdmlkZXIiLCJwcm9wIiwiZXhwb3NlIiwicGF0aCIsInN0cmluZ2lmeVBhdGgiLCJzdHIiLCJpIiwibGVuZ3RoIiwib2JzZXJ2ZVByaW1pdGl2ZSIsImRpc3BhdGNoZXIiLCJ2YWx1ZSIsInBhdGhTdHJpbmciLCJleHBvc2VkUGF0aCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0Iiwic2V0IiwibmV3VmFsdWUiLCJldmVudCIsImRldGFpbCIsInByb3BlcnR5Iiwib2JzZXJ2ZU9iamVjdCIsInByb3BzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInB1c2giLCJzbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJvYnNlcnZlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBR0EsU0FBU0EsVUFBVCxDQUFvQkMsUUFBcEIsRUFBOEJDLElBQTlCLEVBQW1DO0FBQy9CLFFBQUdELFNBQVNFLE1BQVosRUFBbUI7QUFDZixlQUFPLFFBQU9GLFNBQVNFLE1BQVQsR0FBa0JELElBQWxCLENBQVAsTUFBbUMsUUFBbkMsR0FBNkNELFNBQVNFLE1BQVQsR0FBa0JELElBQWxCLEVBQXdCRSxJQUFyRSxHQUE0RUgsU0FBU0UsTUFBVCxHQUFrQkQsSUFBbEIsQ0FBbkY7QUFDSDtBQUNKOztBQUVELFNBQVNHLGFBQVQsQ0FBdUJELElBQXZCLEVBQTRCO0FBQ3hCLFFBQUlFLE1BQU0sRUFBVjtBQUNBLFNBQUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJSCxLQUFLSSxNQUF6QixFQUFpQ0QsR0FBakMsRUFBc0M7QUFDbENELGVBQVEsbUJBQUtGLEtBQUtHLENBQUwsQ0FBTCxFQUFhLEdBQWIsSUFBb0IsR0FBNUI7QUFDSDtBQUNELFdBQU9ELEdBQVA7QUFDSDs7QUFFRCxTQUFTRyxnQkFBVCxDQUEwQlIsUUFBMUIsRUFBb0NDLElBQXBDLEVBQTBDRSxJQUExQyxFQUFnRE0sVUFBaEQsRUFBMkQ7QUFDdkQsUUFBSUMsUUFBUVYsU0FBU0MsSUFBVCxDQUFaO0FBQ0EsUUFBSVUsYUFBYVAsY0FBY0QsSUFBZCxDQUFqQjtBQUNBLFFBQUlTLGNBQWNiLFdBQVdDLFFBQVgsRUFBcUJDLElBQXJCLENBQWxCO0FBQ0FZLFdBQU9DLGNBQVAsQ0FBc0JkLFFBQXRCLEVBQWdDQyxJQUFoQyxFQUFzQztBQUNsQ2MsV0FEa0MsaUJBQzNCO0FBQ0gsZ0JBQUdILFdBQUgsRUFBZTtBQUNiLHVCQUFPLHdCQUFVWixRQUFWLEVBQW1CWSxXQUFuQixDQUFQO0FBQ0Q7QUFDRCxtQkFBT0YsS0FBUDtBQUNILFNBTmlDO0FBT2xDTSxXQVBrQyxlQU83QkMsUUFQNkIsRUFPbkI7QUFDWCxnQkFBR0EsYUFBYWpCLFNBQVNDLElBQVQsQ0FBaEIsRUFBK0I7QUFDM0Isb0JBQUdRLFVBQUgsRUFBYztBQUNWLHdCQUFJUyxRQUFRLGdCQUFnQlAsVUFBaEIsR0FBNkIsbUJBQUtWLElBQUwsRUFBVyxHQUFYLENBQXpDO0FBQ0FRLCtCQUFXUyxLQUFYLEVBQWtCLEVBQUVDLFFBQVEsRUFBQ1QsT0FBUU8sUUFBVCxFQUFWLEVBQWxCO0FBQ0FSLCtCQUFXLFlBQVgsRUFBeUIsRUFBRVUsUUFBUSxFQUFDVCxPQUFRTyxRQUFULEVBQW1CRyxVQUFXbkIsSUFBOUIsRUFBb0NFLE1BQU9BLElBQTNDLEVBQVYsRUFBekI7QUFDSDtBQUNELG9CQUFHUyxXQUFILEVBQWU7QUFDWCw0Q0FBVVosUUFBVixFQUFvQlksV0FBcEIsRUFBaUNLLFFBQWpDO0FBQ0gsaUJBRkQsTUFFTztBQUNIUCw0QkFBUU8sUUFBUjtBQUNIO0FBQ0o7QUFDSjtBQXBCaUMsS0FBdEM7QUFzQkg7O0FBRUQsU0FBU0ksYUFBVCxDQUF1QnJCLFFBQXZCLEVBQWlDRyxJQUFqQyxFQUF1Q00sVUFBdkMsRUFBa0Q7QUFDOUNOLFdBQU9BLFFBQVEsRUFBZjtBQUNBLFFBQUltQixRQUFRVCxPQUFPVSxtQkFBUCxDQUEyQnZCLFFBQTNCLENBQVo7QUFDQSxTQUFLLElBQUlNLElBQUksQ0FBYixFQUFnQkEsSUFBSWdCLE1BQU1mLE1BQTFCLEVBQWtDRCxHQUFsQyxFQUF1Qzs7QUFFbkMsWUFBSSxRQUFPTixTQUFTc0IsTUFBTWhCLENBQU4sQ0FBVCxDQUFQLE1BQThCLFFBQWxDLEVBQTRDO0FBQ3hDSCxpQkFBS3FCLElBQUwsQ0FBVUYsTUFBTWhCLENBQU4sQ0FBVjtBQUNBZSwwQkFBY3JCLFNBQVNzQixNQUFNaEIsQ0FBTixDQUFULENBQWQsRUFBa0NILEtBQUtzQixLQUFMLEVBQWxDLEVBQWdEaEIsVUFBaEQ7QUFDSCxTQUhELE1BR087QUFDSEQsNkJBQWlCUixRQUFqQixFQUEyQnNCLE1BQU1oQixDQUFOLENBQTNCLEVBQXFDSCxLQUFLc0IsS0FBTCxFQUFyQyxFQUFtRGhCLFVBQW5EO0FBQ0g7QUFDSjtBQUNKOztBQUVEaUIsT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyxhQUFVUDtBQURHLENBQWpCIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHt0cmltfSBmcm9tICcuLi91dGlscy9oZWxwZXJzJztcbmltcG9ydCB7Z2V0QnlQYXRoLCBzZXRCeVBhdGh9IGZyb20gJy4uL3V0aWxzL2hlbHBlcnMnO1xuXG5mdW5jdGlvbiBnZXRFeHBvc2VkKHByb3ZpZGVyLCBwcm9wKXtcbiAgICBpZihwcm92aWRlci5leHBvc2Upe1xuICAgICAgICByZXR1cm4gdHlwZW9mIHByb3ZpZGVyLmV4cG9zZSgpW3Byb3BdID09PSAnb2JqZWN0Jz8gcHJvdmlkZXIuZXhwb3NlKClbcHJvcF0ucGF0aCA6IHByb3ZpZGVyLmV4cG9zZSgpW3Byb3BdO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UGF0aChwYXRoKXtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHN0ciArPSAodHJpbShwYXRoW2ldLFwiX1wiKSArICcuJyk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbmZ1bmN0aW9uIG9ic2VydmVQcmltaXRpdmUocHJvdmlkZXIsIHByb3AsIHBhdGgsIGRpc3BhdGNoZXIpe1xuICAgIGxldCB2YWx1ZSA9IHByb3ZpZGVyW3Byb3BdO1xuICAgIGxldCBwYXRoU3RyaW5nID0gc3RyaW5naWZ5UGF0aChwYXRoKTtcbiAgICBsZXQgZXhwb3NlZFBhdGggPSBnZXRFeHBvc2VkKHByb3ZpZGVyLCBwcm9wKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdmlkZXIsIHByb3AsIHtcbiAgICAgICAgZ2V0ICgpIHtcbiAgICAgICAgICAgIGlmKGV4cG9zZWRQYXRoKXtcbiAgICAgICAgICAgICAgcmV0dXJuIGdldEJ5UGF0aChwcm92aWRlcixleHBvc2VkUGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGlmKG5ld1ZhbHVlICE9PSBwcm92aWRlcltwcm9wXSl7XG4gICAgICAgICAgICAgICAgaWYoZGlzcGF0Y2hlcil7XG4gICAgICAgICAgICAgICAgICAgIGxldCBldmVudCA9ICd2ZmYtY2hhbmdlLScgKyBwYXRoU3RyaW5nICsgdHJpbShwcm9wLCBcIl9cIik7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoZXIoZXZlbnQsIHsgZGV0YWlsOiB7dmFsdWUgOiBuZXdWYWx1ZX19KTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2hlcigndmZmLWNoYW5nZScsIHsgZGV0YWlsOiB7dmFsdWUgOiBuZXdWYWx1ZSwgcHJvcGVydHkgOiBwcm9wLCBwYXRoIDogcGF0aH19KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoZXhwb3NlZFBhdGgpe1xuICAgICAgICAgICAgICAgICAgICBzZXRCeVBhdGgocHJvdmlkZXIsIGV4cG9zZWRQYXRoLCBuZXdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gb2JzZXJ2ZU9iamVjdChwcm92aWRlciwgcGF0aCwgZGlzcGF0Y2hlcil7XG4gICAgcGF0aCA9IHBhdGggfHwgW107XG4gICAgbGV0IHByb3BzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvdmlkZXIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICBpZiAodHlwZW9mIHByb3ZpZGVyW3Byb3BzW2ldXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHBhdGgucHVzaChwcm9wc1tpXSk7XG4gICAgICAgICAgICBvYnNlcnZlT2JqZWN0KHByb3ZpZGVyW3Byb3BzW2ldXSwgcGF0aC5zbGljZSgpLCBkaXNwYXRjaGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ic2VydmVQcmltaXRpdmUocHJvdmlkZXIsIHByb3BzW2ldLCBwYXRoLnNsaWNlKCksIGRpc3BhdGNoZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBvYnNlcnZlIDogb2JzZXJ2ZU9iamVjdCxcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL29ic2VydmVyL2h0bWxBY2Nlc3Nvck9ic2VydmVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nHTMLHeadingElement.prototype.expose = function () {\n    return { text: 'innerText', color: { path: 'style.color' } };\n};\nHTMLSpanElement.prototype.expose = function () {\n    return { text: 'innerText' };\n};\nHTMLParagraphElement.prototype.expose = function () {\n    return { text: 'innerText' };\n};\nHTMLImageElement.prototype.expose = function () {\n    return { src: { path: 'src', attribute: true } };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9kZWZhdWx0RXhwb3NlLmpzPzNkZTgiXSwibmFtZXMiOlsiSFRNTEhlYWRpbmdFbGVtZW50IiwicHJvdG90eXBlIiwiZXhwb3NlIiwidGV4dCIsImNvbG9yIiwicGF0aCIsIkhUTUxTcGFuRWxlbWVudCIsIkhUTUxQYXJhZ3JhcGhFbGVtZW50IiwiSFRNTEltYWdlRWxlbWVudCIsInNyYyIsImF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQUEsbUJBQW1CQyxTQUFuQixDQUE2QkMsTUFBN0IsR0FBc0MsWUFBVTtBQUM1QyxXQUFPLEVBQUNDLE1BQU8sV0FBUixFQUFxQkMsT0FBUSxFQUFDQyxNQUFPLGFBQVIsRUFBN0IsRUFBUDtBQUNILENBRkQ7QUFHQUMsZ0JBQWdCTCxTQUFoQixDQUEwQkMsTUFBMUIsR0FBbUMsWUFBVTtBQUN6QyxXQUFPLEVBQUNDLE1BQU8sV0FBUixFQUFQO0FBQ0gsQ0FGRDtBQUdBSSxxQkFBcUJOLFNBQXJCLENBQStCQyxNQUEvQixHQUF3QyxZQUFVO0FBQzlDLFdBQU8sRUFBQ0MsTUFBTyxXQUFSLEVBQVA7QUFDSCxDQUZEO0FBR0FLLGlCQUFpQlAsU0FBakIsQ0FBMkJDLE1BQTNCLEdBQW9DLFlBQVU7QUFDMUMsV0FBTyxFQUFDTyxLQUFNLEVBQUNKLE1BQU8sS0FBUixFQUFlSyxXQUFZLElBQTNCLEVBQVAsRUFBUDtBQUNILENBRkQiLCJmaWxlIjoiMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJIVE1MSGVhZGluZ0VsZW1lbnQucHJvdG90eXBlLmV4cG9zZSA9IGZ1bmN0aW9uKCl7XG4gICAgcmV0dXJuIHt0ZXh0IDogJ2lubmVyVGV4dCcsIGNvbG9yIDoge3BhdGggOiAnc3R5bGUuY29sb3InfX07XG59O1xuSFRNTFNwYW5FbGVtZW50LnByb3RvdHlwZS5leHBvc2UgPSBmdW5jdGlvbigpe1xuICAgIHJldHVybiB7dGV4dCA6ICdpbm5lclRleHQnfTtcbn07XG5IVE1MUGFyYWdyYXBoRWxlbWVudC5wcm90b3R5cGUuZXhwb3NlID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge3RleHQgOiAnaW5uZXJUZXh0J307XG59O1xuSFRNTEltYWdlRWxlbWVudC5wcm90b3R5cGUuZXhwb3NlID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge3NyYyA6IHtwYXRoIDogJ3NyYycsIGF0dHJpYnV0ZSA6IHRydWV9fTtcbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29yZS9kZWZhdWx0RXhwb3NlLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(28);\n\n__webpack_require__(29);\n\nvar _emoji = __webpack_require__(30);\n\nvar _emoji2 = _interopRequireDefault(_emoji);\n\nvar _dragArea = __webpack_require__(31);\n\nvar _dragArea2 = _interopRequireDefault(_dragArea);\n\nvar _telestratorElement = __webpack_require__(32);\n\nvar _telestratorElement2 = _interopRequireDefault(_telestratorElement);\n\nvar _clockSimple = __webpack_require__(38);\n\nvar _clockSimple2 = _interopRequireDefault(_clockSimple);\n\nvar _systemClock = __webpack_require__(40);\n\nvar _systemClock2 = _interopRequireDefault(_systemClock);\n\nvar _countdown = __webpack_require__(42);\n\nvar _countdown2 = _interopRequireDefault(_countdown);\n\nvar _stopwatch = __webpack_require__(43);\n\nvar _stopwatch2 = _interopRequireDefault(_stopwatch);\n\nvar _basicClock = __webpack_require__(5);\n\nvar _basicClock2 = _interopRequireDefault(_basicClock);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction define(name, element) {\n    customElements.define(name, element);\n}\n\ndefine('drag-area', _dragArea2.default);\ndefine('my-element', _emoji2.default);\ndefine('telestrator-element', _telestratorElement2.default);\ndefine('clock-element', _clockSimple2.default);\ndefine('system-clock', _systemClock2.default);\ndefine('countdown-clock', _countdown2.default);\ndefine('stopwatch-clock', _stopwatch2.default);\ndefine('basic-clock', _basicClock2.default);\n\n// function isDefined(name) {\n//     return document.createElement(name).constructor !== HTMLElement;\n// }//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jb21wb25lbnRzLmpzPzY3ZTciXSwibmFtZXMiOlsiZGVmaW5lIiwibmFtZSIsImVsZW1lbnQiLCJjdXN0b21FbGVtZW50cyIsIkRyYWdBcmVhIiwiRW1vamkiLCJUZWxlc3RyYXRvciIsIkNsb2NrIiwiU3lzdGVtQ2xvY2siLCJDb3VudGRvd24iLCJTdG9wd2F0Y2giLCJCYXNpY0Nsb2NrIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUdBLFNBQVNBLE1BQVQsQ0FBZ0JDLElBQWhCLEVBQXNCQyxPQUF0QixFQUErQjtBQUMzQkMsbUJBQWVILE1BQWYsQ0FBc0JDLElBQXRCLEVBQTRCQyxPQUE1QjtBQUNIOztBQUdERixPQUFPLFdBQVAsRUFBb0JJLGtCQUFwQjtBQUNBSixPQUFPLFlBQVAsRUFBcUJLLGVBQXJCO0FBQ0FMLE9BQU8scUJBQVAsRUFBOEJNLDRCQUE5QjtBQUNBTixPQUFPLGVBQVAsRUFBd0JPLHFCQUF4QjtBQUNBUCxPQUFPLGNBQVAsRUFBdUJRLHFCQUF2QjtBQUNBUixPQUFPLGlCQUFQLEVBQTBCUyxtQkFBMUI7QUFDQVQsT0FBTyxpQkFBUCxFQUEwQlUsbUJBQTFCO0FBQ0FWLE9BQU8sYUFBUCxFQUFzQlcsb0JBQXRCOztBQUdBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBcIi4uLy4uL3NjcmlwdHMvY3VzdG9tLWVsZW1lbnRzLm1pblwiO1xuaW1wb3J0IFwiLi4vLi4vc2NyaXB0cy9jdXN0b20tZWxlbWVudHMtZXM1LWFkYXB0ZXIuZXhlY1wiO1xuaW1wb3J0IEVtb2ppIGZyb20gXCIuL2Vtb2ppLmpzXCI7XG5pbXBvcnQgRHJhZ0FyZWEgZnJvbSBcIi4vZHJhZy1hcmVhXCI7XG5pbXBvcnQgVGVsZXN0cmF0b3IgZnJvbSBcIi4vdGVsZXN0cmF0b3IvdGVsZXN0cmF0b3ItZWxlbWVudFwiO1xuaW1wb3J0IENsb2NrIGZyb20gXCIuL2Nsb2Nrcy9jbG9jay1zaW1wbGVcIjtcbmltcG9ydCBTeXN0ZW1DbG9jayBmcm9tIFwiLi9jbG9ja3Mvc3lzdGVtLWNsb2NrXCI7XG5pbXBvcnQgQ291bnRkb3duIGZyb20gXCIuL2Nsb2Nrcy9jb3VudGRvd25cIjtcbmltcG9ydCBTdG9wd2F0Y2ggZnJvbSBcIi4vY2xvY2tzL3N0b3B3YXRjaFwiO1xuaW1wb3J0IEJhc2ljQ2xvY2sgZnJvbSBcIi4vY2xvY2tzL2Jhc2ljLWNsb2NrXCI7XG5cblxuZnVuY3Rpb24gZGVmaW5lKG5hbWUsIGVsZW1lbnQpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUobmFtZSwgZWxlbWVudCk7XG59XG5cblxuZGVmaW5lKCdkcmFnLWFyZWEnLCBEcmFnQXJlYSk7XG5kZWZpbmUoJ215LWVsZW1lbnQnLCBFbW9qaSk7XG5kZWZpbmUoJ3RlbGVzdHJhdG9yLWVsZW1lbnQnLCBUZWxlc3RyYXRvcik7XG5kZWZpbmUoJ2Nsb2NrLWVsZW1lbnQnLCBDbG9jayk7XG5kZWZpbmUoJ3N5c3RlbS1jbG9jaycsIFN5c3RlbUNsb2NrKTtcbmRlZmluZSgnY291bnRkb3duLWNsb2NrJywgQ291bnRkb3duKTtcbmRlZmluZSgnc3RvcHdhdGNoLWNsb2NrJywgU3RvcHdhdGNoKTtcbmRlZmluZSgnYmFzaWMtY2xvY2snLCBCYXNpY0Nsb2NrKTtcblxuXG4vLyBmdW5jdGlvbiBpc0RlZmluZWQobmFtZSkge1xuLy8gICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpLmNvbnN0cnVjdG9yICE9PSBIVE1MRWxlbWVudDtcbi8vIH1cblxuXG5cblxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvY29tcG9uZW50cy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports) {

eval("(function(){\n    'use strict';var h=new function(){};var aa=new Set(\"annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph\".split(\" \"));function m(b){var a=aa.has(b);b=/^[a-z][.0-9_a-z]*-[\\-.0-9_a-z]*$/.test(b);return!a&&b}function n(b){var a=b.isConnected;if(void 0!==a)return a;for(;b&&!(b.__CE_isImportDocument||b instanceof Document);)b=b.parentNode||(window.ShadowRoot&&b instanceof ShadowRoot?b.host:void 0);return!(!b||!(b.__CE_isImportDocument||b instanceof Document))}\n    function p(b,a){for(;a&&a!==b&&!a.nextSibling;)a=a.parentNode;return a&&a!==b?a.nextSibling:null}\n    function t(b,a,c){c=c?c:new Set;for(var d=b;d;){if(d.nodeType===Node.ELEMENT_NODE){var e=d;a(e);var f=e.localName;if(\"link\"===f&&\"import\"===e.getAttribute(\"rel\")){d=e.import;if(d instanceof Node&&!c.has(d))for(c.add(d),d=d.firstChild;d;d=d.nextSibling)t(d,a,c);d=p(b,e);continue}else if(\"template\"===f){d=p(b,e);continue}if(e=e.__CE_shadowRoot)for(e=e.firstChild;e;e=e.nextSibling)t(e,a,c)}d=d.firstChild?d.firstChild:p(b,d)}}function u(b,a,c){b[a]=c};function v(){this.a=new Map;this.s=new Map;this.f=[];this.b=!1}function ba(b,a,c){b.a.set(a,c);b.s.set(c.constructor,c)}function w(b,a){b.b=!0;b.f.push(a)}function x(b,a){b.b&&t(a,function(a){return y(b,a)})}function y(b,a){if(b.b&&!a.__CE_patched){a.__CE_patched=!0;for(var c=0;c<b.f.length;c++)b.f[c](a)}}function z(b,a){var c=[];t(a,function(b){return c.push(b)});for(a=0;a<c.length;a++){var d=c[a];1===d.__CE_state?b.connectedCallback(d):A(b,d)}}\n    function B(b,a){var c=[];t(a,function(b){return c.push(b)});for(a=0;a<c.length;a++){var d=c[a];1===d.__CE_state&&b.disconnectedCallback(d)}}\n    function C(b,a,c){c=c?c:{};var d=c.w||new Set,e=c.i||function(a){return A(b,a)},f=[];t(a,function(a){if(\"link\"===a.localName&&\"import\"===a.getAttribute(\"rel\")){var c=a.import;c instanceof Node&&(c.__CE_isImportDocument=!0,c.__CE_hasRegistry=!0);c&&\"complete\"===c.readyState?c.__CE_documentLoadHandled=!0:a.addEventListener(\"load\",function(){var c=a.import;if(!c.__CE_documentLoadHandled){c.__CE_documentLoadHandled=!0;var f=new Set(d);f.delete(c);C(b,c,{w:f,i:e})}})}else f.push(a)},d);if(b.b)for(a=0;a<\n    f.length;a++)y(b,f[a]);for(a=0;a<f.length;a++)e(f[a])}\n    function A(b,a){if(void 0===a.__CE_state){var c=a.ownerDocument;if(c.defaultView||c.__CE_isImportDocument&&c.__CE_hasRegistry)if(c=b.a.get(a.localName)){c.constructionStack.push(a);var d=c.constructor;try{try{if(new d!==a)throw Error(\"The custom element constructor did not produce the element being upgraded.\");}finally{c.constructionStack.pop()}}catch(r){throw a.__CE_state=2,r;}a.__CE_state=1;a.__CE_definition=c;if(c.attributeChangedCallback)for(c=c.observedAttributes,d=0;d<c.length;d++){var e=c[d],\n        f=a.getAttribute(e);null!==f&&b.attributeChangedCallback(a,e,null,f,null)}n(a)&&b.connectedCallback(a)}}}v.prototype.connectedCallback=function(b){var a=b.__CE_definition;a.connectedCallback&&a.connectedCallback.call(b)};v.prototype.disconnectedCallback=function(b){var a=b.__CE_definition;a.disconnectedCallback&&a.disconnectedCallback.call(b)};\n    v.prototype.attributeChangedCallback=function(b,a,c,d,e){var f=b.__CE_definition;f.attributeChangedCallback&&-1<f.observedAttributes.indexOf(a)&&f.attributeChangedCallback.call(b,a,c,d,e)};function D(b,a){this.c=b;this.a=a;this.b=void 0;C(this.c,this.a);\"loading\"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function E(b){b.b&&b.b.disconnect()}D.prototype.f=function(b){var a=this.a.readyState;\"interactive\"!==a&&\"complete\"!==a||E(this);for(a=0;a<b.length;a++)for(var c=b[a].addedNodes,d=0;d<c.length;d++)C(this.c,c[d])};function ca(){var b=this;this.b=this.a=void 0;this.f=new Promise(function(a){b.b=a;b.a&&a(b.a)})}function F(b){if(b.a)throw Error(\"Already resolved.\");b.a=void 0;b.b&&b.b(void 0)};function G(b){this.j=!1;this.c=b;this.o=new Map;this.l=function(b){return b()};this.g=!1;this.m=[];this.u=new D(b,document)}\n    G.prototype.define=function(b,a){var c=this;if(!(a instanceof Function))throw new TypeError(\"Custom element constructors must be functions.\");if(!m(b))throw new SyntaxError(\"The element name '\"+b+\"' is not valid.\");if(this.c.a.get(b))throw Error(\"A custom element with name '\"+b+\"' has already been defined.\");if(this.j)throw Error(\"A custom element is already being defined.\");this.j=!0;var d,e,f,r,k;try{var g=function(b){var a=l[b];if(void 0!==a&&!(a instanceof Function))throw Error(\"The '\"+b+\"' callback must be a function.\");\n        return a},l=a.prototype;if(!(l instanceof Object))throw new TypeError(\"The custom element constructor's prototype is not an object.\");d=g(\"connectedCallback\");e=g(\"disconnectedCallback\");f=g(\"adoptedCallback\");r=g(\"attributeChangedCallback\");k=a.observedAttributes||[]}catch(q){return}finally{this.j=!1}a={localName:b,constructor:a,connectedCallback:d,disconnectedCallback:e,adoptedCallback:f,attributeChangedCallback:r,observedAttributes:k,constructionStack:[]};ba(this.c,b,a);this.m.push(a);this.g||\n    (this.g=!0,this.l(function(){return da(c)}))};G.prototype.i=function(b){C(this.c,b)};function da(b){if(!1!==b.g){b.g=!1;for(var a=b.m,c=[],d=new Map,e=0;e<a.length;e++)d.set(a[e].localName,[]);C(b.c,document,{i:function(a){if(void 0===a.__CE_state){var e=a.localName,f=d.get(e);f?f.push(a):b.c.a.get(e)&&c.push(a)}}});for(e=0;e<c.length;e++)A(b.c,c[e]);for(;0<a.length;){for(var f=a.shift(),e=f.localName,f=d.get(f.localName),r=0;r<f.length;r++)A(b.c,f[r]);(e=b.o.get(e))&&F(e)}}}\n    G.prototype.get=function(b){if(b=this.c.a.get(b))return b.constructor};G.prototype.whenDefined=function(b){if(!m(b))return Promise.reject(new SyntaxError(\"'\"+b+\"' is not a valid custom element name.\"));var a=this.o.get(b);if(a)return a.f;a=new ca;this.o.set(b,a);this.c.a.get(b)&&!this.m.some(function(a){return a.localName===b})&&F(a);return a.f};G.prototype.v=function(b){E(this.u);var a=this.l;this.l=function(c){return b(function(){return a(c)})}};window.CustomElementRegistry=G;\n    G.prototype.define=G.prototype.define;G.prototype.upgrade=G.prototype.i;G.prototype.get=G.prototype.get;G.prototype.whenDefined=G.prototype.whenDefined;G.prototype.polyfillWrapFlushCallback=G.prototype.v;var H=window.Document.prototype.createElement,I=window.Document.prototype.createElementNS,ea=window.Document.prototype.importNode,fa=window.Document.prototype.prepend,ga=window.Document.prototype.append,ha=window.DocumentFragment.prototype.prepend,ia=window.DocumentFragment.prototype.append,J=window.Node.prototype.cloneNode,K=window.Node.prototype.appendChild,L=window.Node.prototype.insertBefore,M=window.Node.prototype.removeChild,N=window.Node.prototype.replaceChild,O=Object.getOwnPropertyDescriptor(window.Node.prototype,\n        \"textContent\"),P=window.Element.prototype.attachShadow,Q=Object.getOwnPropertyDescriptor(window.Element.prototype,\"innerHTML\"),R=window.Element.prototype.getAttribute,S=window.Element.prototype.setAttribute,T=window.Element.prototype.removeAttribute,U=window.Element.prototype.getAttributeNS,ja=window.Element.prototype.setAttributeNS,ka=window.Element.prototype.removeAttributeNS,la=window.Element.prototype.insertAdjacentElement,ma=window.Element.prototype.insertAdjacentHTML,na=window.Element.prototype.prepend,\n        oa=window.Element.prototype.append,V=window.Element.prototype.before,pa=window.Element.prototype.after,qa=window.Element.prototype.replaceWith,ra=window.Element.prototype.remove,sa=window.HTMLElement,W=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,\"innerHTML\"),ta=window.HTMLElement.prototype.insertAdjacentElement,ua=window.HTMLElement.prototype.insertAdjacentHTML;function va(){var b=X;window.HTMLElement=function(){function a(){var a=this.constructor,d=b.s.get(a);if(!d)throw Error(\"The custom element being constructed was not registered with `customElements`.\");var e=d.constructionStack;if(!e.length)return e=H.call(document,d.localName),Object.setPrototypeOf(e,a.prototype),e.__CE_state=1,e.__CE_definition=d,y(b,e),e;var d=e.length-1,f=e[d];if(f===h)throw Error(\"The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.\");\n        e[d]=h;Object.setPrototypeOf(f,a.prototype);y(b,f);return f}a.prototype=sa.prototype;Object.defineProperty(a.prototype,\"constructor\",{writable:!0,configurable:!0,enumerable:!1,value:a});return a}()};function Y(b,a,c){function d(a){return function(c){for(var e=[],d=0;d<arguments.length;++d)e[d-0]=arguments[d];for(var d=[],f=[],l=0;l<e.length;l++){var q=e[l];q instanceof Element&&n(q)&&f.push(q);if(q instanceof DocumentFragment)for(q=q.firstChild;q;q=q.nextSibling)d.push(q);else d.push(q)}a.apply(this,e);for(e=0;e<f.length;e++)B(b,f[e]);if(n(this))for(e=0;e<d.length;e++)f=d[e],f instanceof Element&&z(b,f)}}c.h&&(a.prepend=d(c.h));c.append&&(a.append=d(c.append))};function wa(){var b=X;u(Document.prototype,\"createElement\",function(a){if(this.__CE_hasRegistry){var c=b.a.get(a);if(c)return new c.constructor}a=H.call(this,a);y(b,a);return a});u(Document.prototype,\"importNode\",function(a,c){a=ea.call(this,a,c);this.__CE_hasRegistry?C(b,a):x(b,a);return a});u(Document.prototype,\"createElementNS\",function(a,c){if(this.__CE_hasRegistry&&(null===a||\"http://www.w3.org/1999/xhtml\"===a)){var d=b.a.get(c);if(d)return new d.constructor}a=I.call(this,a,c);y(b,a);return a});\n        Y(b,Document.prototype,{h:fa,append:ga})};function xa(){var b=X;function a(a,d){Object.defineProperty(a,\"textContent\",{enumerable:d.enumerable,configurable:!0,get:d.get,set:function(a){if(this.nodeType===Node.TEXT_NODE)d.set.call(this,a);else{var e=void 0;if(this.firstChild){var c=this.childNodes,k=c.length;if(0<k&&n(this))for(var e=Array(k),g=0;g<k;g++)e[g]=c[g]}d.set.call(this,a);if(e)for(a=0;a<e.length;a++)B(b,e[a])}}})}u(Node.prototype,\"insertBefore\",function(a,d){if(a instanceof DocumentFragment){var e=Array.prototype.slice.apply(a.childNodes);\n        a=L.call(this,a,d);if(n(this))for(d=0;d<e.length;d++)z(b,e[d]);return a}e=n(a);d=L.call(this,a,d);e&&B(b,a);n(this)&&z(b,a);return d});u(Node.prototype,\"appendChild\",function(a){if(a instanceof DocumentFragment){var c=Array.prototype.slice.apply(a.childNodes);a=K.call(this,a);if(n(this))for(var e=0;e<c.length;e++)z(b,c[e]);return a}c=n(a);e=K.call(this,a);c&&B(b,a);n(this)&&z(b,a);return e});u(Node.prototype,\"cloneNode\",function(a){a=J.call(this,a);this.ownerDocument.__CE_hasRegistry?C(b,a):x(b,a);\n        return a});u(Node.prototype,\"removeChild\",function(a){var c=n(a),e=M.call(this,a);c&&B(b,a);return e});u(Node.prototype,\"replaceChild\",function(a,d){if(a instanceof DocumentFragment){var e=Array.prototype.slice.apply(a.childNodes);a=N.call(this,a,d);if(n(this))for(B(b,d),d=0;d<e.length;d++)z(b,e[d]);return a}var e=n(a),f=N.call(this,a,d),c=n(this);c&&B(b,d);e&&B(b,a);c&&z(b,a);return f});O&&O.get?a(Node.prototype,O):w(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){for(var a=[],b=\n        0;b<this.childNodes.length;b++)a.push(this.childNodes[b].textContent);return a.join(\"\")},set:function(a){for(;this.firstChild;)M.call(this,this.firstChild);K.call(this,document.createTextNode(a))}})})};function ya(b){var a=Element.prototype;function c(a){return function(e){for(var c=[],d=0;d<arguments.length;++d)c[d-0]=arguments[d];for(var d=[],k=[],g=0;g<c.length;g++){var l=c[g];l instanceof Element&&n(l)&&k.push(l);if(l instanceof DocumentFragment)for(l=l.firstChild;l;l=l.nextSibling)d.push(l);else d.push(l)}a.apply(this,c);for(c=0;c<k.length;c++)B(b,k[c]);if(n(this))for(c=0;c<d.length;c++)k=d[c],k instanceof Element&&z(b,k)}}V&&(a.before=c(V));V&&(a.after=c(pa));qa&&u(a,\"replaceWith\",function(a){for(var e=\n        [],c=0;c<arguments.length;++c)e[c-0]=arguments[c];for(var c=[],d=[],k=0;k<e.length;k++){var g=e[k];g instanceof Element&&n(g)&&d.push(g);if(g instanceof DocumentFragment)for(g=g.firstChild;g;g=g.nextSibling)c.push(g);else c.push(g)}k=n(this);qa.apply(this,e);for(e=0;e<d.length;e++)B(b,d[e]);if(k)for(B(b,this),e=0;e<c.length;e++)d=c[e],d instanceof Element&&z(b,d)});ra&&u(a,\"remove\",function(){var a=n(this);ra.call(this);a&&B(b,this)})};function za(){var b=X;function a(a,c){Object.defineProperty(a,\"innerHTML\",{enumerable:c.enumerable,configurable:!0,get:c.get,set:function(a){var e=this,d=void 0;n(this)&&(d=[],t(this,function(a){a!==e&&d.push(a)}));c.set.call(this,a);if(d)for(var f=0;f<d.length;f++){var r=d[f];1===r.__CE_state&&b.disconnectedCallback(r)}this.ownerDocument.__CE_hasRegistry?C(b,this):x(b,this);return a}})}function c(a,c){u(a,\"insertAdjacentElement\",function(a,e){var d=n(e);a=c.call(this,a,e);d&&B(b,e);n(a)&&z(b,e);\n        return a})}function d(a,c){function e(a,e){for(var c=[];a!==e;a=a.nextSibling)c.push(a);for(e=0;e<c.length;e++)C(b,c[e])}u(a,\"insertAdjacentHTML\",function(a,b){a=a.toLowerCase();if(\"beforebegin\"===a){var d=this.previousSibling;c.call(this,a,b);e(d||this.parentNode.firstChild,this)}else if(\"afterbegin\"===a)d=this.firstChild,c.call(this,a,b),e(this.firstChild,d);else if(\"beforeend\"===a)d=this.lastChild,c.call(this,a,b),e(d||this.firstChild,null);else if(\"afterend\"===a)d=this.nextSibling,c.call(this,\n        a,b),e(this.nextSibling,d);else throw new SyntaxError(\"The value provided (\"+String(a)+\") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.\");})}P&&u(Element.prototype,\"attachShadow\",function(a){return this.__CE_shadowRoot=a=P.call(this,a)});Q&&Q.get?a(Element.prototype,Q):W&&W.get?a(HTMLElement.prototype,W):w(b,function(b){a(b,{enumerable:!0,configurable:!0,get:function(){return J.call(this,!0).innerHTML},set:function(a){var b=\"template\"===this.localName,e=b?this.content:this,\n        c=I.call(document,this.namespaceURI,this.localName);for(c.innerHTML=a;0<e.childNodes.length;)M.call(e,e.childNodes[0]);for(a=b?c.content:c;0<a.childNodes.length;)K.call(e,a.childNodes[0])}})});u(Element.prototype,\"setAttribute\",function(a,c){if(1!==this.__CE_state)return S.call(this,a,c);var e=R.call(this,a);S.call(this,a,c);c=R.call(this,a);b.attributeChangedCallback(this,a,e,c,null)});u(Element.prototype,\"setAttributeNS\",function(a,c,d){if(1!==this.__CE_state)return ja.call(this,a,c,d);var e=U.call(this,\n        a,c);ja.call(this,a,c,d);d=U.call(this,a,c);b.attributeChangedCallback(this,c,e,d,a)});u(Element.prototype,\"removeAttribute\",function(a){if(1!==this.__CE_state)return T.call(this,a);var c=R.call(this,a);T.call(this,a);null!==c&&b.attributeChangedCallback(this,a,c,null,null)});u(Element.prototype,\"removeAttributeNS\",function(a,c){if(1!==this.__CE_state)return ka.call(this,a,c);var d=U.call(this,a,c);ka.call(this,a,c);var e=U.call(this,a,c);d!==e&&b.attributeChangedCallback(this,c,d,e,a)});ta?c(HTMLElement.prototype,\n        ta):la?c(Element.prototype,la):console.warn(\"Custom Elements: `Element#insertAdjacentElement` was not patched.\");ua?d(HTMLElement.prototype,ua):ma?d(Element.prototype,ma):console.warn(\"Custom Elements: `Element#insertAdjacentHTML` was not patched.\");Y(b,Element.prototype,{h:na,append:oa});ya(b)};/*\n     Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n     This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n     The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n     The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n     Code distributed by Google as part of the polymer project is also\n     subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n     */\n    var Z=window.customElements;if(!Z||Z.forcePolyfill||\"function\"!=typeof Z.define||\"function\"!=typeof Z.get){var X=new v;va();wa();Y(X,DocumentFragment.prototype,{h:ha,append:ia});xa();za();document.__CE_hasRegistry=!0;var customElements=new G(X);Object.defineProperty(window,\"customElements\",{configurable:!0,enumerable:!0,value:customElements})};\n}).call(self);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports) {

eval("/* eslint-disable */\n(function () {\n'use strict';\n\n(()=>{'use strict';if(!window.customElements)return;const a=window.HTMLElement,b=window.customElements.define,c=window.customElements.get,d=new Map,e=new Map;let f=!1,g=!1;window.HTMLElement=function(){if(!f){const a=d.get(this.constructor),b=c.call(window.customElements,a);g=!0;const e=new b;return e}f=!1;},window.HTMLElement.prototype=a.prototype;Object.defineProperty(window,'customElements',{value:window.customElements,configurable:!0,writable:!0}),Object.defineProperty(window.customElements,'define',{value:(c,h)=>{const i=h.prototype,j=class extends a{constructor(){super(),Object.setPrototypeOf(this,i),g||(f=!0,h.call(this)),g=!1;}},k=j.prototype;j.observedAttributes=h.observedAttributes,k.connectedCallback=i.connectedCallback,k.disconnectedCallback=i.disconnectedCallback,k.attributeChangedCallback=i.attributeChangedCallback,k.adoptedCallback=i.adoptedCallback,d.set(h,c),e.set(c,h),b.call(window.customElements,c,j);},configurable:!0,writable:!0}),Object.defineProperty(window.customElements,'get',{value:(a)=>e.get(a),configurable:!0,writable:!0});})();\n\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n}());\n\n/* eslint-enable *///# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zY3JpcHRzL2N1c3RvbS1lbGVtZW50cy1lczUtYWRhcHRlci5leGVjLmpzP2FiNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUVBLE1BQU0sYUFBYSxpQ0FBaUMsMEdBQTBHLGNBQWMsOEJBQThCLE9BQU8sa0VBQWtFLEtBQUssY0FBYyxTQUFTLE1BQU0sMENBQTBDLCtDQUErQyx3REFBd0Qsd0RBQXdELGNBQWMsc0NBQXNDLGNBQWMsb0VBQW9FLGVBQWUsbVJBQW1SLDZCQUE2QixxREFBcUQsZ0RBQWdELEdBQUc7O0FBRTNpQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRCIsImZpbGUiOiIyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlICovXG4oZnVuY3Rpb24gKCkge1xuJ3VzZSBzdHJpY3QnO1xuXG4oKCk9PnsndXNlIHN0cmljdCc7aWYoIXdpbmRvdy5jdXN0b21FbGVtZW50cylyZXR1cm47Y29uc3QgYT13aW5kb3cuSFRNTEVsZW1lbnQsYj13aW5kb3cuY3VzdG9tRWxlbWVudHMuZGVmaW5lLGM9d2luZG93LmN1c3RvbUVsZW1lbnRzLmdldCxkPW5ldyBNYXAsZT1uZXcgTWFwO2xldCBmPSExLGc9ITE7d2luZG93LkhUTUxFbGVtZW50PWZ1bmN0aW9uKCl7aWYoIWYpe2NvbnN0IGE9ZC5nZXQodGhpcy5jb25zdHJ1Y3RvciksYj1jLmNhbGwod2luZG93LmN1c3RvbUVsZW1lbnRzLGEpO2c9ITA7Y29uc3QgZT1uZXcgYjtyZXR1cm4gZX1mPSExO30sd2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZT1hLnByb3RvdHlwZTtPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LCdjdXN0b21FbGVtZW50cycse3ZhbHVlOndpbmRvdy5jdXN0b21FbGVtZW50cyxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KSxPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LmN1c3RvbUVsZW1lbnRzLCdkZWZpbmUnLHt2YWx1ZTooYyxoKT0+e2NvbnN0IGk9aC5wcm90b3R5cGUsaj1jbGFzcyBleHRlbmRzIGF7Y29uc3RydWN0b3IoKXtzdXBlcigpLE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLGkpLGd8fChmPSEwLGguY2FsbCh0aGlzKSksZz0hMTt9fSxrPWoucHJvdG90eXBlO2oub2JzZXJ2ZWRBdHRyaWJ1dGVzPWgub2JzZXJ2ZWRBdHRyaWJ1dGVzLGsuY29ubmVjdGVkQ2FsbGJhY2s9aS5jb25uZWN0ZWRDYWxsYmFjayxrLmRpc2Nvbm5lY3RlZENhbGxiYWNrPWkuZGlzY29ubmVjdGVkQ2FsbGJhY2ssay5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s9aS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2ssay5hZG9wdGVkQ2FsbGJhY2s9aS5hZG9wdGVkQ2FsbGJhY2ssZC5zZXQoaCxjKSxlLnNldChjLGgpLGIuY2FsbCh3aW5kb3cuY3VzdG9tRWxlbWVudHMsYyxqKTt9LGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3cuY3VzdG9tRWxlbWVudHMsJ2dldCcse3ZhbHVlOihhKT0+ZS5nZXQoYSksY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk7fSkoKTtcblxuLyoqXG5AbGljZW5zZVxuQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcblRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG5UaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbkNvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG5zdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cblxufSgpKTtcblxuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc2NyaXB0cy9jdXN0b20tZWxlbWVudHMtZXM1LWFkYXB0ZXIuZXhlYy5qc1xuLy8gbW9kdWxlIGlkID0gMjlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar MyElement = function (_HTMLElement) {\n    _inherits(MyElement, _HTMLElement);\n\n    function MyElement() {\n        _classCallCheck(this, MyElement);\n\n        return _possibleConstructorReturn(this, (MyElement.__proto__ || Object.getPrototypeOf(MyElement)).call(this));\n    }\n\n    _createClass(MyElement, [{\n        key: 'connectedCallback',\n        value: function connectedCallback() {\n            this.style.cursor = 'pointer';\n            this.style.userSelect = 'none';\n            this.render();\n\n            this.addEventListener('click', this.onClick);\n        }\n    }, {\n        key: 'disconnectedCallback',\n        value: function disconnectedCallback() {\n            this.removeEventListener('click', this.onClick);\n        }\n\n        /**\n         * Render the content. Will render a\n         * happy face if the `happy` attribute\n         * is set, sad otherwise.\n         */\n\n    }, {\n        key: 'render',\n        value: function render() {\n            this.innerHTML = this.happy ? '&#x1f603;' : '&#x1f620;';\n        }\n\n        /**\n         * Click handler. Toggles the `happy`\n         * property.\n         */\n\n    }, {\n        key: 'onClick',\n        value: function onClick() {\n            this.happy = !this.happy;\n        }\n    }, {\n        key: 'attributeChangedCallback',\n        value: function attributeChangedCallback() {\n            this.render();\n        }\n    }, {\n        key: 'happy',\n        get: function get() {\n            return this.hasAttribute('happy');\n        },\n        set: function set(value) {\n            if (value) {\n                this.setAttribute('happy', '');\n            } else {\n                this.removeAttribute('happy');\n            }\n        }\n    }], [{\n        key: 'observedAttributes',\n        get: function get() {\n            return ['happy'];\n        }\n    }]);\n\n    return MyElement;\n}(HTMLElement);\n\nexports.default = MyElement;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9lbW9qaS5qcz83YjczIl0sIm5hbWVzIjpbIk15RWxlbWVudCIsInN0eWxlIiwiY3Vyc29yIiwidXNlclNlbGVjdCIsInJlbmRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbkNsaWNrIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlubmVySFRNTCIsImhhcHB5IiwiaGFzQXR0cmlidXRlIiwidmFsdWUiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJIVE1MRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7SUFBcUJBLFM7OztBQUNqQix5QkFBYztBQUFBOztBQUFBO0FBRWI7Ozs7NENBRW1CO0FBQ2hCLGlCQUFLQyxLQUFMLENBQVdDLE1BQVgsR0FBb0IsU0FBcEI7QUFDQSxpQkFBS0QsS0FBTCxDQUFXRSxVQUFYLEdBQXdCLE1BQXhCO0FBQ0EsaUJBQUtDLE1BQUw7O0FBRUEsaUJBQUtDLGdCQUFMLENBQXNCLE9BQXRCLEVBQStCLEtBQUtDLE9BQXBDO0FBQ0g7OzsrQ0FFc0I7QUFDbkIsaUJBQUtDLG1CQUFMLENBQXlCLE9BQXpCLEVBQWtDLEtBQUtELE9BQXZDO0FBQ0g7O0FBRUQ7Ozs7Ozs7O2lDQUtTO0FBQ0wsaUJBQUtFLFNBQUwsR0FBaUIsS0FBS0MsS0FBTCxHQUFhLFdBQWIsR0FBMkIsV0FBNUM7QUFDSDs7QUFFRDs7Ozs7OztrQ0FJVTtBQUNOLGlCQUFLQSxLQUFMLEdBQWEsQ0FBQyxLQUFLQSxLQUFuQjtBQUNIOzs7bURBTTBCO0FBQ3ZCLGlCQUFLTCxNQUFMO0FBQ0g7Ozs0QkFFVztBQUNSLG1CQUFPLEtBQUtNLFlBQUwsQ0FBa0IsT0FBbEIsQ0FBUDtBQUNILFM7MEJBRVNDLEssRUFBTztBQUNiLGdCQUFJQSxLQUFKLEVBQVc7QUFDUCxxQkFBS0MsWUFBTCxDQUFrQixPQUFsQixFQUEyQixFQUEzQjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLQyxlQUFMLENBQXFCLE9BQXJCO0FBQ0g7QUFDSjs7OzRCQWxCK0I7QUFDNUIsbUJBQU8sQ0FBQyxPQUFELENBQVA7QUFDSDs7OztFQXBDa0NDLFc7O2tCQUFsQmQsUyIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIE15RWxlbWVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG4gICAgICAgIHRoaXMuc3R5bGUudXNlclNlbGVjdCA9ICdub25lJztcbiAgICAgICAgdGhpcy5yZW5kZXIoKTtcblxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrKTtcbiAgICB9XG5cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub25DbGljayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIHRoZSBjb250ZW50LiBXaWxsIHJlbmRlciBhXG4gICAgICogaGFwcHkgZmFjZSBpZiB0aGUgYGhhcHB5YCBhdHRyaWJ1dGVcbiAgICAgKiBpcyBzZXQsIHNhZCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgcmVuZGVyKCkge1xuICAgICAgICB0aGlzLmlubmVySFRNTCA9IHRoaXMuaGFwcHkgPyAnJiN4MWY2MDM7JyA6ICcmI3gxZjYyMDsnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrIGhhbmRsZXIuIFRvZ2dsZXMgdGhlIGBoYXBweWBcbiAgICAgKiBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBvbkNsaWNrKCkge1xuICAgICAgICB0aGlzLmhhcHB5ID0gIXRoaXMuaGFwcHk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgICAgIHJldHVybiBbJ2hhcHB5J107XG4gICAgfVxuXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgIH1cblxuICAgIGdldCBoYXBweSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXR0cmlidXRlKCdoYXBweScpO1xuICAgIH1cblxuICAgIHNldCBoYXBweSh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKCdoYXBweScsICcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdoYXBweScpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL2Vtb2ppLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar DragArea = function (_HTMLElement) {\n    _inherits(DragArea, _HTMLElement);\n\n    function DragArea() {\n        _classCallCheck(this, DragArea);\n\n        var _this = _possibleConstructorReturn(this, (DragArea.__proto__ || Object.getPrototypeOf(DragArea)).call(this));\n\n        _this._dragging = false;\n        _this._result = { x: 0, y: 0 };\n        return _this;\n    }\n\n    _createClass(DragArea, [{\n        key: 'connectedCallback',\n        value: function connectedCallback() {\n            this.style.cursor = 'pointer';\n            this.style.userSelect = 'none';\n            this.addEventListener('mousedown', this.mouseDown);\n            this.addEventListener('touchstart', this.touchStart);\n            this.addEventListener('mouseup', this.mouseUp);\n            this.addEventListener('touchend', this.touchEnd);\n            this.addEventListener('mousemove', this.mouseMove);\n            this.addEventListener('touchmove', this.touchMove);\n        }\n    }, {\n        key: 'disconnectedCallback',\n        value: function disconnectedCallback() {\n            this.removeEventListener('mousedown', this.mouseDown);\n            this.removeEventListener('touchstart', this.touchStart);\n            this.removeEventListener('mouseup', this.mouseUp);\n            this.removeEventListener('touchend', this.touchEnd);\n            this.removeEventListener('mousemove', this.mouseMove);\n            this.removeEventListener('touchmove', this.touchMove);\n        }\n    }, {\n        key: 'calc',\n        value: function calc(e) {\n            if (this._dragging) {\n                var bounds = this.getBoundingClientRect();\n                var x = 0;\n                var y = 0;\n                if (this.mode === \"screen\") {\n                    x = e.screenX;\n                    y = e.screenY;\n                } else if (this.mode === \"linear\") {\n\n                    x = this.minValueX + (e.clientX - bounds.left) / bounds.width * (this.maxValueX - this.minValueX);\n                    y = this.minValueY + (e.clientY - bounds.top) / bounds.height * (this.maxValueY - this.minValueY);\n                } else {\n                    x = e.clientX - bounds.left;\n                    y = e.clientY - bounds.top;\n                }\n\n                if (this.precision === \"int\") {\n                    x = Math.floor(x);\n                    y = Math.floor(y);\n                }\n\n                this._result.x = x;\n                this._result.y = y;\n\n                // console.log(x + \" : \" + y);\n            }\n        }\n    }, {\n        key: 'mouseDown',\n        value: function mouseDown(e) {\n            this._dragging = true;\n            this.calc(e);\n        }\n    }, {\n        key: 'touchStart',\n        value: function touchStart(e) {\n            this._dragging = true;\n            this.calc(e.originalEvent.touches[0]);\n        }\n    }, {\n        key: 'mouseUp',\n        value: function mouseUp() {\n            this._dragging = false;\n        }\n    }, {\n        key: 'touchEnd',\n        value: function touchEnd() {\n            this._dragging = false;\n        }\n    }, {\n        key: 'mouseMove',\n        value: function mouseMove(e) {\n            this.calc(e);\n        }\n    }, {\n        key: 'touchMove',\n        value: function touchMove(e) {\n            this.calc(e.originalEvent.touches[0]);\n        }\n    }, {\n        key: 'attributeChangedCallback',\n        value: function attributeChangedCallback() {}\n    }, {\n        key: 'expose',\n        value: function expose() {\n            return {\n                xValue: {\n                    path: 'result.x'\n                },\n                yValue: 'result.y'\n            };\n        }\n    }, {\n        key: 'isDragging',\n        get: function get() {\n            return this._dragging;\n        }\n    }, {\n        key: 'result',\n        get: function get() {\n            return this._result;\n        }\n    }, {\n        key: 'mode',\n        get: function get() {\n            return this.getAttribute(\"mode\");\n        }\n    }, {\n        key: 'minValueX',\n        get: function get() {\n            return parseInt(this.getAttribute(\"min-value-x\"));\n        }\n    }, {\n        key: 'minValueY',\n        get: function get() {\n            return parseInt(this.getAttribute(\"min-value-y\"));\n        }\n    }, {\n        key: 'maxValueX',\n        get: function get() {\n            return parseInt(this.getAttribute(\"max-value-x\"));\n        }\n    }, {\n        key: 'maxValueY',\n        get: function get() {\n            return parseInt(this.getAttribute(\"max-value-y\"));\n        }\n    }, {\n        key: 'precision',\n        get: function get() {\n            return this.getAttribute(\"precision\");\n        }\n    }], [{\n        key: 'observedAttributes',\n        get: function get() {\n            return ['result', 'mode', 'minValueX', 'minValueY', 'maxValueX', 'maxValueY', 'precision'];\n        }\n    }]);\n\n    return DragArea;\n}(HTMLElement);\n\nexports.default = DragArea;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(33);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Telestrator = function (_HTMLElement) {\n    _inherits(Telestrator, _HTMLElement);\n\n    function Telestrator() {\n        _classCallCheck(this, Telestrator);\n\n        var _this = _possibleConstructorReturn(this, (Telestrator.__proto__ || Object.getPrototypeOf(Telestrator)).call(this));\n\n        _this.clickX = [];\n        _this.clickY = [];\n        _this.clickDrag = [];\n        _this.lastStroke = 0;\n        return _this;\n    }\n\n    _createClass(Telestrator, [{\n        key: 'connectedCallback',\n        value: function connectedCallback() {\n            this.innerHTML = '<canvas id=\"telestrator-canvas\" width=\"1920\" height=\"1080\"></canvas>';\n            this.canvas = this.querySelector('#telestrator-canvas');\n            this.context = this.canvas.getContext(\"2d\");\n\n            this.canvas.addEventListener('mousedown', this.mouseDown);\n            this.canvas.addEventListener('touchstart', this.touchStart);\n            this.canvas.addEventListener('mouseup', this.mouseUp);\n            this.canvas.addEventListener('touchend', this.touchEnd);\n            this.canvas.addEventListener('mousemove', this.mouseMove);\n            this.canvas.addEventListener('touchmove', this.touchMove);\n            this.canvas.addEventListener('mouseleave', this.mouseLeave);\n        }\n    }, {\n        key: 'disconnectedCallback',\n        value: function disconnectedCallback() {\n            this.canvas.removeEventListener('mousedown', this.mouseDown);\n            this.canvas.removeEventListener('touchstart', this.touchStart);\n            this.canvas.removeEventListener('mouseup', this.mouseUp);\n            this.canvas.removeEventListener('touchend', this.touchEnd);\n            this.canvas.removeEventListener('mousemove', this.mouseMove);\n            this.canvas.removeEventListener('touchmove', this.touchMove);\n            this.canvas.removeEventListener('mouseleave', this.mouseLeave);\n        }\n    }, {\n        key: 'clear',\n        value: function clear() {\n            this.clickX = [];\n            this.clickY = [];\n            this.clickDrag = [];\n            this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);\n            this.lastStroke = 0;\n        }\n    }, {\n        key: 'addClick',\n        value: function addClick(x, y, dragging) {\n            this.clickX.push(x);\n            this.clickY.push(y);\n            this.clickDrag.push(dragging);\n        }\n    }, {\n        key: 'redraw',\n        value: function redraw() {\n            this.context.strokeStyle = this.color;\n            this.context.lineJoin = \"round\";\n            this.context.lineCap = \"round\";\n            this.context.lineWidth = this.size;\n\n            for (var i = this.lastStroke; i < this.clickX.length; i++) {\n                this.context.beginPath();\n                if (this.clickDrag[i] && i) {\n                    this.context.moveTo(this.clickX[i - 1], this.clickY[i - 1]);\n                } else {\n                    this.context.moveTo(this.clickX[i] - 1, this.clickY[i]);\n                }\n                this.context.lineTo(this.clickX[i], this.clickY[i]);\n                this.context.closePath();\n                this.context.stroke();\n            }\n            this.lastStroke = this.clickX.length;\n        }\n    }, {\n        key: 'mouseDown',\n        value: function mouseDown(e) {\n            var bounds = this.getBoundingClientRect();\n            var mouseX = (e.clientX - bounds.left) / bounds.width * this.width;\n            var mouseY = (e.clientY - bounds.top) / bounds.height * this.height;\n\n            this.parentElement.paint = true;\n            this.parentElement.addClick(mouseX, mouseY);\n            this.parentElement.redraw();\n        }\n    }, {\n        key: 'touchStart',\n        value: function touchStart(e) {\n            var bounds = this.getBoundingClientRect();\n            var mouseX = (e.originalEvent.touches[0].clientX - bounds.left) / bounds.width * this.width;\n            var mouseY = (e.originalEvent.touches[0].clientY - bounds.top) / bounds.height * this.height;\n\n            this.parentElement.paint = true;\n            this.parentElement.addClick(mouseX, mouseY);\n            this.parentElement.redraw();\n        }\n    }, {\n        key: 'mouseUp',\n        value: function mouseUp() {\n            this.parentElement.paint = false;\n            this.parentElement.context.closePath();\n        }\n    }, {\n        key: 'touchEnd',\n        value: function touchEnd() {\n            this.parentElement.paint = false;\n            this.parentElement.context.closePath();\n        }\n    }, {\n        key: 'mouseLeave',\n        value: function mouseLeave() {\n            this.parentElement.paint = false;\n            this.parentElement.context.closePath();\n        }\n    }, {\n        key: 'mouseMove',\n        value: function mouseMove(e) {\n            if (this.parentElement.paint) {\n                var bounds = this.getBoundingClientRect();\n                var mouseX = (e.clientX - bounds.left) / bounds.width * this.width;\n                var mouseY = (e.clientY - bounds.top) / bounds.height * this.height;\n\n                this.parentElement.addClick(mouseX, mouseY, true);\n                this.parentElement.redraw();\n            }\n        }\n    }, {\n        key: 'touchMove',\n        value: function touchMove(e) {\n            if (this.parentElement.paint) {\n                var bounds = this.getBoundingClientRect();\n                var mouseX = (e.originalEvent.touches[0].clientX - bounds.left) / bounds.width * this.width;\n                var mouseY = (e.originalEvent.touches[0].clientY - bounds.top) / bounds.height * this.height;\n\n                this.parentElement.addClick(mouseX, mouseY, true);\n                this.parentElement.redraw();\n            }\n        }\n    }, {\n        key: 'attributeChangedCallback',\n        value: function attributeChangedCallback() {}\n    }, {\n        key: 'expose',\n        value: function expose() {\n            return {\n                Color: \"color\",\n                Size: {\n                    path: \"size\"\n                }\n            };\n        }\n    }, {\n        key: 'color',\n        get: function get() {\n            return this.getAttribute(\"color\") || 'black';\n        },\n        set: function set(value) {\n            this.setAttribute('color', value);\n        }\n    }, {\n        key: 'size',\n        get: function get() {\n            return parseInt(this.getAttribute(\"size\")) || 5;\n        },\n        set: function set(value) {\n            this.setAttribute('size', value);\n        }\n    }], [{\n        key: 'observedAttributes',\n        get: function get() {\n            return [];\n        }\n    }]);\n\n    return Telestrator;\n}(HTMLElement);\n\nexports.default = Telestrator;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

eval("\nvar content = __webpack_require__(34);\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(36)(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(false) {\n\tmodule.hot.accept(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./telestrator-element.scss\", function() {\n\t\tvar newContent = require(\"!!../../../node_modules/css-loader/index.js!../../../node_modules/sass-loader/lib/loader.js!./telestrator-element.scss\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90ZWxlc3RyYXRvci90ZWxlc3RyYXRvci1lbGVtZW50LnNjc3M/NTIzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQXdIOztBQUU5SSw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsRUFBc0Q7O0FBRTNFOztBQUVBLEdBQUcsS0FBVTtBQUNiO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQSxFQUFFOztBQUVGLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi90ZWxlc3RyYXRvci1lbGVtZW50LnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vdGVsZXN0cmF0b3ItZWxlbWVudC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi90ZWxlc3RyYXRvci1lbGVtZW50LnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9jb21wb25lbnRzL3RlbGVzdHJhdG9yL3RlbGVzdHJhdG9yLWVsZW1lbnQuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMzNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(35)(false);\n// imports\n\n\n// module\nexports.push([module.i, \"telestrator-element #telestrator-canvas {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy90ZWxlc3RyYXRvci90ZWxlc3RyYXRvci1lbGVtZW50LnNjc3M/ZjRkYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxFQUFrRDtBQUNyRjs7O0FBR0E7QUFDQSxjQUFjLFFBQVMsNENBQTRDLHVCQUF1QixXQUFXLFlBQVksZ0JBQWdCLGlCQUFpQixFQUFFOztBQUVwSiIsImZpbGUiOiIzNC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoZmFsc2UpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwidGVsZXN0cmF0b3ItZWxlbWVudCAjdGVsZXN0cmF0b3ItY2FudmFzIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NyYy9jb21wb25lbnRzL3RlbGVzdHJhdG9yL3RlbGVzdHJhdG9yLWVsZW1lbnQuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIDEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MTU5ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IDM1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCAxIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === \"undefined\") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target) {\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target) {\n                // If passing function in options, then use it for resolve \"head\" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector(\"#foo\").shadowRoot }\n                // }\n                if (typeof target === 'function') {\n                        return target();\n                }\n                if (typeof memo[target] === \"undefined\") {\n\t\t\tvar styleTarget = getTarget.call(this, target);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(37);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== \"undefined\" && DEBUG) {\n\t\tif (typeof document !== \"object\") throw new Error(\"The style-loader cannot be used in a non-browser environment\");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === \"object\" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== \"boolean\") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = \"head\";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = \"bottom\";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === \"top\") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === \"bottom\") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === \"object\" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertInto + \" \" + options.insertAt.before);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement(\"style\");\n\n\toptions.attrs.type = \"text/css\";\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement(\"link\");\n\n\toptions.attrs.type = \"text/css\";\n\toptions.attrs.rel = \"stylesheet\";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = options.transform(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don't add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === \"function\" &&\n\t\ttypeof URL.createObjectURL === \"function\" &&\n\t\ttypeof URL.revokeObjectURL === \"function\" &&\n\t\ttypeof Blob === \"function\" &&\n\t\ttypeof btoa === \"function\"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join('\\n');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? \"\" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute(\"media\", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn't defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += \"\\n/*# sourceMappingURL=data:application/json;base64,\" + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + \" */\";\n\t}\n\n\tvar blob = new Blob([css], { type: \"text/css\" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

eval("\n/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function \"fixes\" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\n\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== \"undefined\" && window.location;\n\n  if (!location) {\n    throw new Error(\"fixUrls requires window.location\");\n  }\n\n\t// blank or null?\n\tif (!css || typeof css !== \"string\") {\n\t  return css;\n  }\n\n  var baseUrl = location.protocol + \"//\" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, \"/\");\n\n\t// convert each url(...)\n\t/*\n\tThis regular expression is just a way to recursively match brackets within\n\ta string.\n\n\t /url\\s*\\(  = Match on the word \"url\" with any whitespace after it and then a parens\n\t   (  = Start a capturing group\n\t     (?:  = Start a non-capturing group\n\t         [^)(]  = Match anything that isn't a parentheses\n\t         |  = OR\n\t         \\(  = Match a start parentheses\n\t             (?:  = Start another non-capturing groups\n\t                 [^)(]+  = Match anything that isn't a parentheses\n\t                 |  = OR\n\t                 \\(  = Match a start parentheses\n\t                     [^)(]*  = Match anything that isn't a parentheses\n\t                 \\)  = Match a end parentheses\n\t             )  = End Group\n              *\\) = Match anything and then a close parens\n          )  = Close non-capturing group\n          *  = Match anything\n       )  = Close capturing group\n\t \\)  = Match a close parens\n\n\t /gi  = Get all matches, not the first.  Be case insensitive.\n\t */\n\tvar fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function(fullMatch, origUrl) {\n\t\t// strip quotes (if they exist)\n\t\tvar unquotedOrigUrl = origUrl\n\t\t\t.trim()\n\t\t\t.replace(/^\"(.*)\"$/, function(o, $1){ return $1; })\n\t\t\t.replace(/^'(.*)'$/, function(o, $1){ return $1; });\n\n\t\t// already a full url? no change\n\t\tif (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/)/i.test(unquotedOrigUrl)) {\n\t\t  return fullMatch;\n\t\t}\n\n\t\t// convert the url to a full url\n\t\tvar newUrl;\n\n\t\tif (unquotedOrigUrl.indexOf(\"//\") === 0) {\n\t\t  \t//TODO: should we add protocol?\n\t\t\tnewUrl = unquotedOrigUrl;\n\t\t} else if (unquotedOrigUrl.indexOf(\"/\") === 0) {\n\t\t\t// path should be relative to the base url\n\t\t\tnewUrl = baseUrl + unquotedOrigUrl; // already starts with '/'\n\t\t} else {\n\t\t\t// path should be relative to current directory\n\t\t\tnewUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, \"\"); // Strip leading './'\n\t\t}\n\n\t\t// send back the fixed url(...)\n\t\treturn \"url(\" + JSON.stringify(newUrl) + \")\";\n\t});\n\n\t// send back the fixed css\n\treturn fixedCss;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzPzk4OTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxXQUFXLEVBQUU7QUFDckQsd0NBQXdDLFdBQVcsRUFBRTs7QUFFckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxzQ0FBc0M7QUFDdEMsR0FBRztBQUNIO0FBQ0EsOERBQThEO0FBQzlEOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXG4vLyBtb2R1bGUgaWQgPSAzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAgMSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar work = __webpack_require__(39);\n\nfunction createWorker() {\n    var blobURL = URL.createObjectURL(new Blob(['(', work.toString(), ')()'], { type: 'application/javascript' }));\n    var worker = new Worker(blobURL);\n    URL.revokeObjectURL(blobURL);\n    return worker;\n}\n\nvar Clock = function (_HTMLElement) {\n    _inherits(Clock, _HTMLElement);\n\n    function Clock() {\n        _classCallCheck(this, Clock);\n\n        var _this = _possibleConstructorReturn(this, (Clock.__proto__ || Object.getPrototypeOf(Clock)).call(this));\n\n        var self = _this;\n        _this._worker = createWorker();\n        _this._time = 0 + _this.initial;\n        _this._memo = _this._time;\n        _this._worker.onmessage = function (e) {\n\n            if (!self.running) {\n                return;\n            }\n\n            if (self.limit >= 0 && e.data - self.interval > self.limit) {\n                self.pause();\n                self._time = self.limit;\n                self.update();\n                var event = new Event('limit-reached');\n                self.dispatchEvent(event);\n            } else {\n                self._time = e.data;\n                self.update();\n            }\n        };\n        _this.running = false;\n        return _this;\n    }\n\n    _createClass(Clock, [{\n        key: 'connectedCallback',\n        value: function connectedCallback() {\n            this.innerHTML = '<div class=\"clock\"></div>';\n            this.update();\n        }\n    }, {\n        key: 'disconnectedCallback',\n        value: function disconnectedCallback() {\n            this.running = false;\n        }\n    }, {\n        key: 'pad',\n        value: function pad(num) {\n            return ('0' + num).slice(-2);\n        }\n    }, {\n        key: 'limitReached',\n        value: function limitReached() {\n            return this.limit >= 0 && this._time >= this.limit;\n        }\n    }, {\n        key: 'formatTime',\n        value: function formatTime() {\n            return this._time;\n        }\n    }, {\n        key: 'update',\n        value: function update() {\n            this.querySelector('.clock').innerHTML = this.formatTime();\n        }\n    }, {\n        key: 'pause',\n        value: function pause() {\n            this._worker.postMessage({ cmd: 'pause' });\n            this.running = false;\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this._worker.postMessage({ cmd: 'stop' });\n            this._time = this.initial;\n            this.running = false;\n            this.update();\n        }\n    }, {\n        key: 'start',\n        value: function start() {\n            this.initial = this._time || this.initial;\n            this._memo = this._time || this.initial;\n            this._time = 0;\n            this.running = true;\n            this._worker.postMessage({ cmd: 'start', interval: this.interval, offset: this.__timecode__ || 0, initial: this._memo });\n        }\n    }, {\n        key: 'attributeChangedCallback',\n        value: function attributeChangedCallback() {}\n    }, {\n        key: 'expose',\n        value: function expose() {\n            return {\n                Run: 'run',\n                Reset: 'reset',\n                Initial: 'initial',\n                Limit: 'limit',\n                Show: 'show'\n            };\n        }\n    }, {\n        key: 'type',\n        get: function get() {\n            return this.getAttribute(\"type\") || 'system';\n        },\n        set: function set(value) {\n            this.setAttribute('type', value);\n        }\n    }, {\n        key: 'format',\n        get: function get() {\n            return this.getAttribute(\"format\") || 'hh:mm:ss';\n        },\n        set: function set(value) {\n            this.setAttribute('format', value);\n        }\n    }, {\n        key: 'countFrom',\n        get: function get() {\n            return this.getAttribute(\"count-from\") || 60000;\n        },\n        set: function set(value) {\n            this.setAttribute('count-from', value);\n        }\n    }, {\n        key: 'interval',\n        get: function get() {\n            return parseInt(this.getAttribute(\"interval\")) || 100;\n        },\n        set: function set(value) {\n            this.setAttribute('interval', value);\n        }\n    }, {\n        key: 'run',\n        get: function get() {\n            return this.running;\n        },\n        set: function set(value) {\n            if (this.running !== value) {\n                this.running = value;\n                this.running ? this.start() : this.pause();\n            }\n        }\n    }, {\n        key: 'reset',\n        get: function get() {\n            return false;\n        },\n        set: function set(value) {\n            if (value) {\n                var wasRunning = this.running;\n                this.stop();\n                if (wasRunning) {\n                    this.start();\n                }\n            }\n        }\n    }, {\n        key: 'initial',\n        get: function get() {\n            return parseInt(this.getAttribute(\"initial\")) || 0;\n        },\n        set: function set(value) {\n            if (this.initial !== value) {\n                this.setAttribute('initial', value);\n                this._time = value;\n                this.update();\n            }\n        }\n    }, {\n        key: 'limit',\n        get: function get() {\n            var limit = parseInt(this.getAttribute(\"limit\"));\n            return Number.isInteger(limit) ? limit : -1;\n        },\n        set: function set(value) {\n            this.setAttribute('limit', value);\n        }\n    }, {\n        key: 'show',\n        get: function get() {\n            var vis = this.getAttribute(\"show\");\n            if (vis !== null) {\n                return vis === 'true';\n            } else {\n                return true;\n            }\n        },\n        set: function set(value) {\n            if (value) {\n                this.style.visibility = 'visible';\n            } else {\n                this.style.visibility = 'hidden';\n            }\n            this.setAttribute('show', value);\n        }\n    }], [{\n        key: 'observedAttributes',\n        get: function get() {\n            return [];\n        }\n    }]);\n\n    return Clock;\n}(HTMLElement);\n\nexports.default = Clock;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction worker() {\n    var now = Date.now || function () {\n        return new Date().getTime();\n    };\n    var delay;\n    var startedAt;\n    var delayed;\n    var timeoutId = null;\n    var offset;\n\n    self.onmessage = function (event) {\n\n        var data = event.data;\n\n        switch (data.cmd) {\n\n            case 'stop':\n\n                clearTimeout(timeoutId);\n                timeoutId = null;\n                break;\n            case 'pause':\n                clearTimeout(timeoutId);\n                timeoutId = null;\n                break;\n            case 'resume':\n                break;\n            case 'reset':\n                break;\n            case 'start':\n\n                delay = data.interval;\n                offset = data.offset || 0;\n                var isLive = data.offset > 100000000;\n                var initial = data.initial || 0;\n\n                startedAt = isLive ? new Date(offset - initial) : now() - initial;\n                delayed = 0;\n                timeoutId = self.setTimeout(tick, delay);\n\n                break;\n        }\n    };\n\n    function tick() {\n        delayed += delay;\n        var tickedAt = now();\n        var elapsed = tickedAt - startedAt;\n        var drifted = elapsed - delayed;\n        self.postMessage(elapsed);\n        timeoutId = self.setTimeout(tick, delay - drifted);\n    }\n}\n\nmodule.exports = worker;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jbG9ja3MvY2xvY2std29ya2VyLmpzP2I3MTQiXSwibmFtZXMiOlsid29ya2VyIiwibm93IiwiRGF0ZSIsImdldFRpbWUiLCJkZWxheSIsInN0YXJ0ZWRBdCIsImRlbGF5ZWQiLCJ0aW1lb3V0SWQiLCJvZmZzZXQiLCJzZWxmIiwib25tZXNzYWdlIiwiZXZlbnQiLCJkYXRhIiwiY21kIiwiY2xlYXJUaW1lb3V0IiwiaW50ZXJ2YWwiLCJpc0xpdmUiLCJpbml0aWFsIiwic2V0VGltZW91dCIsInRpY2siLCJ0aWNrZWRBdCIsImVsYXBzZWQiLCJkcmlmdGVkIiwicG9zdE1lc3NhZ2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUNBLFNBQVNBLE1BQVQsR0FBaUI7QUFDYixRQUFJQyxNQUFNQyxLQUFLRCxHQUFMLElBQVksWUFBWTtBQUFFLGVBQVEsSUFBSUMsSUFBSixFQUFELENBQWFDLE9BQWIsRUFBUDtBQUFnQyxLQUFwRTtBQUNBLFFBQUlDLEtBQUo7QUFDQSxRQUFJQyxTQUFKO0FBQ0EsUUFBSUMsT0FBSjtBQUNBLFFBQUlDLFlBQVksSUFBaEI7QUFDQSxRQUFJQyxNQUFKOztBQUVBQyxTQUFLQyxTQUFMLEdBQWlCLFVBQVVDLEtBQVYsRUFBaUI7O0FBRTlCLFlBQUlDLE9BQU9ELE1BQU1DLElBQWpCOztBQUVBLGdCQUFRQSxLQUFLQyxHQUFiOztBQUVJLGlCQUFLLE1BQUw7O0FBRUlDLDZCQUFhUCxTQUFiO0FBQ0FBLDRCQUFZLElBQVo7QUFDQTtBQUNKLGlCQUFLLE9BQUw7QUFDSU8sNkJBQWFQLFNBQWI7QUFDQUEsNEJBQVksSUFBWjtBQUNBO0FBQ0osaUJBQUssUUFBTDtBQUNJO0FBQ0osaUJBQUssT0FBTDtBQUNJO0FBQ0osaUJBQUssT0FBTDs7QUFFQUgsd0JBQVFRLEtBQUtHLFFBQWI7QUFDQVAseUJBQVNJLEtBQUtKLE1BQUwsSUFBZSxDQUF4QjtBQUNBLG9CQUFJUSxTQUFTSixLQUFLSixNQUFMLEdBQWMsU0FBM0I7QUFDQSxvQkFBSVMsVUFBVUwsS0FBS0ssT0FBTCxJQUFnQixDQUE5Qjs7QUFFQVosNEJBQVlXLFNBQVEsSUFBSWQsSUFBSixDQUFTTSxTQUFTUyxPQUFsQixDQUFSLEdBQXFDaEIsUUFBUWdCLE9BQXpEO0FBQ0FYLDBCQUFVLENBQVY7QUFDQUMsNEJBQVlFLEtBQUtTLFVBQUwsQ0FBZ0JDLElBQWhCLEVBQXNCZixLQUF0QixDQUFaOztBQUVBO0FBMUJKO0FBNEJILEtBaENEOztBQWtDQSxhQUFTZSxJQUFULEdBQWdCO0FBQ1piLG1CQUFXRixLQUFYO0FBQ0EsWUFBSWdCLFdBQVduQixLQUFmO0FBQ0EsWUFBSW9CLFVBQVVELFdBQVdmLFNBQXpCO0FBQ0EsWUFBSWlCLFVBQVVELFVBQVVmLE9BQXhCO0FBQ0FHLGFBQUtjLFdBQUwsQ0FBaUJGLE9BQWpCO0FBQ0FkLG9CQUFZRSxLQUFLUyxVQUFMLENBQWdCQyxJQUFoQixFQUFzQmYsUUFBUWtCLE9BQTlCLENBQVo7QUFDSDtBQUVKOztBQUdERSxPQUFPQyxPQUFQLEdBQWlCekIsTUFBakIiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmZ1bmN0aW9uIHdvcmtlcigpe1xuICAgIHZhciBub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbiAoKSB7IHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpOyB9O1xuICAgIHZhciBkZWxheTtcbiAgICB2YXIgc3RhcnRlZEF0O1xuICAgIHZhciBkZWxheWVkO1xuICAgIHZhciB0aW1lb3V0SWQgPSBudWxsO1xuICAgIHZhciBvZmZzZXQ7XG5cbiAgICBzZWxmLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuXG4gICAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEuY21kKXtcblxuICAgICAgICAgICAgY2FzZSAnc3RvcCc6XG5cbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dElkKTtcbiAgICAgICAgICAgICAgICB0aW1lb3V0SWQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncGF1c2UnOlxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZXN1bWUnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmVzZXQnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc3RhcnQnOlxuXG4gICAgICAgICAgICBkZWxheSA9IGRhdGEuaW50ZXJ2YWw7XG4gICAgICAgICAgICBvZmZzZXQgPSBkYXRhLm9mZnNldCB8fCAwO1xuICAgICAgICAgICAgdmFyIGlzTGl2ZSA9IGRhdGEub2Zmc2V0ID4gMTAwMDAwMDAwO1xuICAgICAgICAgICAgdmFyIGluaXRpYWwgPSBkYXRhLmluaXRpYWwgfHwgMDtcblxuICAgICAgICAgICAgc3RhcnRlZEF0ID0gaXNMaXZlPyBuZXcgRGF0ZShvZmZzZXQgLSBpbml0aWFsKSA6IG5vdygpIC0gaW5pdGlhbDtcbiAgICAgICAgICAgIGRlbGF5ZWQgPSAwO1xuICAgICAgICAgICAgdGltZW91dElkID0gc2VsZi5zZXRUaW1lb3V0KHRpY2ssIGRlbGF5KTtcblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgZGVsYXllZCArPSBkZWxheTtcbiAgICAgICAgdmFyIHRpY2tlZEF0ID0gbm93KCk7XG4gICAgICAgIHZhciBlbGFwc2VkID0gdGlja2VkQXQgLSBzdGFydGVkQXQ7XG4gICAgICAgIHZhciBkcmlmdGVkID0gZWxhcHNlZCAtIGRlbGF5ZWQ7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2UoZWxhcHNlZCk7XG4gICAgICAgIHRpbWVvdXRJZCA9IHNlbGYuc2V0VGltZW91dCh0aWNrLCBkZWxheSAtIGRyaWZ0ZWQpO1xuICAgIH1cblxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gd29ya2VyO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL2Nsb2Nrcy9jbG9jay13b3JrZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _basicClock = __webpack_require__(5);\n\nvar _basicClock2 = _interopRequireDefault(_basicClock);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Countdown = function (_BasicClock) {\n    _inherits(Countdown, _BasicClock);\n\n    function Countdown() {\n        _classCallCheck(this, Countdown);\n\n        return _possibleConstructorReturn(this, (Countdown.__proto__ || Object.getPrototypeOf(Countdown)).call(this));\n    }\n\n    _createClass(Countdown, [{\n        key: \"connectedCallback\",\n        value: function connectedCallback() {\n            _get(Countdown.prototype.__proto__ || Object.getPrototypeOf(Countdown.prototype), \"connectedCallback\", this).call(this);\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            return Date.now();\n        }\n    }, {\n        key: \"onInterval\",\n        value: function onInterval() {\n            this.set(Date.now());\n        }\n    }, {\n        key: \"_pad\",\n        value: function _pad(num) {\n            return ('0' + num).slice(-2);\n        }\n    }, {\n        key: \"format\",\n        value: function format(timestamp) {\n            var seconds = parseInt(timestamp / 1000 % 60),\n                minutes = parseInt(timestamp / (1000 * 60) % 60),\n                hours = parseInt(timestamp / (1000 * 60 * 60) % 24),\n                milliseconds = parseInt(timestamp % 1000 / 100);\n\n            return this._pad(hours) + \":\" + this._pad(minutes) + \":\" + this._pad(seconds) + '.' + milliseconds;\n        }\n    }]);\n\n    return Countdown;\n}(_basicClock2.default);\n\nexports.default = Countdown;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jbG9ja3Mvc3lzdGVtLWNsb2NrLmpzP2Y1YmYiXSwibmFtZXMiOlsiQ291bnRkb3duIiwiRGF0ZSIsIm5vdyIsInNldCIsIm51bSIsInNsaWNlIiwidGltZXN0YW1wIiwic2Vjb25kcyIsInBhcnNlSW50IiwibWludXRlcyIsImhvdXJzIiwibWlsbGlzZWNvbmRzIiwiX3BhZCIsIkJhc2ljQ2xvY2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0lBRXFCQSxTOzs7QUFDakIseUJBQWM7QUFBQTs7QUFBQTtBQUViOzs7OzRDQUVtQjtBQUNoQjtBQUNIOzs7K0JBR0s7QUFDRixtQkFBT0MsS0FBS0MsR0FBTCxFQUFQO0FBQ0g7OztxQ0FDVztBQUNSLGlCQUFLQyxHQUFMLENBQVNGLEtBQUtDLEdBQUwsRUFBVDtBQUNIOzs7NkJBRUlFLEcsRUFBSztBQUNOLG1CQUFPLENBQUMsTUFBTUEsR0FBUCxFQUFZQyxLQUFaLENBQWtCLENBQUMsQ0FBbkIsQ0FBUDtBQUNIOzs7K0JBRU1DLFMsRUFBVTtBQUNiLGdCQUFJQyxVQUFrQkMsU0FBVUYsWUFBWSxJQUFiLEdBQXFCLEVBQTlCLENBQXRCO0FBQUEsZ0JBQ0lHLFVBQWtCRCxTQUFVRixhQUFhLE9BQU8sRUFBcEIsQ0FBRCxHQUE0QixFQUFyQyxDQUR0QjtBQUFBLGdCQUVJSSxRQUFrQkYsU0FBVUYsYUFBYSxPQUFPLEVBQVAsR0FBWSxFQUF6QixDQUFELEdBQWlDLEVBQTFDLENBRnRCO0FBQUEsZ0JBR0lLLGVBQWtCSCxTQUFVRixZQUFZLElBQWIsR0FBcUIsR0FBOUIsQ0FIdEI7O0FBS0EsbUJBQU8sS0FBS00sSUFBTCxDQUFVRixLQUFWLElBQW1CLEdBQW5CLEdBQXlCLEtBQUtFLElBQUwsQ0FBVUgsT0FBVixDQUF6QixHQUE4QyxHQUE5QyxHQUFvRCxLQUFLRyxJQUFMLENBQVVMLE9BQVYsQ0FBcEQsR0FBeUUsR0FBekUsR0FBK0VJLFlBQXRGO0FBQ0g7Ozs7RUE1QmtDRSxvQjs7a0JBQWxCYixTIiwiZmlsZSI6IjQwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2ljQ2xvY2sgZnJvbSBcIi4vYmFzaWMtY2xvY2tcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ291bnRkb3duIGV4dGVuZHMgQmFzaWNDbG9jayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG5cbiAgICBpbml0KCl7XG4gICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgIH1cbiAgICBvbkludGVydmFsKCl7XG4gICAgICAgIHRoaXMuc2V0KERhdGUubm93KCkpO1xuICAgIH1cblxuICAgIF9wYWQobnVtKSB7XG4gICAgICAgIHJldHVybiAoJzAnICsgbnVtKS5zbGljZSgtMik7XG4gICAgfVxuXG4gICAgZm9ybWF0KHRpbWVzdGFtcCl7XG4gICAgICAgIHZhciBzZWNvbmRzICAgICAgICAgPSBwYXJzZUludCgodGltZXN0YW1wIC8gMTAwMCkgJSA2MCksXG4gICAgICAgICAgICBtaW51dGVzICAgICAgICAgPSBwYXJzZUludCgodGltZXN0YW1wIC8gKDEwMDAgKiA2MCkpICUgNjApLFxuICAgICAgICAgICAgaG91cnMgICAgICAgICAgID0gcGFyc2VJbnQoKHRpbWVzdGFtcCAvICgxMDAwICogNjAgKiA2MCkpICUgMjQpLFxuICAgICAgICAgICAgbWlsbGlzZWNvbmRzICAgID0gcGFyc2VJbnQoKHRpbWVzdGFtcCAlIDEwMDApIC8gMTAwKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fcGFkKGhvdXJzKSArIFwiOlwiICsgdGhpcy5fcGFkKG1pbnV0ZXMpICsgXCI6XCIgKyB0aGlzLl9wYWQoc2Vjb25kcykgKyAnLicgKyBtaWxsaXNlY29uZHM7XG4gICAgfVxuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvY2xvY2tzL3N5c3RlbS1jbG9jay5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction work() {\n\n    var now = Date.now || function () {\n        return new Date().getTime();\n    };\n    var interval, delayed, startedAt;\n    var timeoutId = null;\n\n    self.onmessage = function (event) {\n        var data = event.data;\n\n        switch (data.cmd) {\n\n            case 'stop':\n                clearTimeout(timeoutId);\n                timeoutId = null;\n                break;\n            case 'start':\n                if (!timeoutId) {\n                    interval = data.interval || 30;\n                    startedAt = now();\n                    delayed = 0;\n                    timeoutId = self.setTimeout(tick, interval);\n                }\n                break;\n        }\n    };\n\n    function tick() {\n        delayed += interval;\n        var tickedAt = now();\n        var elapsed = tickedAt - startedAt;\n        var drifted = elapsed - delayed;\n        self.postMessage(interval);\n        timeoutId = self.setTimeout(tick, interval - drifted);\n    }\n}\n\nfunction createWorker() {\n    var blobURL = URL.createObjectURL(new Blob(['(', work.toString(), ')()'], { type: 'application/javascript' }));\n    var worker = new Worker(blobURL);\n    URL.revokeObjectURL(blobURL);\n    return worker;\n}\n\nvar Interval = function () {\n    function Interval(cb, options) {\n        _classCallCheck(this, Interval);\n\n        this._options = options || {};\n        this._worker = createWorker();\n        this._worker.onmessage = function (e) {\n            cb(e.data);\n        };\n    }\n\n    _createClass(Interval, [{\n        key: 'start',\n        value: function start() {\n            this._worker.postMessage({ cmd: 'start', interval: this._options.interval });\n        }\n    }, {\n        key: 'stop',\n        value: function stop() {\n            this._worker.postMessage({ cmd: 'stop', interval: this._options.interval });\n        }\n    }]);\n\n    return Interval;\n}();\n\nmodule.exports = Interval;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jbG9ja3MvaW50ZXJ2YWwtd29ya2VyLmpzPzgwMDUiXSwibmFtZXMiOlsid29yayIsIm5vdyIsIkRhdGUiLCJnZXRUaW1lIiwiaW50ZXJ2YWwiLCJkZWxheWVkIiwic3RhcnRlZEF0IiwidGltZW91dElkIiwic2VsZiIsIm9ubWVzc2FnZSIsImV2ZW50IiwiZGF0YSIsImNtZCIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJ0aWNrIiwidGlja2VkQXQiLCJlbGFwc2VkIiwiZHJpZnRlZCIsInBvc3RNZXNzYWdlIiwiY3JlYXRlV29ya2VyIiwiYmxvYlVSTCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsIkJsb2IiLCJ0b1N0cmluZyIsInR5cGUiLCJ3b3JrZXIiLCJXb3JrZXIiLCJyZXZva2VPYmplY3RVUkwiLCJJbnRlcnZhbCIsImNiIiwib3B0aW9ucyIsIl9vcHRpb25zIiwiX3dvcmtlciIsImUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxTQUFTQSxJQUFULEdBQWdCOztBQUVaLFFBQUlDLE1BQU1DLEtBQUtELEdBQUwsSUFBWSxZQUFZO0FBQzFCLGVBQVEsSUFBSUMsSUFBSixFQUFELENBQWFDLE9BQWIsRUFBUDtBQUNILEtBRkw7QUFHQSxRQUFJQyxRQUFKLEVBQWNDLE9BQWQsRUFBdUJDLFNBQXZCO0FBQ0EsUUFBSUMsWUFBWSxJQUFoQjs7QUFFQUMsU0FBS0MsU0FBTCxHQUFpQixVQUFVQyxLQUFWLEVBQWlCO0FBQzlCLFlBQUlDLE9BQU9ELE1BQU1DLElBQWpCOztBQUVBLGdCQUFRQSxLQUFLQyxHQUFiOztBQUVJLGlCQUFLLE1BQUw7QUFDSUMsNkJBQWFOLFNBQWI7QUFDQUEsNEJBQVksSUFBWjtBQUNBO0FBQ0osaUJBQUssT0FBTDtBQUNJLG9CQUFHLENBQUNBLFNBQUosRUFBZTtBQUNYSCwrQkFBV08sS0FBS1AsUUFBTCxJQUFpQixFQUE1QjtBQUNBRSxnQ0FBWUwsS0FBWjtBQUNBSSw4QkFBVSxDQUFWO0FBQ0FFLGdDQUFZQyxLQUFLTSxVQUFMLENBQWdCQyxJQUFoQixFQUFzQlgsUUFBdEIsQ0FBWjtBQUNIO0FBQ0Q7QUFiUjtBQWVILEtBbEJEOztBQW9CQSxhQUFTVyxJQUFULEdBQWdCO0FBQ1pWLG1CQUFXRCxRQUFYO0FBQ0EsWUFBSVksV0FBV2YsS0FBZjtBQUNBLFlBQUlnQixVQUFVRCxXQUFXVixTQUF6QjtBQUNBLFlBQUlZLFVBQVVELFVBQVVaLE9BQXhCO0FBQ0FHLGFBQUtXLFdBQUwsQ0FBaUJmLFFBQWpCO0FBQ0FHLG9CQUFZQyxLQUFLTSxVQUFMLENBQWdCQyxJQUFoQixFQUFzQlgsV0FBV2MsT0FBakMsQ0FBWjtBQUNIO0FBQ0o7O0FBR0QsU0FBU0UsWUFBVCxHQUF1QjtBQUNuQixRQUFJQyxVQUFVQyxJQUFJQyxlQUFKLENBQXFCLElBQUlDLElBQUosQ0FBUyxDQUFFLEdBQUYsRUFBT3hCLEtBQUt5QixRQUFMLEVBQVAsRUFBdUIsS0FBdkIsQ0FBVCxFQUF5QyxFQUFFQyxNQUFNLHdCQUFSLEVBQXpDLENBQXJCLENBQWQ7QUFDQSxRQUFJQyxTQUFTLElBQUlDLE1BQUosQ0FBWVAsT0FBWixDQUFiO0FBQ0FDLFFBQUlPLGVBQUosQ0FBcUJSLE9BQXJCO0FBQ0EsV0FBT00sTUFBUDtBQUNIOztJQUdLRyxRO0FBQ0Ysc0JBQVlDLEVBQVosRUFBZ0JDLE9BQWhCLEVBQXdCO0FBQUE7O0FBQ3BCLGFBQUtDLFFBQUwsR0FBZ0JELFdBQVcsRUFBM0I7QUFDQSxhQUFLRSxPQUFMLEdBQWVkLGNBQWY7QUFDQSxhQUFLYyxPQUFMLENBQWF6QixTQUFiLEdBQXlCLFVBQVMwQixDQUFULEVBQVc7QUFDaENKLGVBQUdJLEVBQUV4QixJQUFMO0FBQ0gsU0FGRDtBQUdIOzs7O2dDQUNNO0FBQ0gsaUJBQUt1QixPQUFMLENBQWFmLFdBQWIsQ0FBeUIsRUFBQ1AsS0FBSyxPQUFOLEVBQWVSLFVBQVcsS0FBSzZCLFFBQUwsQ0FBYzdCLFFBQXhDLEVBQXpCO0FBQ0g7OzsrQkFDSztBQUNGLGlCQUFLOEIsT0FBTCxDQUFhZixXQUFiLENBQXlCLEVBQUNQLEtBQUssTUFBTixFQUFjUixVQUFXLEtBQUs2QixRQUFMLENBQWM3QixRQUF2QyxFQUF6QjtBQUNIOzs7Ozs7QUFNTGdDLE9BQU9DLE9BQVAsR0FBaUJQLFFBQWpCIiwiZmlsZSI6IjQxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gd29yaygpIHtcblxuICAgIHZhciBub3cgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgfTtcbiAgICB2YXIgaW50ZXJ2YWwsIGRlbGF5ZWQsIHN0YXJ0ZWRBdDtcbiAgICB2YXIgdGltZW91dElkID0gbnVsbDtcblxuICAgIHNlbGYub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEuY21kKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ3N0b3AnOlxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgICAgICAgICAgICAgIHRpbWVvdXRJZCA9IG51bGw7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzdGFydCc6XG4gICAgICAgICAgICAgICAgaWYoIXRpbWVvdXRJZCkge1xuICAgICAgICAgICAgICAgICAgICBpbnRlcnZhbCA9IGRhdGEuaW50ZXJ2YWwgfHwgMzA7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0ZWRBdCA9IG5vdygpO1xuICAgICAgICAgICAgICAgICAgICBkZWxheWVkID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGltZW91dElkID0gc2VsZi5zZXRUaW1lb3V0KHRpY2ssIGludGVydmFsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gdGljaygpIHtcbiAgICAgICAgZGVsYXllZCArPSBpbnRlcnZhbDtcbiAgICAgICAgdmFyIHRpY2tlZEF0ID0gbm93KCk7XG4gICAgICAgIHZhciBlbGFwc2VkID0gdGlja2VkQXQgLSBzdGFydGVkQXQ7XG4gICAgICAgIHZhciBkcmlmdGVkID0gZWxhcHNlZCAtIGRlbGF5ZWQ7XG4gICAgICAgIHNlbGYucG9zdE1lc3NhZ2UoaW50ZXJ2YWwpO1xuICAgICAgICB0aW1lb3V0SWQgPSBzZWxmLnNldFRpbWVvdXQodGljaywgaW50ZXJ2YWwgLSBkcmlmdGVkKTtcbiAgICB9XG59XG5cblxuZnVuY3Rpb24gY3JlYXRlV29ya2VyKCl7XG4gICAgdmFyIGJsb2JVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKCBuZXcgQmxvYihbICcoJywgd29yay50b1N0cmluZygpLCcpKCknIF0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnIH0gKSApO1xuICAgIHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKCBibG9iVVJMICk7XG4gICAgVVJMLnJldm9rZU9iamVjdFVSTCggYmxvYlVSTCApO1xuICAgIHJldHVybiB3b3JrZXI7XG59XG5cblxuY2xhc3MgSW50ZXJ2YWwge1xuICAgIGNvbnN0cnVjdG9yKGNiLCBvcHRpb25zKXtcbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IGNyZWF0ZVdvcmtlcigpO1xuICAgICAgICB0aGlzLl93b3JrZXIub25tZXNzYWdlID0gZnVuY3Rpb24oZSl7XG4gICAgICAgICAgICBjYihlLmRhdGEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGFydCgpe1xuICAgICAgICB0aGlzLl93b3JrZXIucG9zdE1lc3NhZ2Uoe2NtZDogJ3N0YXJ0JywgaW50ZXJ2YWwgOiB0aGlzLl9vcHRpb25zLmludGVydmFsfSk7XG4gICAgfVxuICAgIHN0b3AoKXtcbiAgICAgICAgdGhpcy5fd29ya2VyLnBvc3RNZXNzYWdlKHtjbWQ6ICdzdG9wJywgaW50ZXJ2YWwgOiB0aGlzLl9vcHRpb25zLmludGVydmFsfSk7XG4gICAgfVxuXG59XG5cblxuXG5tb2R1bGUuZXhwb3J0cyA9IEludGVydmFsO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb21wb25lbnRzL2Nsb2Nrcy9pbnRlcnZhbC13b3JrZXIuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _basicClock = __webpack_require__(5);\n\nvar _basicClock2 = _interopRequireDefault(_basicClock);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Countdown = function (_BasicClock) {\n    _inherits(Countdown, _BasicClock);\n\n    function Countdown() {\n        _classCallCheck(this, Countdown);\n\n        return _possibleConstructorReturn(this, (Countdown.__proto__ || Object.getPrototypeOf(Countdown)).call(this));\n    }\n\n    _createClass(Countdown, [{\n        key: \"connectedCallback\",\n        value: function connectedCallback() {\n            _get(Countdown.prototype.__proto__ || Object.getPrototypeOf(Countdown.prototype), \"connectedCallback\", this).call(this);\n        }\n    }, {\n        key: \"init\",\n        value: function init() {\n            return 15000;\n        }\n    }, {\n        key: \"onInterval\",\n        value: function onInterval(i) {\n            if (this.get() - i > 0) {\n                this.set(this.get() - i);\n            } else {\n                this.set(0);\n                this.stop();\n            }\n        }\n    }]);\n\n    return Countdown;\n}(_basicClock2.default);\n\nexports.default = Countdown;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jbG9ja3MvY291bnRkb3duLmpzPzllZGYiXSwibmFtZXMiOlsiQ291bnRkb3duIiwiaSIsImdldCIsInNldCIsInN0b3AiLCJCYXNpY0Nsb2NrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQUdxQkEsUzs7O0FBQ2pCLHlCQUFjO0FBQUE7O0FBQUE7QUFHYjs7Ozs0Q0FDbUI7QUFDaEI7QUFDSDs7OytCQUVLO0FBQ0YsbUJBQU8sS0FBUDtBQUNIOzs7bUNBRVVDLEMsRUFBRTtBQUNULGdCQUFHLEtBQUtDLEdBQUwsS0FBYUQsQ0FBYixHQUFpQixDQUFwQixFQUFzQjtBQUNsQixxQkFBS0UsR0FBTCxDQUFTLEtBQUtELEdBQUwsS0FBYUQsQ0FBdEI7QUFDSCxhQUZELE1BRU87QUFDSCxxQkFBS0UsR0FBTCxDQUFTLENBQVQ7QUFDQSxxQkFBS0MsSUFBTDtBQUNIO0FBQ0o7Ozs7RUFwQmtDQyxvQjs7a0JBQWxCTCxTIiwiZmlsZSI6IjQyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJhc2ljQ2xvY2sgZnJvbSBcIi4vYmFzaWMtY2xvY2tcIjtcblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb3VudGRvd24gZXh0ZW5kcyBCYXNpY0Nsb2NrIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgIH1cbiAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBpbml0KCl7XG4gICAgICAgIHJldHVybiAxNTAwMDtcbiAgICB9XG5cbiAgICBvbkludGVydmFsKGkpe1xuICAgICAgICBpZih0aGlzLmdldCgpIC0gaSA+IDApe1xuICAgICAgICAgICAgdGhpcy5zZXQodGhpcy5nZXQoKSAtIGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXQoMCk7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29tcG9uZW50cy9jbG9ja3MvY291bnRkb3duLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _basicClock = __webpack_require__(5);\n\nvar _basicClock2 = _interopRequireDefault(_basicClock);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Stopwatch = function (_BasicClock) {\n    _inherits(Stopwatch, _BasicClock);\n\n    function Stopwatch() {\n        _classCallCheck(this, Stopwatch);\n\n        var _this = _possibleConstructorReturn(this, (Stopwatch.__proto__ || Object.getPrototypeOf(Stopwatch)).call(this));\n\n        _this._limit = '';\n        _this._initial = '';\n        _this._reset = {\n            ui: 'pulse',\n            value: true,\n            label: 'Click to reset'\n        };\n        return _this;\n    }\n\n    _createClass(Stopwatch, [{\n        key: 'connectedCallback',\n        value: function connectedCallback() {\n            _get(Stopwatch.prototype.__proto__ || Object.getPrototypeOf(Stopwatch.prototype), 'connectedCallback', this).call(this);\n        }\n    }, {\n        key: '_pad',\n        value: function _pad(num) {\n            return ('0' + num).slice(-2);\n        }\n    }, {\n        key: '_update',\n        value: function _update() {\n            _get(Stopwatch.prototype.__proto__ || Object.getPrototypeOf(Stopwatch.prototype), '_update', this).call(this);\n            if (this._limit !== '' && this._limit > 0 && this._time >= this._limit * 1000) {\n                this.run = false;\n                this.dispatchEvent(new Event(\"limit\"));\n            }\n        }\n    }, {\n        key: 'format',\n        value: function format(timecode) {\n\n            var seconds = parseInt(timecode / 1000 % 60),\n                minutes = parseInt(timecode / (1000 * 60));\n\n            return this._pad(minutes) + \":\" + this._pad(seconds);\n        }\n    }, {\n        key: 'expose',\n        value: function expose() {\n            var exposed = _get(Stopwatch.prototype.__proto__ || Object.getPrototypeOf(Stopwatch.prototype), 'expose', this).call(this);\n            exposed['fromTime'] = \"initial\";\n            exposed['toTime'] = \"limit\";\n            exposed.Reset = 'reset';\n            return exposed;\n        }\n    }, {\n        key: 'limit',\n        get: function get() {\n            return this._limit;\n        },\n        set: function set(value) {\n            this._limit = value;\n        }\n    }, {\n        key: 'initial',\n        get: function get() {\n            return this._initial;\n        },\n        set: function set(value) {\n            if (value !== undefined) {\n                this._initial = parseInt(value) || 0;\n                // this._time = this._initial;\n                // this._update();\n            }\n        }\n    }, {\n        key: 'reset',\n        get: function get() {\n            return this._reset;\n        },\n        set: function set(value) {\n            this._time = this._initial * 1000 || 0;\n            this._update();\n        }\n    }]);\n\n    return Stopwatch;\n}(_basicClock2.default);\n\nexports.default = Stopwatch;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29tcG9uZW50cy9jbG9ja3Mvc3RvcHdhdGNoLmpzPzhlZjMiXSwibmFtZXMiOlsiU3RvcHdhdGNoIiwiX2xpbWl0IiwiX2luaXRpYWwiLCJfcmVzZXQiLCJ1aSIsInZhbHVlIiwibGFiZWwiLCJudW0iLCJzbGljZSIsIl90aW1lIiwicnVuIiwiZGlzcGF0Y2hFdmVudCIsIkV2ZW50IiwidGltZWNvZGUiLCJzZWNvbmRzIiwicGFyc2VJbnQiLCJtaW51dGVzIiwiX3BhZCIsImV4cG9zZWQiLCJSZXNldCIsInVuZGVmaW5lZCIsIl91cGRhdGUiLCJCYXNpY0Nsb2NrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQUVxQkEsUzs7O0FBQ2pCLHlCQUFjO0FBQUE7O0FBQUE7O0FBRVYsY0FBS0MsTUFBTCxHQUFjLEVBQWQ7QUFDQSxjQUFLQyxRQUFMLEdBQWdCLEVBQWhCO0FBQ0EsY0FBS0MsTUFBTCxHQUFjO0FBQ1ZDLGdCQUFVLE9BREE7QUFFVkMsbUJBQVUsSUFGQTtBQUdWQyxtQkFBVTtBQUhBLFNBQWQ7QUFKVTtBQVNiOzs7OzRDQUVtQjtBQUNoQjtBQUNIOzs7NkJBRUlDLEcsRUFBSztBQUNOLG1CQUFPLENBQUMsTUFBTUEsR0FBUCxFQUFZQyxLQUFaLENBQWtCLENBQUMsQ0FBbkIsQ0FBUDtBQUNIOzs7a0NBRVE7QUFDTDtBQUNBLGdCQUFHLEtBQUtQLE1BQUwsS0FBZ0IsRUFBaEIsSUFBc0IsS0FBS0EsTUFBTCxHQUFjLENBQXBDLElBQXlDLEtBQUtRLEtBQUwsSUFBYyxLQUFLUixNQUFMLEdBQWMsSUFBeEUsRUFBNkU7QUFDekUscUJBQUtTLEdBQUwsR0FBVyxLQUFYO0FBQ0EscUJBQUtDLGFBQUwsQ0FBbUIsSUFBSUMsS0FBSixDQUFVLE9BQVYsQ0FBbkI7QUFDSDtBQUNKOzs7K0JBRU1DLFEsRUFBUzs7QUFFWixnQkFBSUMsVUFBa0JDLFNBQVVGLFdBQVcsSUFBWixHQUFvQixFQUE3QixDQUF0QjtBQUFBLGdCQUNJRyxVQUFrQkQsU0FBVUYsWUFBWSxPQUFPLEVBQW5CLENBQVYsQ0FEdEI7O0FBR0EsbUJBQU8sS0FBS0ksSUFBTCxDQUFVRCxPQUFWLElBQXFCLEdBQXJCLEdBQTJCLEtBQUtDLElBQUwsQ0FBVUgsT0FBVixDQUFsQztBQUNIOzs7aUNBK0JPO0FBQ0osZ0JBQUlJLHNIQUFKO0FBQ0FBLG9CQUFRLFVBQVIsSUFBc0IsU0FBdEI7QUFDQUEsb0JBQVEsUUFBUixJQUFvQixPQUFwQjtBQUNBQSxvQkFBUUMsS0FBUixHQUFnQixPQUFoQjtBQUNBLG1CQUFPRCxPQUFQO0FBQ0g7Ozs0QkFsQ1U7QUFDUCxtQkFBTyxLQUFLakIsTUFBWjtBQUNILFM7MEJBRVNJLEssRUFBTTtBQUNaLGlCQUFLSixNQUFMLEdBQWNJLEtBQWQ7QUFDSDs7OzRCQUNZO0FBQ1QsbUJBQU8sS0FBS0gsUUFBWjtBQUNILFM7MEJBRVdHLEssRUFBTTtBQUNkLGdCQUFHQSxVQUFVZSxTQUFiLEVBQXVCO0FBQ25CLHFCQUFLbEIsUUFBTCxHQUFnQmEsU0FBU1YsS0FBVCxLQUFrQixDQUFsQztBQUNBO0FBQ0E7QUFDSDtBQUNKOzs7NEJBQ1U7QUFDUCxtQkFBTyxLQUFLRixNQUFaO0FBQ0gsUzswQkFDU0UsSyxFQUFNO0FBQ1osaUJBQUtJLEtBQUwsR0FBYSxLQUFLUCxRQUFMLEdBQWdCLElBQWhCLElBQXdCLENBQXJDO0FBQ0EsaUJBQUttQixPQUFMO0FBQ0g7Ozs7RUE3RGtDQyxvQjs7a0JBQWxCdEIsUyIsImZpbGUiOiI0My5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCYXNpY0Nsb2NrIGZyb20gXCIuL2Jhc2ljLWNsb2NrXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3B3YXRjaCBleHRlbmRzIEJhc2ljQ2xvY2sge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9saW1pdCA9ICcnO1xuICAgICAgICB0aGlzLl9pbml0aWFsID0gJyc7XG4gICAgICAgIHRoaXMuX3Jlc2V0ID0ge1xuICAgICAgICAgICAgdWkgICAgICA6ICdwdWxzZScsXG4gICAgICAgICAgICB2YWx1ZSAgIDogdHJ1ZSxcbiAgICAgICAgICAgIGxhYmVsICAgOiAnQ2xpY2sgdG8gcmVzZXQnXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHN1cGVyLmNvbm5lY3RlZENhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgX3BhZChudW0pIHtcbiAgICAgICAgcmV0dXJuICgnMCcgKyBudW0pLnNsaWNlKC0yKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlKCl7XG4gICAgICAgIHN1cGVyLl91cGRhdGUoKTtcbiAgICAgICAgaWYodGhpcy5fbGltaXQgIT09ICcnICYmIHRoaXMuX2xpbWl0ID4gMCAmJiB0aGlzLl90aW1lID49IHRoaXMuX2xpbWl0ICogMTAwMCl7XG4gICAgICAgICAgICB0aGlzLnJ1biA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChcImxpbWl0XCIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvcm1hdCh0aW1lY29kZSl7XG5cbiAgICAgICAgdmFyIHNlY29uZHMgICAgICAgICA9IHBhcnNlSW50KCh0aW1lY29kZSAvIDEwMDApICUgNjApLFxuICAgICAgICAgICAgbWludXRlcyAgICAgICAgID0gcGFyc2VJbnQoKHRpbWVjb2RlIC8gKDEwMDAgKiA2MCkpKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fcGFkKG1pbnV0ZXMpICsgXCI6XCIgKyB0aGlzLl9wYWQoc2Vjb25kcyk7XG4gICAgfVxuXG5cbiAgICBnZXQgbGltaXQoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpbWl0O1xuICAgIH1cblxuICAgIHNldCBsaW1pdCh2YWx1ZSl7XG4gICAgICAgIHRoaXMuX2xpbWl0ID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBpbml0aWFsKCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbml0aWFsO1xuICAgIH1cblxuICAgIHNldCBpbml0aWFsKHZhbHVlKXtcbiAgICAgICAgaWYodmFsdWUgIT09IHVuZGVmaW5lZCl7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsID0gcGFyc2VJbnQodmFsdWUpfHwgMDtcbiAgICAgICAgICAgIC8vIHRoaXMuX3RpbWUgPSB0aGlzLl9pbml0aWFsO1xuICAgICAgICAgICAgLy8gdGhpcy5fdXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHJlc2V0KCl7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNldDtcbiAgICB9XG4gICAgc2V0IHJlc2V0KHZhbHVlKXtcbiAgICAgICAgdGhpcy5fdGltZSA9IHRoaXMuX2luaXRpYWwgKiAxMDAwIHx8IDA7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cblxuXG5cbiAgICBleHBvc2UoKXtcbiAgICAgICAgdmFyIGV4cG9zZWQgPSBzdXBlci5leHBvc2UoKTtcbiAgICAgICAgZXhwb3NlZFsnZnJvbVRpbWUnXSA9IFwiaW5pdGlhbFwiO1xuICAgICAgICBleHBvc2VkWyd0b1RpbWUnXSA9IFwibGltaXRcIjtcbiAgICAgICAgZXhwb3NlZC5SZXNldCA9ICdyZXNldCc7XG4gICAgICAgIHJldHVybiBleHBvc2VkO1xuICAgIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvbXBvbmVudHMvY2xvY2tzL3N0b3B3YXRjaC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _arguments = arguments;\n\nvar _events = __webpack_require__(1);\n\nvar _helpers = __webpack_require__(0);\n\nvar _messenger = __webpack_require__(3);\n\nvar _vffData = __webpack_require__(2);\n\nvar timeouts = {};\n\nmodule.exports = {\n\n    onEvent: function onEvent(arg1, arg2, arg3) {\n\n        var template = void 0,\n            callback = void 0,\n            options = void 0;\n        switch (_arguments.length) {\n            case 0:\n                throw new Error(\"onEvent was called without arguments\");\n            case 1:\n                callback = arg1;\n                break;\n            default:\n                if (typeof arg1 === 'string') {\n                    template = arg1;\n                    callback = arg2;\n                    options = arg3 || {};\n                } else if (typeof arg1 === 'function') {\n                    callback = arg1;\n                    options = arg2 || {};\n                }\n                break;\n        }\n\n        function runCB(data) {\n            if (options.consolidate || options.throttle) {\n                clearTimeout(timeouts[template || '__global_event__']);\n                timeouts[template || '__global_event__'] = setTimeout(function () {\n                    callback(data);\n                }, typeof options.throttle === 'number' ? options.throttle : 50);\n            } else {\n                callback(data);\n            }\n        }\n\n        function listener(event) {\n            if (template) {\n                var key = (0, _helpers.findKey)(event.detail, template);\n                if (key) {\n                    runCB(event.detail[key]);\n                }\n            } else {\n                runCB(event.detail);\n            }\n        }\n\n        document.addEventListener(_events.VFF_EVENT, listener);\n    },\n\n    track: function track(name, data) {\n        var payload = {};\n        payload.name = name;\n        payload.data = data;\n        payload.query = _vffData.vffData.getQueryParams();\n        (0, _messenger.send)(_events.TRACK_EVENT, payload);\n    }\n\n    // emit : (data) => {\n    //     let payload = {};\n    //     payload.data = data;\n    //     payload.query = vffData.getQueryParams();\n    //     send(OUTGOING_EVENT, payload);\n    // }\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9hcGkvZXZlbnRzLmpzPzU5OTAiXSwibmFtZXMiOlsidGltZW91dHMiLCJtb2R1bGUiLCJleHBvcnRzIiwib25FdmVudCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsInRlbXBsYXRlIiwiY2FsbGJhY2siLCJvcHRpb25zIiwibGVuZ3RoIiwiRXJyb3IiLCJydW5DQiIsImRhdGEiLCJjb25zb2xpZGF0ZSIsInRocm90dGxlIiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsImxpc3RlbmVyIiwiZXZlbnQiLCJrZXkiLCJkZXRhaWwiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJWRkZfRVZFTlQiLCJ0cmFjayIsIm5hbWUiLCJwYXlsb2FkIiwicXVlcnkiLCJ2ZmZEYXRhIiwiZ2V0UXVlcnlQYXJhbXMiLCJUUkFDS19FVkVOVCJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBLElBQUlBLFdBQVcsRUFBZjs7QUFHQUMsT0FBT0MsT0FBUCxHQUFpQjs7QUFFYkMsYUFBVSxpQkFBQ0MsSUFBRCxFQUFPQyxJQUFQLEVBQWFDLElBQWIsRUFBc0I7O0FBRTVCLFlBQUlDLGlCQUFKO0FBQUEsWUFBY0MsaUJBQWQ7QUFBQSxZQUF3QkMsZ0JBQXhCO0FBQ0EsZ0JBQVEsV0FBVUMsTUFBbEI7QUFDSSxpQkFBSyxDQUFMO0FBQ0ksc0JBQU0sSUFBSUMsS0FBSixDQUFVLHNDQUFWLENBQU47QUFDSixpQkFBSyxDQUFMO0FBQ0lILDJCQUFXSixJQUFYO0FBQ0E7QUFDSjtBQUNJLG9CQUFHLE9BQU9BLElBQVAsS0FBZ0IsUUFBbkIsRUFBNEI7QUFDeEJHLCtCQUFXSCxJQUFYO0FBQ0FJLCtCQUFXSCxJQUFYO0FBQ0FJLDhCQUFVSCxRQUFRLEVBQWxCO0FBQ0gsaUJBSkQsTUFJTyxJQUFHLE9BQU9GLElBQVAsS0FBZ0IsVUFBbkIsRUFBOEI7QUFDakNJLCtCQUFXSixJQUFYO0FBQ0FLLDhCQUFVSixRQUFRLEVBQWxCO0FBQ0g7QUFDRDtBQWZSOztBQWtCQSxpQkFBU08sS0FBVCxDQUFlQyxJQUFmLEVBQW9CO0FBQ2hCLGdCQUFHSixRQUFRSyxXQUFSLElBQXVCTCxRQUFRTSxRQUFsQyxFQUEyQztBQUN2Q0MsNkJBQWFoQixTQUFTTyxZQUFZLGtCQUFyQixDQUFiO0FBQ0FQLHlCQUFTTyxZQUFZLGtCQUFyQixJQUEyQ1UsV0FBVyxZQUFVO0FBQzVEVCw2QkFBU0ssSUFBVDtBQUNILGlCQUYwQyxFQUV2QyxPQUFPSixRQUFRTSxRQUFmLEtBQTRCLFFBQTdCLEdBQXdDTixRQUFRTSxRQUFoRCxHQUEyRCxFQUZuQixDQUEzQztBQUdILGFBTEQsTUFLTztBQUNIUCx5QkFBU0ssSUFBVDtBQUNIO0FBQ0o7O0FBRUQsaUJBQVNLLFFBQVQsQ0FBa0JDLEtBQWxCLEVBQXdCO0FBQ3BCLGdCQUFHWixRQUFILEVBQVk7QUFDUixvQkFBSWEsTUFBTSxzQkFBUUQsTUFBTUUsTUFBZCxFQUFzQmQsUUFBdEIsQ0FBVjtBQUNBLG9CQUFHYSxHQUFILEVBQU87QUFDSFIsMEJBQU1PLE1BQU1FLE1BQU4sQ0FBYUQsR0FBYixDQUFOO0FBQ0g7QUFDSixhQUxELE1BS087QUFDSFIsc0JBQU1PLE1BQU1FLE1BQVo7QUFDSDtBQUNKOztBQUVEQyxpQkFBU0MsZ0JBQVQsQ0FBMEJDLGlCQUExQixFQUFxQ04sUUFBckM7QUFDSCxLQTlDWTs7QUFnRGJPLFdBQVEsZUFBQ0MsSUFBRCxFQUFPYixJQUFQLEVBQWdCO0FBQ3BCLFlBQUljLFVBQVUsRUFBZDtBQUNBQSxnQkFBUUQsSUFBUixHQUFlQSxJQUFmO0FBQ0FDLGdCQUFRZCxJQUFSLEdBQWVBLElBQWY7QUFDQWMsZ0JBQVFDLEtBQVIsR0FBZ0JDLGlCQUFRQyxjQUFSLEVBQWhCO0FBQ0EsNkJBQUtDLG1CQUFMLEVBQWtCSixPQUFsQjtBQUNIOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUE3RGEsQ0FBakIiLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZGRl9FVkVOVCwgVFJBQ0tfRVZFTlR9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50cy5qcyc7XG5pbXBvcnQge2ZpbmRLZXl9IGZyb20gJy4uLy4uL3V0aWxzL2hlbHBlcnMnO1xuaW1wb3J0IHtzZW5kfSBmcm9tICcuLi8uLi91dGlscy9tZXNzZW5nZXInO1xuaW1wb3J0IHt2ZmZEYXRhfSBmcm9tICcuLi8uLi9jb3JlL3ZmZkRhdGEnO1xubGV0IHRpbWVvdXRzID0ge307XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cbiAgICBvbkV2ZW50IDogKGFyZzEsIGFyZzIsIGFyZzMpID0+IHtcblxuICAgICAgICBsZXQgdGVtcGxhdGUsIGNhbGxiYWNrLCBvcHRpb25zO1xuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpe1xuICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIm9uRXZlbnQgd2FzIGNhbGxlZCB3aXRob3V0IGFyZ3VtZW50c1wiKTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFyZzE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBhcmcxID09PSAnc3RyaW5nJyl7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID0gYXJnMTtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgPSBhcmcyO1xuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0gYXJnMyB8fCB7fTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYodHlwZW9mIGFyZzEgPT09ICdmdW5jdGlvbicpe1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayA9IGFyZzE7XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBhcmcyIHx8IHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHJ1bkNCKGRhdGEpe1xuICAgICAgICAgICAgaWYob3B0aW9ucy5jb25zb2xpZGF0ZSB8fCBvcHRpb25zLnRocm90dGxlKXtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dHNbdGVtcGxhdGUgfHwgJ19fZ2xvYmFsX2V2ZW50X18nXSk7XG4gICAgICAgICAgICAgICAgdGltZW91dHNbdGVtcGxhdGUgfHwgJ19fZ2xvYmFsX2V2ZW50X18nXSA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICAgICAgfSwgKHR5cGVvZiBvcHRpb25zLnRocm90dGxlID09PSAnbnVtYmVyJyk/IG9wdGlvbnMudGhyb3R0bGUgOiA1MCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbGlzdGVuZXIoZXZlbnQpe1xuICAgICAgICAgICAgaWYodGVtcGxhdGUpe1xuICAgICAgICAgICAgICAgIGxldCBrZXkgPSBmaW5kS2V5KGV2ZW50LmRldGFpbCwgdGVtcGxhdGUpO1xuICAgICAgICAgICAgICAgIGlmKGtleSl7XG4gICAgICAgICAgICAgICAgICAgIHJ1bkNCKGV2ZW50LmRldGFpbFtrZXldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJ1bkNCKGV2ZW50LmRldGFpbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFZGRl9FVkVOVCwgbGlzdGVuZXIpO1xuICAgIH0sXG5cbiAgICB0cmFjayA6IChuYW1lLCBkYXRhKSA9PiB7XG4gICAgICAgIGxldCBwYXlsb2FkID0ge307XG4gICAgICAgIHBheWxvYWQubmFtZSA9IG5hbWU7XG4gICAgICAgIHBheWxvYWQuZGF0YSA9IGRhdGE7XG4gICAgICAgIHBheWxvYWQucXVlcnkgPSB2ZmZEYXRhLmdldFF1ZXJ5UGFyYW1zKCk7XG4gICAgICAgIHNlbmQoVFJBQ0tfRVZFTlQsIHBheWxvYWQpO1xuICAgIH1cblxuICAgIC8vIGVtaXQgOiAoZGF0YSkgPT4ge1xuICAgIC8vICAgICBsZXQgcGF5bG9hZCA9IHt9O1xuICAgIC8vICAgICBwYXlsb2FkLmRhdGEgPSBkYXRhO1xuICAgIC8vICAgICBwYXlsb2FkLnF1ZXJ5ID0gdmZmRGF0YS5nZXRRdWVyeVBhcmFtcygpO1xuICAgIC8vICAgICBzZW5kKE9VVEdPSU5HX0VWRU5ULCBwYXlsb2FkKTtcbiAgICAvLyB9XG5cbn07XG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9jb3JlL2FwaS9ldmVudHMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _messenger = __webpack_require__(3);\n\nvar _events = __webpack_require__(1);\n\nvar _helpers = __webpack_require__(0);\n\nfunction go(target, time) {\n    (0, _messenger.send)(_events.GO, {\n        target: target,\n        time: time\n    });\n}\n\nmodule.exports = {\n    go: go,\n    next: _helpers.noop,\n    previous: _helpers.noop,\n    home: _helpers.noop\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9hcGkvcGxheWVyLmpzPzkyMTQiXSwibmFtZXMiOlsiZ28iLCJ0YXJnZXQiLCJ0aW1lIiwiR08iLCJtb2R1bGUiLCJleHBvcnRzIiwibmV4dCIsIm5vb3AiLCJwcmV2aW91cyIsImhvbWUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBR0EsU0FBU0EsRUFBVCxDQUFZQyxNQUFaLEVBQW9CQyxJQUFwQixFQUF5QjtBQUNyQix5QkFBS0MsVUFBTCxFQUFRO0FBQ0pGLGdCQUFVQSxNQUROO0FBRUpDLGNBQVVBO0FBRk4sS0FBUjtBQUlIOztBQUdERSxPQUFPQyxPQUFQLEdBQWlCO0FBQ2JMLFFBQWNBLEVBREQ7QUFFYk0sVUFBY0MsYUFGRDtBQUdiQyxjQUFjRCxhQUhEO0FBSWJFLFVBQWNGO0FBSkQsQ0FBakIiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3NlbmR9IGZyb20gJy4uLy4uL3V0aWxzL21lc3Nlbmdlci5qcyc7XG5pbXBvcnQge0dPfSBmcm9tICcuLi8uLi91dGlscy9ldmVudHMuanMnO1xuaW1wb3J0IHtub29wfSBmcm9tICcuLi8uLi91dGlscy9oZWxwZXJzJztcblxuXG5mdW5jdGlvbiBnbyh0YXJnZXQsIHRpbWUpe1xuICAgIHNlbmQoR08se1xuICAgICAgICB0YXJnZXQgIDogdGFyZ2V0LFxuICAgICAgICB0aW1lICAgIDogdGltZVxuICAgIH0pO1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGdvICAgICAgICAgIDogZ28sXG4gICAgbmV4dCAgICAgICAgOiBub29wLFxuICAgIHByZXZpb3VzICAgIDogbm9vcCxcbiAgICBob21lICAgICAgICA6IG5vb3AsXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2NvcmUvYXBpL3BsYXllci5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vffData = __webpack_require__(2);\n\nmodule.exports = {\n    show: function show(template) {\n        return _vffData.vffData.show(template);\n    },\n    hide: function hide(template) {\n        return _vffData.vffData.hide(template);\n    },\n    toggle: function toggle(template) {\n        return _vffData.vffData.toggle(template);\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9hcGkvdmlzaWJpbGl0eS5qcz84NzQ3Il0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJzaG93IiwidGVtcGxhdGUiLCJ2ZmZEYXRhIiwiaGlkZSIsInRvZ2dsZSJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFHQUEsT0FBT0MsT0FBUCxHQUFpQjtBQUNiQyxVQUFjLGNBQUNDLFFBQUQsRUFBYztBQUFDLGVBQU9DLGlCQUFRRixJQUFSLENBQWFDLFFBQWIsQ0FBUDtBQUErQixLQUQvQztBQUViRSxVQUFjLGNBQUNGLFFBQUQsRUFBYztBQUFDLGVBQU9DLGlCQUFRQyxJQUFSLENBQWFGLFFBQWIsQ0FBUDtBQUErQixLQUYvQztBQUdiRyxZQUFjLGdCQUFDSCxRQUFELEVBQWM7QUFBQyxlQUFPQyxpQkFBUUUsTUFBUixDQUFlSCxRQUFmLENBQVA7QUFBaUM7QUFIakQsQ0FBakIiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3ZmZkRhdGF9IGZyb20gJy4uL3ZmZkRhdGEuanMnO1xuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHNob3cgICAgICAgIDogKHRlbXBsYXRlKSA9PiB7cmV0dXJuIHZmZkRhdGEuc2hvdyh0ZW1wbGF0ZSk7fSxcbiAgICBoaWRlICAgICAgICA6ICh0ZW1wbGF0ZSkgPT4ge3JldHVybiB2ZmZEYXRhLmhpZGUodGVtcGxhdGUpO30sXG4gICAgdG9nZ2xlICAgICAgOiAodGVtcGxhdGUpID0+IHtyZXR1cm4gdmZmRGF0YS50b2dnbGUodGVtcGxhdGUpO31cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29yZS9hcGkvdmlzaWJpbGl0eS5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _helpers = __webpack_require__(0);\n\nfunction get(url, callback) {\n    var deferred = (0, _helpers.defer)();\n    var xmlHttp = new XMLHttpRequest();\n    xmlHttp.onreadystatechange = function () {\n        if (xmlHttp.readyState == 4) {\n            if (xmlHttp.status == 200) {\n                if (callback) {\n                    callback(xmlHttp.responseText);\n                }\n                deferred.resolve(xmlHttp.responseText);\n            } else {\n                deferred.reject(xmlHttp.status);\n            }\n        }\n    };\n    xmlHttp.open(\"GET\", url, true); // true for asynchronous\n    xmlHttp.send(null);\n    return deferred.promise;\n}\n\nmodule.exports = {\n    get: get\n\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvY29yZS9hcGkvaHR0cC5qcz9mYzhiIl0sIm5hbWVzIjpbImdldCIsInVybCIsImNhbGxiYWNrIiwiZGVmZXJyZWQiLCJ4bWxIdHRwIiwiWE1MSHR0cFJlcXVlc3QiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwicmVzcG9uc2VUZXh0IiwicmVzb2x2ZSIsInJlamVjdCIsIm9wZW4iLCJzZW5kIiwicHJvbWlzZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUEsU0FBU0EsR0FBVCxDQUFhQyxHQUFiLEVBQWtCQyxRQUFsQixFQUE0QjtBQUN4QixRQUFJQyxXQUFXLHFCQUFmO0FBQ0EsUUFBSUMsVUFBVSxJQUFJQyxjQUFKLEVBQWQ7QUFDQUQsWUFBUUUsa0JBQVIsR0FBNkIsWUFBVztBQUNwQyxZQUFJRixRQUFRRyxVQUFSLElBQXNCLENBQTFCLEVBQTZCO0FBQ3pCLGdCQUFHSCxRQUFRSSxNQUFSLElBQWtCLEdBQXJCLEVBQXlCO0FBQ3JCLG9CQUFHTixRQUFILEVBQVk7QUFDUkEsNkJBQVNFLFFBQVFLLFlBQWpCO0FBQ0g7QUFDRE4seUJBQVNPLE9BQVQsQ0FBaUJOLFFBQVFLLFlBQXpCO0FBQ0gsYUFMRCxNQUtPO0FBQ0hOLHlCQUFTUSxNQUFULENBQWdCUCxRQUFRSSxNQUF4QjtBQUNIO0FBRUo7QUFDSixLQVpEO0FBYUFKLFlBQVFRLElBQVIsQ0FBYSxLQUFiLEVBQW9CWCxHQUFwQixFQUF5QixJQUF6QixFQWhCd0IsQ0FnQlE7QUFDaENHLFlBQVFTLElBQVIsQ0FBYSxJQUFiO0FBQ0EsV0FBT1YsU0FBU1csT0FBaEI7QUFDSDs7QUFHREMsT0FBT0MsT0FBUCxHQUFpQjtBQUNiaEIsU0FBZUE7O0FBREYsQ0FBakIiLCJmaWxlIjoiNDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2RlZmVyfSBmcm9tIFwiLi4vLi4vdXRpbHMvaGVscGVyc1wiO1xuXG5mdW5jdGlvbiBnZXQodXJsLCBjYWxsYmFjaykge1xuICAgIGxldCBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgdmFyIHhtbEh0dHAgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB4bWxIdHRwLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoeG1sSHR0cC5yZWFkeVN0YXRlID09IDQpIHtcbiAgICAgICAgICAgIGlmKHhtbEh0dHAuc3RhdHVzID09IDIwMCl7XG4gICAgICAgICAgICAgICAgaWYoY2FsbGJhY2spe1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh4bWxIdHRwLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmVycmVkLnJlc29sdmUoeG1sSHR0cC5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZlcnJlZC5yZWplY3QoeG1sSHR0cC5zdGF0dXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhtbEh0dHAub3BlbihcIkdFVFwiLCB1cmwsIHRydWUpOyAvLyB0cnVlIGZvciBhc3luY2hyb25vdXNcbiAgICB4bWxIdHRwLnNlbmQobnVsbCk7XG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgZ2V0ICAgICAgICAgIDogZ2V0XG5cbn07XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvY29yZS9hcGkvaHR0cC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ })
/******/ ]);
});